// // The Great Computer Language Shootout
// 
// // http://shootout.alioth.debian.org/
// 
// //
// 
// // contributed by Ian Osgood
// 
// function A(i,j) {
  0:                 meta   12  255          // [to be rewritten]
//   return 1/((i+j)*(i+j+1)/2+i+1);
// }
// function Au(u,v) {
//   for (var i=0; i<u.length; ++i) {
//     var t = 0;
//     for (var j=0; j<u.length; ++j)
//       t += A(i,j) * u[j];
//     v[i] = t;
//   }
// }
// function Atu(u,v) {
//   for (var i=0; i<u.length; ++i) {
//     var t = 0;
//     for (var j=0; j<u.length; ++j)
//       t += A(j,i) * u[j];
//     v[i] = t;
//   }
// }
// function AtAu(u,v,w) {
//   Au(u,w);
//   Atu(w,v);
// }
// function spectralnorm(n) {
//   var i, u=[], v=[], w=[], vv=0, vBv=0;
//   for (i=0; i<n; ++i) {
//     u[i] = 1; v[i] = w[i] = 0;
//   }
//   for (i=0; i<10; ++i) {
//     AtAu(u,v,w);
//     AtAu(v,u,w);
//   }
//   for (i=0; i<n; ++i) {
//     vBv += u[i]*v[i];
//     vv  += v[i]*v[i];
//   }
//   return Math.sqrt(vBv/vv);
// }
// var total = 0;
// for (var i = 6; i <= 48; i *= 2) {
//     total += spectralnorm(i);
// }
// var expected = 5.086694231303284;
// if (total != expected)
//     throw "ERROR: bad result: expected " + expected + " but got " + total;
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
//   return 1/((i+j)*(i+j+1)/2+i+1);
// }
// function Au(u,v) {
//   for (var i=0; i<u.length; ++i) {
//     var t = 0;
//     for (var j=0; j<u.length; ++j)
//       t += A(i,j) * u[j];
//     v[i] = t;
//   }
// }
// function Atu(u,v) {
//   for (var i=0; i<u.length; ++i) {
//     var t = 0;
//     for (var j=0; j<u.length; ++j)
//       t += A(j,i) * u[j];
//     v[i] = t;
//   }
// }
// function AtAu(u,v,w) {
//   Au(u,w);
//   Atu(w,v);
// }
// function spectralnorm(n) {
//   var i, u=[], v=[], w=[], vv=0, vBv=0;
//   for (i=0; i<n; ++i) {
//     u[i] = 1; v[i] = w[i] = 0;
//   }
//   for (i=0; i<10; ++i) {
//     AtAu(u,v,w);
//     AtAu(v,u,w);
//   }
//   for (i=0; i<n; ++i) {
//     vBv += u[i]*v[i];
//     vv  += v[i]*v[i];
//   }
//   return Math.sqrt(vBv/vv);
// }
// var total = 0;
  2:             var_decl                    // var total;
// for (var i = 6; i <= 48; i *= 2) {
  3:             var_decl                    // var i;
//     total += spectralnorm(i);
// }
// var expected = 5.086694231303284;
  4:             var_decl                    // var expected;
// if (total != expected)
//     throw "ERROR: bad result: expected " + expected + " but got " + total;
// 
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  3:                 meta    7  255          // function end: 65538;
//   return 1/((i+j)*(i+j+1)/2+i+1);
  4:                 meta   12  255          // [to be rewritten]
// }
  4:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp255;
// }
  6:           assignment  130    1          // tmp130 = 1: SMALLINT;
  7:           assignment  131    6          // tmp131 = i : TYPEOF(i);
  8:             addition  132  131          // tmp132 = tmp131 + j;
  9:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 10:             addition  134  133          // tmp134 = tmp133 + j;
 11:           assignment  135    1          // tmp135 = 1: SMALLINT;
 12:             addition  136  134          // tmp136 = tmp134 + tmp135;
 13:       multiplication  137  132          // tmp137 = tmp132 * tmp136;
 14:           assignment  138    1          // tmp138 = 2: SMALLINT;
 15:             division  139  137          // tmp139 = tmp137 / tmp138;
 16:             addition  140  139          // tmp140 = tmp139 + i;
 17:           assignment  141    1          // tmp141 = 1: SMALLINT;
 18:             addition  142  140          // tmp142 = tmp140 + tmp141;
 19:             division  143  130          // tmp143 = tmp130 / tmp142;
 20:               retval                    // return tmp143;
// }
  5:         reg_var_decl  128               // var tmp128 .. tmp143; // REWRITE
 21:                  ret                    // ret;
  3:                 meta    7    0          // function end: 22; // REWRITE
// function Au(u,v) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  3:                 meta    7  255          // function end: 65538;
//   for (var i=0; i<u.length; ++i) {
  4:                 meta   12  255          // [to be rewritten]
//     var t = 0;
//     for (var j=0; j<u.length; ++j)
//       t += A(i,j) * u[j];
//     v[i] = t;
//   }
// }
  4:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp255;
  6:             var_decl                    // var i;
//     var t = 0;
  7:             var_decl                    // var t;
//     for (var j=0; j<u.length; ++j)
  8:             var_decl                    // var j;
//       t += A(i,j) * u[j];
//     v[i] = t;
//   }
// }
  9:           assignment  130    1          // tmp130 = 0: SMALLINT;
 10:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 11:             jmp_down  255               // goto 65546;
//     var t = 0;
 12:           assignment  130    1          // tmp130 = 0: SMALLINT;
 13:           assignment  254    6          // t = tmp130 : TYPEOF(tmp130);
//     for (var j=0; j<u.length; ++j)
//       t += A(i,j) * u[j];
 14:           assignment  130    1          // tmp130 = 0: SMALLINT;
 15:           assignment  254    6          // j = tmp130 : TYPEOF(tmp130);
 16:             jmp_down  255               // goto 65551;
 17:               call_n  255  254          // 
 18:                 meta    2  254          // 
 19:                 meta    2  254          // 
 17:               call_n  130  254          //  // REWRITE
 20:          prop_getter  131  254          // tmp131 = u[j];
 21:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
 22:             addition  254  254          // t = t + tmp132;
 23:           assignment  133    6          // tmp133 = t : TYPEOF(t);
 24:             pre_incr  134               // tmp134 = ++j;
 16:             jmp_down    0               // goto 25; // REWRITE
 25:           assignment  135    6          // tmp135 = j : TYPEOF(j);
 26:           assignment  136    5          // tmp136 = 'length': STRING;
 27:          prop_getter  137  254          // tmp137 = u[tmp136];
 28:            less_than  138  135          // tmp138 = tmp135 < tmp137;
 29:       is_true_jmp_up  138    0          // if (tmp138) goto 17;
//     v[i] = t;
 30:          prop_getter  130  254          // tmp130 = v[i];
 30:          prop_setter  254  254          // v[i] = t;
 31:           assignment  131    6          // tmp131 = t : TYPEOF(t);
//   }
 32:             pre_incr  132               // tmp132 = ++i;
 11:             jmp_down    0               // goto 33; // REWRITE
 33:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 34:           assignment  134    5          // tmp134 = 'length': STRING;
 35:          prop_getter  135  254          // tmp135 = u[tmp134];
 36:            less_than  136  133          // tmp136 = tmp133 < tmp135;
 37:       is_true_jmp_up  136    0          // if (tmp136) goto 12;
// }
  5:         reg_var_decl  128               // var tmp128 .. tmp138; // REWRITE
 38:                  ret                    // ret;
  3:                 meta    7    0          // function end: 39; // REWRITE
// function Atu(u,v) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  3:                 meta    7  255          // function end: 65538;
//   for (var i=0; i<u.length; ++i) {
  4:                 meta   12  255          // [to be rewritten]
//     var t = 0;
//     for (var j=0; j<u.length; ++j)
//       t += A(j,i) * u[j];
//     v[i] = t;
//   }
// }
  4:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp255;
  6:             var_decl                    // var i;
//     var t = 0;
  7:             var_decl                    // var t;
//     for (var j=0; j<u.length; ++j)
  8:             var_decl                    // var j;
//       t += A(j,i) * u[j];
//     v[i] = t;
//   }
// }
  9:           assignment  130    1          // tmp130 = 0: SMALLINT;
 10:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 11:             jmp_down  255               // goto 65546;
//     var t = 0;
 12:           assignment  130    1          // tmp130 = 0: SMALLINT;
 13:           assignment  254    6          // t = tmp130 : TYPEOF(tmp130);
//     for (var j=0; j<u.length; ++j)
//       t += A(j,i) * u[j];
 14:           assignment  130    1          // tmp130 = 0: SMALLINT;
 15:           assignment  254    6          // j = tmp130 : TYPEOF(tmp130);
 16:             jmp_down  255               // goto 65551;
 17:               call_n  255  254          // 
 18:                 meta    2  254          // 
 19:                 meta    2  254          // 
 17:               call_n  130  254          //  // REWRITE
 20:          prop_getter  131  254          // tmp131 = u[j];
 21:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
 22:             addition  254  254          // t = t + tmp132;
 23:           assignment  133    6          // tmp133 = t : TYPEOF(t);
 24:             pre_incr  134               // tmp134 = ++j;
 16:             jmp_down    0               // goto 25; // REWRITE
 25:           assignment  135    6          // tmp135 = j : TYPEOF(j);
 26:           assignment  136    5          // tmp136 = 'length': STRING;
 27:          prop_getter  137  254          // tmp137 = u[tmp136];
 28:            less_than  138  135          // tmp138 = tmp135 < tmp137;
 29:       is_true_jmp_up  138    0          // if (tmp138) goto 17;
//     v[i] = t;
 30:          prop_getter  130  254          // tmp130 = v[i];
 30:          prop_setter  254  254          // v[i] = t;
 31:           assignment  131    6          // tmp131 = t : TYPEOF(t);
//   }
 32:             pre_incr  132               // tmp132 = ++i;
 11:             jmp_down    0               // goto 33; // REWRITE
 33:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 34:           assignment  134    5          // tmp134 = 'length': STRING;
 35:          prop_getter  135  254          // tmp135 = u[tmp134];
 36:            less_than  136  133          // tmp136 = tmp133 < tmp135;
 37:       is_true_jmp_up  136    0          // if (tmp136) goto 12;
// }
  5:         reg_var_decl  128               // var tmp128 .. tmp138; // REWRITE
 38:                  ret                    // ret;
  3:                 meta    7    0          // function end: 39; // REWRITE
// function AtAu(u,v,w) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  3:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  4:                 meta    7  255          // function end: 65539;
//   Au(u,w);
  5:                 meta   12  255          // [to be rewritten]
//   Atu(w,v);
// }
  5:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128               // var tmp128 .. tmp255;
//   Atu(w,v);
// }
  7:               call_n  255  254          // 
  8:                 meta    2  254          // 
  9:                 meta    2  254          // 
  7:               call_n  130  254          //  // REWRITE
//   Atu(w,v);
 10:               call_n  255  254          // 
 11:                 meta    2  254          // 
 12:                 meta    2  254          // 
 10:               call_n  130  254          //  // REWRITE
// }
  6:         reg_var_decl  128               // var tmp128 .. tmp130; // REWRITE
 13:                  ret                    // ret;
  4:                 meta    7    0          // function end: 14; // REWRITE
// function spectralnorm(n) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  2:                 meta    7  255          // function end: 65537;
//   var i, u=[], v=[], w=[], vv=0, vBv=0;
  3:                 meta   12  255          // [to be rewritten]
//   for (i=0; i<n; ++i) {
//     u[i] = 1; v[i] = w[i] = 0;
//   }
//   for (i=0; i<10; ++i) {
//     AtAu(u,v,w);
//     AtAu(v,u,w);
//   }
//   for (i=0; i<n; ++i) {
//     vBv += u[i]*v[i];
//     vv  += v[i]*v[i];
//   }
//   return Math.sqrt(vBv/vv);
// }
  3:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128               // var tmp128 .. tmp255;
  5:             var_decl                    // var i;
  6:             var_decl                    // var u;
  7:             var_decl                    // var v;
  8:             var_decl                    // var w;
  9:             var_decl                    // var vv;
 10:             var_decl                    // var vBv;
//   for (i=0; i<n; ++i) {
//     u[i] = 1; v[i] = w[i] = 0;
//   }
//   for (i=0; i<10; ++i) {
//     AtAu(u,v,w);
//     AtAu(v,u,w);
//   }
//   for (i=0; i<n; ++i) {
//     vBv += u[i]*v[i];
//     vv  += v[i]*v[i];
//   }
//   return Math.sqrt(vBv/vv);
// }
 11:           array_decl  255               // 
 11:           array_decl  130               // tmp130 = []; // REWRITE
 12:           assignment  254    6          // u = tmp130 : TYPEOF(tmp130);
 13:           array_decl  255               // 
 13:           array_decl  131               // tmp131 = []; // REWRITE
 14:           assignment  254    6          // v = tmp131 : TYPEOF(tmp131);
 15:           array_decl  255               // 
 15:           array_decl  132               // tmp132 = []; // REWRITE
 16:           assignment  254    6          // w = tmp132 : TYPEOF(tmp132);
 17:           assignment  133    1          // tmp133 = 0: SMALLINT;
 18:           assignment  254    6          // vv = tmp133 : TYPEOF(tmp133);
 19:           assignment  134    1          // tmp134 = 0: SMALLINT;
 20:           assignment  254    6          // vBv = tmp134 : TYPEOF(tmp134);
//   for (i=0; i<n; ++i) {
 21:           assignment  130    1          // tmp130 = 0: SMALLINT;
 22:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 23:             jmp_down  255               // goto 65558;
//     u[i] = 1; v[i] = w[i] = 0;
 24:          prop_getter  130  254          // tmp130 = u[i];
 24:           assignment  131    1          // tmp131 = 1: SMALLINT;
 25:          prop_setter  254  254          // u[i] = tmp131;
 26:          prop_getter  130  254          // tmp130 = v[i];
 26:          prop_getter  131  254          // tmp131 = w[i];
 26:           assignment  132    1          // tmp132 = 0: SMALLINT;
 27:          prop_setter  254  254          // w[i] = tmp132;
 28:          prop_setter  254  254          // v[i] = tmp132;
//   }
 29:             pre_incr  133               // tmp133 = ++i;
 23:             jmp_down    0               // goto 30; // REWRITE
 30:           assignment  134    6          // tmp134 = i : TYPEOF(i);
 31:            less_than  135  134          // tmp135 = tmp134 < n;
 32:       is_true_jmp_up  135    0          // if (tmp135) goto 24;
//   for (i=0; i<10; ++i) {
 33:           assignment  130    1          // tmp130 = 0: SMALLINT;
 34:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 35:             jmp_down  255               // goto 65570;
//     AtAu(u,v,w);
 36:               call_n  255  254          // 
 37:                 meta    2  254          // 
 38:                 meta    2  254          // 
 39:                 meta    2  254          // 
 36:               call_n  130  254          //  // REWRITE
//     AtAu(v,u,w);
 40:               call_n  255  254          // 
 41:                 meta    2  254          // 
 42:                 meta    2  254          // 
 43:                 meta    2  254          // 
 40:               call_n  130  254          //  // REWRITE
//   }
 44:             pre_incr  131               // tmp131 = ++i;
 35:             jmp_down    0               // goto 45; // REWRITE
 45:           assignment  132    6          // tmp132 = i : TYPEOF(i);
 46:           assignment  133    1          // tmp133 = 10: SMALLINT;
 47:            less_than  134  132          // tmp134 = tmp132 < tmp133;
 48:       is_true_jmp_up  134    0          // if (tmp134) goto 36;
//   for (i=0; i<n; ++i) {
 49:           assignment  130    1          // tmp130 = 0: SMALLINT;
 50:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 51:             jmp_down  255               // goto 65586;
//     vBv += u[i]*v[i];
 52:          prop_getter  130  254          // tmp130 = u[i];
 53:          prop_getter  131  254          // tmp131 = v[i];
 54:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
 55:             addition  254  254          // vBv = vBv + tmp132;
 56:           assignment  133    6          // tmp133 = vBv : TYPEOF(vBv);
//     vv  += v[i]*v[i];
 57:          prop_getter  130  254          // tmp130 = v[i];
 58:          prop_getter  131  254          // tmp131 = v[i];
 59:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
 60:             addition  254  254          // vv = vv + tmp132;
 61:           assignment  133    6          // tmp133 = vv : TYPEOF(vv);
//   }
 62:             pre_incr  134               // tmp134 = ++i;
 51:             jmp_down    0               // goto 63; // REWRITE
 63:           assignment  135    6          // tmp135 = i : TYPEOF(i);
 64:            less_than  136  135          // tmp136 = tmp135 < n;
 65:       is_true_jmp_up  136    0          // if (tmp136) goto 52;
//   return Math.sqrt(vBv/vv);
 66:           assignment  130    5          // tmp130 = 'sqrt': STRING;
 67:          prop_getter  131  254          // tmp131 = Math[tmp130];
 68:           assignment  132    6          // tmp132 = Math : TYPEOF(Math);
 69:               call_n  255  131          // 
 70:                 meta    1    1          // 
 71:           assignment  133    6          // tmp133 = vBv : TYPEOF(vBv);
 72:             division  134  133          // tmp134 = tmp133 / vv;
 73:                 meta    2  134          // 
 69:               call_n  133  131          //  // REWRITE
 74:               retval                    // return tmp133;
// }
  4:         reg_var_decl  128               // var tmp128 .. tmp136; // REWRITE
 75:                  ret                    // ret;
  2:                 meta    7    0          // function end: 76; // REWRITE
// var total = 0;
  5:           assignment  130    1          // tmp130 = 0: SMALLINT;
  6:           assignment  254    6          // total = tmp130 : TYPEOF(tmp130);
// for (var i = 6; i <= 48; i *= 2) {
  7:           assignment  130    1          // tmp130 = 6: SMALLINT;
  8:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
  9:             jmp_down  255               // goto 65544;
//     total += spectralnorm(i);
 10:               call_n  255  254          // 
 11:                 meta    2  254          // 
 10:               call_n  130  254          //  // REWRITE
 12:             addition  254  254          // total = total + tmp130;
 13:           assignment  131    6          // tmp131 = total : TYPEOF(total);
// }
 14:           assignment  132    1          // tmp132 = 2: SMALLINT;
 15:       multiplication  254  254          // i = i * tmp132;
  9:             jmp_down    0               // goto 16; // REWRITE
 16:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 17:           assignment  134    1          // tmp134 = 48: SMALLINT;
 18:   less_or_equal_than  135  133          // tmp135 = tmp133 <= tmp134;
 19:       is_true_jmp_up  135    0          // if (tmp135) goto 10;
// var expected = 5.086694231303284;
 20:           assignment  130    3          // tmp130 = 5.086694231303284: NUMBER;
 21:           assignment  254    6          // expected = tmp130 : TYPEOF(tmp130);
// if (total != expected)
 22:           assignment  130    6          // tmp130 = total : TYPEOF(total);
 23:      not_equal_value  131  130          // tmp131 = tmp130 != expected;
 24:    is_false_jmp_down  131  255          // if (tmp131 == false) goto 65559;
//     throw "ERROR: bad result: expected " + expected + " but got " + total;
 25:           assignment  130    5          // tmp130 = 'ERROR: bad result: expected ': STRING;
 26:             addition  131  130          // tmp131 = tmp130 + expected;
 27:           assignment  132    5          // tmp132 = ' but got ': STRING;
 28:             addition  133  131          // tmp133 = tmp131 + tmp132;
 29:             addition  134  133          // tmp134 = tmp133 + total;
 30:          throw_value                    // throw tmp134;
// 
 24:    is_false_jmp_down  131    0          // if (tmp131 == false) goto 31; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp135; // REWRITE
 31:                  ret                    // ret;
LITERALS:
0x84ec54 [  8] A : STRING
0x84ec5c [  4] i : MAGIC STRING [id=200] 
0x84ec60 [  8] j : STRING
0x84ec68 [  8] Au : STRING
0x84ec70 [  8] u : STRING
0x84ec78 [  8] v : STRING
0x84ec94 [  4] length : MAGIC STRING [id=15] 
0x84ec98 [  8] t : STRING
0x84eca0 [ 12] Atu : STRING
0x84ecac [ 12] AtAu : STRING
0x84ecb8 [  8] w : STRING
0x84ecd4 [ 20] spectralnorm : STRING
0x84ece8 [  8] n : STRING
0x84ecf0 [  8] vv : STRING
0x84ecf8 [ 12] vBv : STRING
0x84ed18 [  4] Math : MAGIC STRING [id=44] 
0x84ed1c [  4] sqrt : MAGIC STRING [id=99] 
0x84ed20 [ 12] total : STRING
0x84ed2c [ 16] expected : STRING
0x84ed3c [ 12] 5.086694231303284 : NUMBER
0x84ed5c [ 36] ERROR: bad result: expected  : STRING
0x84ed94 [ 16]  but got  : STRING
0x84eda4 [ 28]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp135;
  2:             var_decl                    // var total;
  3:             var_decl                    // var i;
  4:             var_decl                    // var expected;
  5:          func_decl_n    3               // 
  6:                 meta    2    1          // 
  7:                 meta    2    4          // function A (i, j);
  8:                 meta    7    0          // function end: 27;
  9:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
 10:         reg_var_decl  128               // var tmp128 .. tmp143;
 11:           assignment  130    1          // tmp130 = 1: SMALLINT;
 12:           assignment  131    6          // tmp131 = i : TYPEOF(i);
 13:             addition  132  131          // tmp132 = tmp131 + j;
 14:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 15:             addition  134  133          // tmp134 = tmp133 + j;
 16:           assignment  135    1          // tmp135 = 1: SMALLINT;
 17:             addition  136  134          // tmp136 = tmp134 + tmp135;
 18:       multiplication  137  132          // tmp137 = tmp132 * tmp136;
 19:           assignment  138    1          // tmp138 = 2: SMALLINT;
 20:             division  139  137          // tmp139 = tmp137 / tmp138;
 21:             addition  140  139          // tmp140 = tmp139 + i;
 22:           assignment  141    1          // tmp141 = 1: SMALLINT;
 23:             addition  142  140          // tmp142 = tmp140 + tmp141;
 24:             division  143  130          // tmp143 = tmp130 / tmp142;
 25:               retval                    // return tmp143;
 26:                  ret                    // ret;
 27:          func_decl_n    5               // 
 28:                 meta    2    6          // 
 29:                 meta    2    7          // function Au (u, v);
 30:                 meta    7    0          // function end: 66;
 31:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
 32:         reg_var_decl  128               // var tmp128 .. tmp138;
 33:             var_decl                    // var i;
 34:             var_decl                    // var t;
 35:             var_decl                    // var j;
 36:           assignment  130    1          // tmp130 = 0: SMALLINT;
 37:           assignment    1    6          // i = tmp130 : TYPEOF(tmp130);
 38:             jmp_down    0               // goto 60;
 39:           assignment  130    1          // tmp130 = 0: SMALLINT;
 40:           assignment    8    6          // t = tmp130 : TYPEOF(tmp130);
 41:           assignment  130    1          // tmp130 = 0: SMALLINT;
 42:           assignment    4    6          // j = tmp130 : TYPEOF(tmp130);
 43:             jmp_down    0               // goto 52;
 44:               call_n  130    3          // 
 45:                 meta    2    1          // 
 46:                 meta    2    4          // tmp130 = A (i, j);
 47:          prop_getter  131    6          // tmp131 = u[j];
 48:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
 49:             addition    8    8          // t = t + tmp132;
 50:           assignment  133    6          // tmp133 = t : TYPEOF(t);
 51:             pre_incr  134               // tmp134 = ++j;
 52:           assignment  135    6          // tmp135 = j : TYPEOF(j);
 53:           assignment  136    5          // tmp136 = 'length': STRING;
 54:          prop_getter  137    6          // tmp137 = u[tmp136];
 55:            less_than  138  135          // tmp138 = tmp135 < tmp137;
 56:       is_true_jmp_up  138    0          // if (tmp138) goto 44;
 57:          prop_setter    7    1          // v[i] = t;
 58:           assignment  131    6          // tmp131 = t : TYPEOF(t);
 59:             pre_incr  132               // tmp132 = ++i;
 60:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 61:           assignment  134    5          // tmp134 = 'length': STRING;
 62:          prop_getter  135    6          // tmp135 = u[tmp134];
 63:            less_than  136  133          // tmp136 = tmp133 < tmp135;
 64:       is_true_jmp_up  136    0          // if (tmp136) goto 39;
 65:                  ret                    // ret;
 66:          func_decl_n    0               // 
 67:                 meta    2    1          // 
 68:                 meta    2    2          // function Atu (u, v);
 69:                 meta    7    0          // function end: 105;
 70:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
 71:         reg_var_decl  128               // var tmp128 .. tmp138;
 72:             var_decl                    // var i;
 73:             var_decl                    // var t;
 74:             var_decl                    // var j;
 75:           assignment  130    1          // tmp130 = 0: SMALLINT;
 76:           assignment    3    6          // i = tmp130 : TYPEOF(tmp130);
 77:             jmp_down    0               // goto 99;
 78:           assignment  130    1          // tmp130 = 0: SMALLINT;
 79:           assignment    4    6          // t = tmp130 : TYPEOF(tmp130);
 80:           assignment  130    1          // tmp130 = 0: SMALLINT;
 81:           assignment    5    6          // j = tmp130 : TYPEOF(tmp130);
 82:             jmp_down    0               // goto 91;
 83:               call_n  130    6          // 
 84:                 meta    2    5          // 
 85:                 meta    2    3          // tmp130 = A (j, i);
 86:          prop_getter  131    1          // tmp131 = u[j];
 87:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
 88:             addition    4    4          // t = t + tmp132;
 89:           assignment  133    6          // tmp133 = t : TYPEOF(t);
 90:             pre_incr  134               // tmp134 = ++j;
 91:           assignment  135    6          // tmp135 = j : TYPEOF(j);
 92:           assignment  136    5          // tmp136 = 'length': STRING;
 93:          prop_getter  137    1          // tmp137 = u[tmp136];
 94:            less_than  138  135          // tmp138 = tmp135 < tmp137;
 95:       is_true_jmp_up  138    0          // if (tmp138) goto 83;
 96:          prop_setter    2    3          // v[i] = t;
 97:           assignment  131    6          // tmp131 = t : TYPEOF(t);
 98:             pre_incr  132               // tmp132 = ++i;
 99:           assignment  133    6          // tmp133 = i : TYPEOF(i);
100:           assignment  134    5          // tmp134 = 'length': STRING;
101:          prop_getter  135    1          // tmp135 = u[tmp134];
102:            less_than  136  133          // tmp136 = tmp133 < tmp135;
103:       is_true_jmp_up  136    0          // if (tmp136) goto 78;
104:                  ret                    // ret;
105:          func_decl_n    8               // 
106:                 meta    2    1          // 
107:                 meta    2    2          // 
108:                 meta    2    9          // function AtAu (u, v, w);
109:                 meta    7    0          // function end: 119;
110:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
111:         reg_var_decl  128               // var tmp128 .. tmp130;
112:               call_n  130   10          // 
113:                 meta    2    1          // 
114:                 meta    2    9          // tmp130 = Au (u, w);
115:               call_n  130    0          // 
116:                 meta    2    9          // 
117:                 meta    2    2          // tmp130 = Atu (w, v);
118:                  ret                    // ret;
119:          func_decl_n   11               // 
120:                 meta    2   12          // function spectralnorm (n);
121:                 meta    7    0          // function end: 195;
122:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
123:         reg_var_decl  128               // var tmp128 .. tmp136;
124:             var_decl                    // var i;
125:             var_decl                    // var u;
126:             var_decl                    // var v;
127:             var_decl                    // var w;
128:             var_decl                    // var vv;
129:             var_decl                    // var vBv;
130:           array_decl  130               // tmp130 = [];
131:           assignment    2    6          // u = tmp130 : TYPEOF(tmp130);
132:           array_decl  131               // tmp131 = [];
133:           assignment    3    6          // v = tmp131 : TYPEOF(tmp131);
134:           array_decl  132               // tmp132 = [];
135:           assignment    4    6          // w = tmp132 : TYPEOF(tmp132);
136:           assignment  133    1          // tmp133 = 0: SMALLINT;
137:           assignment    0    6          // vv = tmp133 : TYPEOF(tmp133);
138:           assignment  134    1          // tmp134 = 0: SMALLINT;
139:           assignment    1    6          // vBv = tmp134 : TYPEOF(tmp134);
140:           assignment  130    1          // tmp130 = 0: SMALLINT;
141:           assignment    5    6          // i = tmp130 : TYPEOF(tmp130);
142:             jmp_down    0               // goto 149;
143:           assignment  131    1          // tmp131 = 1: SMALLINT;
144:          prop_setter    2    5          // u[i] = tmp131;
145:           assignment  132    1          // tmp132 = 0: SMALLINT;
146:          prop_setter    4    5          // w[i] = tmp132;
147:          prop_setter    3    5          // v[i] = tmp132;
148:             pre_incr  133               // tmp133 = ++i;
149:           assignment  134    6          // tmp134 = i : TYPEOF(i);
150:            less_than  135  134          // tmp135 = tmp134 < n;
151:       is_true_jmp_up  135    0          // if (tmp135) goto 143;
152:           assignment  130    1          // tmp130 = 0: SMALLINT;
153:           assignment    5    6          // i = tmp130 : TYPEOF(tmp130);
154:             jmp_down    0               // goto 164;
155:               call_n  130    7          // 
156:                 meta    2    2          // 
157:                 meta    2    3          // 
158:                 meta    2    4          // tmp130 = AtAu (u, v, w);
159:               call_n  130    7          // 
160:                 meta    2    3          // 
161:                 meta    2    2          // 
162:                 meta    2    4          // tmp130 = AtAu (v, u, w);
163:             pre_incr  131               // tmp131 = ++i;
164:           assignment  132    6          // tmp132 = i : TYPEOF(i);
165:           assignment  133    1          // tmp133 = 10: SMALLINT;
166:            less_than  134  132          // tmp134 = tmp132 < tmp133;
167:       is_true_jmp_up  134    0          // if (tmp134) goto 155;
168:           assignment  130    1          // tmp130 = 0: SMALLINT;
169:           assignment    5    6          // i = tmp130 : TYPEOF(tmp130);
170:             jmp_down    0               // goto 182;
171:          prop_getter  130    2          // tmp130 = u[i];
172:          prop_getter  131    3          // tmp131 = v[i];
173:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
174:             addition    1    1          // vBv = vBv + tmp132;
175:           assignment  133    6          // tmp133 = vBv : TYPEOF(vBv);
176:          prop_getter  130    3          // tmp130 = v[i];
177:          prop_getter  131    3          // tmp131 = v[i];
178:       multiplication  132  130          // tmp132 = tmp130 * tmp131;
179:             addition    0    0          // vv = vv + tmp132;
180:           assignment  133    6          // tmp133 = vv : TYPEOF(vv);
181:             pre_incr  134               // tmp134 = ++i;
182:           assignment  135    6          // tmp135 = i : TYPEOF(i);
183:            less_than  136  135          // tmp136 = tmp135 < n;
184:       is_true_jmp_up  136    0          // if (tmp136) goto 171;
185:           assignment  130    5          // tmp130 = 'sqrt': STRING;
186:          prop_getter  131    9          // tmp131 = Math[tmp130];
187:           assignment  132    6          // tmp132 = Math : TYPEOF(Math);
188:               call_n  133  131          // 
189:                 meta    1    1          // 
190:           assignment  133    6          // tmp133 = vBv : TYPEOF(vBv);
191:             division  134  133          // tmp134 = tmp133 / vv;
192:                 meta    2  134          // tmp133 = tmp131 (this_arg = tmp132, tmp134);
193:               retval                    // return tmp133;
194:                  ret                    // ret;
195:           assignment  130    1          // tmp130 = 0: SMALLINT;
196:           assignment    0    6          // total = tmp130 : TYPEOF(tmp130);
197:           assignment  130    1          // tmp130 = 6: SMALLINT;
198:           assignment    1    6          // i = tmp130 : TYPEOF(tmp130);
199:             jmp_down    0               // goto 206;
200:               call_n  130    2          // 
201:                 meta    2    1          // tmp130 = spectralnorm (i);
202:             addition    0    0          // total = total + tmp130;
203:           assignment  131    6          // tmp131 = total : TYPEOF(total);
204:           assignment  132    1          // tmp132 = 2: SMALLINT;
205:       multiplication    1    1          // i = i * tmp132;
206:           assignment  133    6          // tmp133 = i : TYPEOF(i);
207:           assignment  134    1          // tmp134 = 48: SMALLINT;
208:   less_or_equal_than  135  133          // tmp135 = tmp133 <= tmp134;
209:       is_true_jmp_up  135    0          // if (tmp135) goto 200;
210:           assignment  130    3          // tmp130 = 5.086694231303284: NUMBER;
211:           assignment    4    6          // expected = tmp130 : TYPEOF(tmp130);
212:           assignment  130    6          // tmp130 = total : TYPEOF(total);
213:      not_equal_value  131  130          // tmp131 = tmp130 != expected;
214:    is_false_jmp_down  131    0          // if (tmp131 == false) goto 221;
215:           assignment  130    5          // tmp130 = 'ERROR: bad result: expected ': STRING;
216:             addition  131  130          // tmp131 = tmp130 + expected;
217:           assignment  132    5          // tmp132 = ' but got ': STRING;
218:             addition  133  131          // tmp133 = tmp131 + tmp132;
219:             addition  134  133          // tmp134 = tmp133 + total;
220:          throw_value                    // throw tmp134;
221:                  ret                    // ret;
