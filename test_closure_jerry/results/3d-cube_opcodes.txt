// // 3D Cube Rotation
// 
// // http://www.speich.net/computer/moztesting/3d.htm
// 
// // Created by Simon Speich
// 
// var Q = new Array();
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:          construct_n  253  254  253     // 
  2:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  3:           assignment  254    6  130     // Q = tmp130 : TYPEOF(tmp130);
// var MTrans = new Array();  // transformation matrix
  4:          construct_n  253  254  253     // 
  4:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  5:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
// 
// var MQube = new Array();  // position information of qube
  6:          construct_n  253  254  253     // 
  6:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  7:           assignment  254    6  130     // MQube = tmp130 : TYPEOF(tmp130);
// 
// var I = new Array();      // entity matrix
  8:          construct_n  253  254  253     // 
  8:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  9:           assignment  254    6  130     // I = tmp130 : TYPEOF(tmp130);
// 
// var Origin = new Object();
 10:          construct_n  253  254  253     // 
 10:          construct_n  130  254    0     // tmp130 = new Object; // REWRITE
 11:           assignment  254    6  130     // Origin = tmp130 : TYPEOF(tmp130);
// var Testing = new Object();
 12:          construct_n  253  254  253     // 
 12:          construct_n  130  254    0     // tmp130 = new Object; // REWRITE
 13:           assignment  254    6  130     // Testing = tmp130 : TYPEOF(tmp130);
// var LoopTimer;
// var validation = {
 14:             obj_decl  253  253  255     // 
//  20: 2889.0000000000045,
 15:           assignment  130    3  254     // tmp130 = 2889.0000000000045: NUMBER;
 16:           assignment  131    3  254     // tmp131 = 20: NUMBER;
 17:                 meta    3  131  130     // 
//  40: 2889.0000000000055,
 18:           assignment  130    3  254     // tmp130 = 2889.0000000000054: NUMBER;
 19:           assignment  131    3  254     // tmp131 = 40: NUMBER;
 20:                 meta    3  131  130     // 
//  80: 2889.000000000005,
 21:           assignment  130    3  254     // tmp130 = 2889.000000000005: NUMBER;
 22:           assignment  131    3  254     // tmp131 = 80: NUMBER;
 23:                 meta    3  131  130     // 
//  160: 2889.0000000000055
 24:           assignment  130    3  254     // tmp130 = 2889.0000000000054: NUMBER;
// };
 25:           assignment  131    3  254     // tmp131 = 160: NUMBER;
 26:                 meta    3  131  130     // 
 14:             obj_decl  130    0    4     //  // REWRITE
 27:           assignment  254    6  130     // validation = tmp130 : TYPEOF(tmp130);
// var DisplArea = new Object();
 28:          construct_n  253  254  253     // 
 28:          construct_n  130  254    0     // tmp130 = new Object; // REWRITE
 29:           assignment  254    6  130     // DisplArea = tmp130 : TYPEOF(tmp130);
// DisplArea.Width = 300;
 30:           assignment  130    5  254     // tmp130 = 'Width': STRING;
 31:          prop_getter  131  254  130     // tmp131 = DisplArea[tmp130];
 31:           assignment  132    3  254     // tmp132 = 300: NUMBER;
 32:          prop_setter  254  130  132     // DisplArea[tmp130] = tmp132;
// DisplArea.Height = 300;
 33:           assignment  130    5  254     // tmp130 = 'Height': STRING;
 34:          prop_getter  131  254  130     // tmp131 = DisplArea[tmp130];
 34:           assignment  132    3  254     // tmp132 = 300: NUMBER;
 35:          prop_setter  254  130  132     // DisplArea[tmp130] = tmp132;
// function DrawLine(From, To) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var x1 = From.V[0];
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    5  254     // tmp130 = 'V': STRING;
  7:          prop_getter  131  254  130     // tmp131 = From[tmp130];
  8:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
  9:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 10:           assignment  254    6  133     // x1 = tmp133 : TYPEOF(tmp133);
//   var x2 = To.V[0];
 11:           assignment  130    5  254     // tmp130 = 'V': STRING;
 12:          prop_getter  131  254  130     // tmp131 = To[tmp130];
 13:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 14:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 15:           assignment  254    6  133     // x2 = tmp133 : TYPEOF(tmp133);
//   var y1 = From.V[1];
 16:           assignment  130    5  254     // tmp130 = 'V': STRING;
 17:          prop_getter  131  254  130     // tmp131 = From[tmp130];
 18:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 19:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 20:           assignment  254    6  133     // y1 = tmp133 : TYPEOF(tmp133);
//   var y2 = To.V[1];
 21:           assignment  130    5  254     // tmp130 = 'V': STRING;
 22:          prop_getter  131  254  130     // tmp131 = To[tmp130];
 23:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 24:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 25:           assignment  254    6  133     // y2 = tmp133 : TYPEOF(tmp133);
//   var dx = Math.abs(x2 - x1);
 26:           assignment  130    5  254     // tmp130 = 'abs': STRING;
 27:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 28:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 29:               call_n  253  131  253     // 
 30:                 meta    1    1  132     // 
 31:           assignment  133    6  254     // tmp133 = x2 : TYPEOF(x2);
 32:         substraction  134  133  254     // tmp134 = tmp133 - x1;
 33:                 meta    2  134  255     // 
 29:               call_n  133  131    1     //  // REWRITE
 34:           assignment  254    6  133     // dx = tmp133 : TYPEOF(tmp133);
//   var dy = Math.abs(y2 - y1);
 35:           assignment  130    5  254     // tmp130 = 'abs': STRING;
 36:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 37:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 38:               call_n  253  131  253     // 
 39:                 meta    1    1  132     // 
 40:           assignment  133    6  254     // tmp133 = y2 : TYPEOF(y2);
 41:         substraction  134  133  254     // tmp134 = tmp133 - y1;
 42:                 meta    2  134  255     // 
 38:               call_n  133  131    1     //  // REWRITE
 43:           assignment  254    6  133     // dy = tmp133 : TYPEOF(tmp133);
//   var x = x1;
 44:           assignment  254    6  254     // x = x1 : TYPEOF(x1);
//   var y = y1;
 45:           assignment  254    6  254     // y = y1 : TYPEOF(y1);
//   var IncX1, IncY1;
//   var IncX2, IncY2;  
//   var Den;
//   var Num;
//   var NumAdd;
//   var NumPix;
//   if (x2 >= x1) {  IncX1 = 1; IncX2 = 1;  }
 46:           assignment  130    6  254     // tmp130 = x2 : TYPEOF(x2);
 47: greater_or_equal_than  131  130  254     // tmp131 = tmp130 >= x1;
 48:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65069;
 49:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 50:           assignment  254    6  130     // IncX1 = tmp130 : TYPEOF(tmp130);
 51:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 52:           assignment  254    6  130     // IncX2 = tmp130 : TYPEOF(tmp130);
//   else { IncX1 = -1; IncX2 = -1; }
 53:             jmp_down  253  253          // goto 65074;
 48:    is_false_jmp_down  131    0    6     // if (tmp131 == false) goto 54; // REWRITE
 54:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 55:          unary_minus  131  130          // tmp131 = -tmp130;
 56:           assignment  254    6  131     // IncX1 = tmp131 : TYPEOF(tmp131);
 57:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 58:          unary_minus  131  130          // tmp131 = -tmp130;
 59:           assignment  254    6  131     // IncX2 = tmp131 : TYPEOF(tmp131);
 53:             jmp_down    0    7          // goto 60; // REWRITE
//   if (y2 >= y1)  {  IncY1 = 1; IncY2 = 1; }
 60:           assignment  130    6  254     // tmp130 = y2 : TYPEOF(y2);
 61: greater_or_equal_than  131  130  254     // tmp131 = tmp130 >= y1;
 62:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65083;
 63:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 64:           assignment  254    6  130     // IncY1 = tmp130 : TYPEOF(tmp130);
 65:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 66:           assignment  254    6  130     // IncY2 = tmp130 : TYPEOF(tmp130);
//   else { IncY1 = -1; IncY2 = -1; }
 67:             jmp_down  253  253          // goto 65088;
 62:    is_false_jmp_down  131    0    6     // if (tmp131 == false) goto 68; // REWRITE
 68:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 69:          unary_minus  131  130          // tmp131 = -tmp130;
 70:           assignment  254    6  131     // IncY1 = tmp131 : TYPEOF(tmp131);
 71:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 72:          unary_minus  131  130          // tmp131 = -tmp130;
 73:           assignment  254    6  131     // IncY2 = tmp131 : TYPEOF(tmp131);
 67:             jmp_down    0    7          // goto 74; // REWRITE
//   if (dx >= dy) {
 74:           assignment  130    6  254     // tmp130 = dx : TYPEOF(dx);
 75: greater_or_equal_than  131  130  254     // tmp131 = tmp130 >= dy;
 76:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65097;
//     IncX1 = 0;
 77:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 78:           assignment  254    6  130     // IncX1 = tmp130 : TYPEOF(tmp130);
//     IncY2 = 0;
 79:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 80:           assignment  254    6  130     // IncY2 = tmp130 : TYPEOF(tmp130);
//     Den = dx;
 81:           assignment  254    6  254     // Den = dx : TYPEOF(dx);
 82:           assignment  130    6  254     // tmp130 = dx : TYPEOF(dx);
//     Num = dx / 2;
 83:           assignment  130    6  254     // tmp130 = dx : TYPEOF(dx);
 84:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 85:             division  132  130  131     // tmp132 = tmp130 / tmp131;
 86:           assignment  254    6  132     // Num = tmp132 : TYPEOF(tmp132);
//     NumAdd = dy;
 87:           assignment  254    6  254     // NumAdd = dy : TYPEOF(dy);
 88:           assignment  130    6  254     // tmp130 = dy : TYPEOF(dy);
//     NumPix = dx;
 89:           assignment  254    6  254     // NumPix = dx : TYPEOF(dx);
 90:           assignment  130    6  254     // tmp130 = dx : TYPEOF(dx);
//   }
//   else {
 91:             jmp_down  253  253          // goto 65112;
 76:    is_false_jmp_down  131    0   16     // if (tmp131 == false) goto 92; // REWRITE
//     IncX2 = 0;
 92:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 93:           assignment  254    6  130     // IncX2 = tmp130 : TYPEOF(tmp130);
//     IncY1 = 0;
 94:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 95:           assignment  254    6  130     // IncY1 = tmp130 : TYPEOF(tmp130);
//     Den = dy;
 96:           assignment  254    6  254     // Den = dy : TYPEOF(dy);
 97:           assignment  130    6  254     // tmp130 = dy : TYPEOF(dy);
//     Num = dy / 2;
 98:           assignment  130    6  254     // tmp130 = dy : TYPEOF(dy);
 99:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
100:             division  132  130  131     // tmp132 = tmp130 / tmp131;
101:           assignment  254    6  132     // Num = tmp132 : TYPEOF(tmp132);
//     NumAdd = dx;
102:           assignment  254    6  254     // NumAdd = dx : TYPEOF(dx);
103:           assignment  130    6  254     // tmp130 = dx : TYPEOF(dx);
//     NumPix = dy;
104:           assignment  254    6  254     // NumPix = dy : TYPEOF(dy);
105:           assignment  130    6  254     // tmp130 = dy : TYPEOF(dy);
//   }
 91:             jmp_down    0   15          // goto 106; // REWRITE
//   NumPix = Math.round(Q.LastPx + NumPix);
106:           assignment  130    5  254     // tmp130 = 'round': STRING;
107:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
108:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
109:               call_n  253  131  253     // 
110:                 meta    1    1  132     // 
111:           assignment  133    5  254     // tmp133 = 'LastPx': STRING;
112:          prop_getter  134  254  133     // tmp134 = Q[tmp133];
113:             addition  135  134  254     // tmp135 = tmp134 + NumPix;
114:                 meta    2  135  255     // 
109:               call_n  133  131    1     //  // REWRITE
115:           assignment  254    6  133     // NumPix = tmp133 : TYPEOF(tmp133);
//   var i = Q.LastPx;
116:           assignment  130    5  254     // tmp130 = 'LastPx': STRING;
117:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
118:           assignment  254    6  131     // i = tmp131 : TYPEOF(tmp131);
//   for (; i < NumPix; i++) {
119:             jmp_down  253  253          // goto 65140;
//     Num += NumAdd;
120:             addition  254  254  254     // Num = Num + NumAdd;
121:           assignment  130    6  254     // tmp130 = Num : TYPEOF(Num);
//     if (Num >= Den) {
122:           assignment  130    6  254     // tmp130 = Num : TYPEOF(Num);
123: greater_or_equal_than  131  130  254     // tmp131 = tmp130 >= Den;
124:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65145;
//       Num -= Den;
125:         substraction  254  254  254     // Num = Num - Den;
126:           assignment  130    6  254     // tmp130 = Num : TYPEOF(Num);
//       x += IncX1;
127:             addition  254  254  254     // x = x + IncX1;
128:           assignment  130    6  254     // tmp130 = x : TYPEOF(x);
//       y += IncY1;
129:             addition  254  254  254     // y = y + IncY1;
130:           assignment  130    6  254     // tmp130 = y : TYPEOF(y);
//     }
//     x += IncX2;
124:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 131; // REWRITE
131:             addition  254  254  254     // x = x + IncX2;
132:           assignment  130    6  254     // tmp130 = x : TYPEOF(x);
//     y += IncY2;
133:             addition  254  254  254     // y = y + IncY2;
134:           assignment  130    6  254     // tmp130 = y : TYPEOF(y);
//   }
135:            post_incr  131  254          // tmp131 = i++;
119:             jmp_down    0   17          // goto 136; // REWRITE
136:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
137:            less_than  133  132  254     // tmp133 = tmp132 < NumPix;
138:       is_true_jmp_up  133    0   18     // if (tmp133) goto 120;
//   Q.LastPx = NumPix;
139:           assignment  130    5  254     // tmp130 = 'LastPx': STRING;
140:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
140:          prop_setter  254  130  254     // Q[tmp130] = NumPix;
141:           assignment  132    6  254     // tmp132 = NumPix : TYPEOF(NumPix);
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  152   17     // var tmp128 .. tmp152; // REWRITE
142:                  ret                    // ret;
  3:                 meta    7    0  140     // function end: 143; // REWRITE
// function CalcCross(V0, V1) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var Cross = new Array();
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:          construct_n  253  254  253     // 
  6:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  7:           assignment  254    6  130     // Cross = tmp130 : TYPEOF(tmp130);
//   Cross[0] = V0[1]*V1[2] - V0[2]*V1[1];
  8:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  9:          prop_getter  131  254  130     // tmp131 = Cross[tmp130];
  9:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 10:          prop_getter  133  254  132     // tmp133 = V0[tmp132];
 11:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 12:          prop_getter  135  254  134     // tmp135 = V1[tmp134];
 13:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 14:           assignment  137    1    2     // tmp137 = 2: SMALLINT;
 15:          prop_getter  138  254  137     // tmp138 = V0[tmp137];
 16:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 17:          prop_getter  140  254  139     // tmp140 = V1[tmp139];
 18:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
 19:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
 20:          prop_setter  254  130  142     // Cross[tmp130] = tmp142;
//   Cross[1] = V0[2]*V1[0] - V0[0]*V1[2];
 21:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 22:          prop_getter  131  254  130     // tmp131 = Cross[tmp130];
 22:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 23:          prop_getter  133  254  132     // tmp133 = V0[tmp132];
 24:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 25:          prop_getter  135  254  134     // tmp135 = V1[tmp134];
 26:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 27:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
 28:          prop_getter  138  254  137     // tmp138 = V0[tmp137];
 29:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
 30:          prop_getter  140  254  139     // tmp140 = V1[tmp139];
 31:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
 32:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
 33:          prop_setter  254  130  142     // Cross[tmp130] = tmp142;
//   Cross[2] = V0[0]*V1[1] - V0[1]*V1[0];
 34:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 35:          prop_getter  131  254  130     // tmp131 = Cross[tmp130];
 35:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 36:          prop_getter  133  254  132     // tmp133 = V0[tmp132];
 37:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 38:          prop_getter  135  254  134     // tmp135 = V1[tmp134];
 39:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 40:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
 41:          prop_getter  138  254  137     // tmp138 = V0[tmp137];
 42:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 43:          prop_getter  140  254  139     // tmp140 = V1[tmp139];
 44:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
 45:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
 46:          prop_setter  254  130  142     // Cross[tmp130] = tmp142;
//   return Cross;
 47:               retval  254               // return Cross;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  143    1     // var tmp128 .. tmp143; // REWRITE
 48:                  ret                    // ret;
  3:                 meta    7    0   46     // function end: 49; // REWRITE
// function CalcNormal(V0, V1, V2) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
//   var A = new Array();   var B = new Array(); 
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:          construct_n  253  254  253     // 
  7:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  8:           assignment  254    6  130     // A = tmp130 : TYPEOF(tmp130);
  9:          construct_n  253  254  253     // 
  9:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
 10:           assignment  254    6  130     // B = tmp130 : TYPEOF(tmp130);
//   for (var i = 0; i < 3; i++) {
 11:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 12:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 13:             jmp_down  253  253          // goto 65034;
//     A[i] = V0[i] - V1[i];
 14:          prop_getter  130  254  254     // tmp130 = A[i];
 14:          prop_getter  131  254  254     // tmp131 = V0[i];
 15:          prop_getter  132  254  254     // tmp132 = V1[i];
 16:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
 17:          prop_setter  254  254  133     // A[i] = tmp133;
//     B[i] = V2[i] - V1[i];
 18:          prop_getter  130  254  254     // tmp130 = B[i];
 18:          prop_getter  131  254  254     // tmp131 = V2[i];
 19:          prop_getter  132  254  254     // tmp132 = V1[i];
 20:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
 21:          prop_setter  254  254  133     // B[i] = tmp133;
//   }
 22:            post_incr  134  254          // tmp134 = i++;
 13:             jmp_down    0   10          // goto 23; // REWRITE
 23:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
 24:           assignment  136    1    3     // tmp136 = 3: SMALLINT;
 25:            less_than  137  135  136     // tmp137 = tmp135 < tmp136;
 26:       is_true_jmp_up  137    0   12     // if (tmp137) goto 14;
//   A = CalcCross(A, B);
 27:               call_n  253  254  253     // 
 28:                 meta    2  254  255     // 
 29:                 meta    2  254  255     // 
 27:               call_n  130  254    2     //  // REWRITE
 30:           assignment  254    6  130     // A = tmp130 : TYPEOF(tmp130);
//   var Length = Math.sqrt(A[0]*A[0] + A[1]*A[1] + A[2]*A[2]); 
 31:           assignment  130    5  254     // tmp130 = 'sqrt': STRING;
 32:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 33:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 34:               call_n  253  131  253     // 
 35:                 meta    1    1  132     // 
 36:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 37:          prop_getter  134  254  133     // tmp134 = A[tmp133];
 38:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 39:          prop_getter  136  254  135     // tmp136 = A[tmp135];
 40:       multiplication  137  134  136     // tmp137 = tmp134 * tmp136;
 41:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
 42:          prop_getter  139  254  138     // tmp139 = A[tmp138];
 43:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 44:          prop_getter  141  254  140     // tmp141 = A[tmp140];
 45:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
 46:             addition  143  137  142     // tmp143 = tmp137 + tmp142;
 47:           assignment  144    1    2     // tmp144 = 2: SMALLINT;
 48:          prop_getter  145  254  144     // tmp145 = A[tmp144];
 49:           assignment  146    1    2     // tmp146 = 2: SMALLINT;
 50:          prop_getter  147  254  146     // tmp147 = A[tmp146];
 51:       multiplication  148  145  147     // tmp148 = tmp145 * tmp147;
 52:             addition  149  143  148     // tmp149 = tmp143 + tmp148;
 53:                 meta    2  149  255     // 
 34:               call_n  133  131    1     //  // REWRITE
 54:           assignment  254    6  133     // Length = tmp133 : TYPEOF(tmp133);
//   for (var i = 0; i < 3; i++) A[i] = A[i] / Length;
 55:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 56:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 57:             jmp_down  253  253          // goto 65078;
 58:          prop_getter  130  254  254     // tmp130 = A[i];
 58:          prop_getter  131  254  254     // tmp131 = A[i];
 59:             division  132  131  254     // tmp132 = tmp131 / Length;
 60:          prop_setter  254  254  132     // A[i] = tmp132;
 61:            post_incr  133  254          // tmp133 = i++;
 57:             jmp_down    0    5          // goto 62; // REWRITE
 62:           assignment  134    6  254     // tmp134 = i : TYPEOF(i);
 63:           assignment  135    1    3     // tmp135 = 3: SMALLINT;
 64:            less_than  136  134  135     // tmp136 = tmp134 < tmp135;
 65:       is_true_jmp_up  136    0    7     // if (tmp136) goto 58;
//   A[3] = 1;
 66:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 67:          prop_getter  131  254  130     // tmp131 = A[tmp130];
 67:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 68:          prop_setter  254  130  132     // A[tmp130] = tmp132;
//   return A;
 69:               retval  254               // return A;
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  153    4     // var tmp128 .. tmp153; // REWRITE
 70:                  ret                    // ret;
  4:                 meta    7    0   67     // function end: 71; // REWRITE
// function CreateP(X,Y,Z) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
//   this.V = [X,Y,Z,1];
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:         this_binding  130               // tmp130 = this;
  8:           assignment  131    5  254     // tmp131 = 'V': STRING;
  9:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  9:           array_decl  253  253  255     // 
 10:                 meta    2  254  255     // 
 11:                 meta    2  254  255     // 
 12:                 meta    2  254  255     // 
 13:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 14:                 meta    2  133  255     // 
  9:           array_decl  133    0    4     //  // REWRITE
 15:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 16:                  ret                    // ret;
  4:                 meta    7    0   13     // function end: 17; // REWRITE
// // multiplies two matrices
// 
// function MMulti(M1, M2) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var M = [[],[],[],[]];
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           array_decl  253  253  255     // 
  7:           array_decl  253  253  255     // 
  7:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  8:                 meta    2  130  255     // 
  9:           array_decl  253  253  255     // 
  9:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 10:                 meta    2  130  255     // 
 11:           array_decl  253  253  255     // 
 11:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 12:                 meta    2  130  255     // 
 13:           array_decl  253  253  255     // 
 13:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 14:                 meta    2  130  255     // 
  6:           array_decl  130    0    4     //  // REWRITE
 15:           assignment  254    6  130     // M = tmp130 : TYPEOF(tmp130);
//   var i = 0;
 16:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 17:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   var j = 0;
 18:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 19:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
//   for (; i < 4; i++) {
 20:             jmp_down  253  253          // goto 65041;
//     j = 0;
 21:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 22:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
//     for (; j < 4; j++) M[i][j] = M1[i][0] * M2[0][j] + M1[i][1] * M2[1][j] + M1[i][2] * M2[2][j] + M1[i][3] * M2[3][j];
 23:             jmp_down  253  253          // goto 65044;
 24:          prop_getter  130  254  254     // tmp130 = M[i];
 25:          prop_getter  131  130  254     // tmp131 = tmp130[j];
 25:          prop_getter  132  254  254     // tmp132 = M1[i];
 26:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 27:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 28:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 29:          prop_getter  136  254  135     // tmp136 = M2[tmp135];
 30:          prop_getter  137  136  254     // tmp137 = tmp136[j];
 31:       multiplication  138  134  137     // tmp138 = tmp134 * tmp137;
 32:          prop_getter  139  254  254     // tmp139 = M1[i];
 33:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 34:          prop_getter  141  139  140     // tmp141 = tmp139[tmp140];
 35:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
 36:          prop_getter  143  254  142     // tmp143 = M2[tmp142];
 37:          prop_getter  144  143  254     // tmp144 = tmp143[j];
 38:       multiplication  145  141  144     // tmp145 = tmp141 * tmp144;
 39:             addition  146  138  145     // tmp146 = tmp138 + tmp145;
 40:          prop_getter  147  254  254     // tmp147 = M1[i];
 41:           assignment  148    1    2     // tmp148 = 2: SMALLINT;
 42:          prop_getter  149  147  148     // tmp149 = tmp147[tmp148];
 43:           assignment  150    1    2     // tmp150 = 2: SMALLINT;
 44:          prop_getter  151  254  150     // tmp151 = M2[tmp150];
 45:          prop_getter  152  151  254     // tmp152 = tmp151[j];
 46:       multiplication  153  149  152     // tmp153 = tmp149 * tmp152;
 47:             addition  154  146  153     // tmp154 = tmp146 + tmp153;
 48:          prop_getter  155  254  254     // tmp155 = M1[i];
 49:           assignment  156    1    3     // tmp156 = 3: SMALLINT;
 50:          prop_getter  157  155  156     // tmp157 = tmp155[tmp156];
 51:           assignment  158    1    3     // tmp158 = 3: SMALLINT;
 52:          prop_getter  159  254  158     // tmp159 = M2[tmp158];
 53:          prop_getter  160  159  254     // tmp160 = tmp159[j];
 54:       multiplication  161  157  160     // tmp161 = tmp157 * tmp160;
 55:             addition  162  154  161     // tmp162 = tmp154 + tmp161;
 56:          prop_setter  130  254  162     // tmp130[j] = tmp162;
 57:            post_incr  163  254          // tmp163 = j++;
 23:             jmp_down    0   35          // goto 58; // REWRITE
 58:           assignment  164    6  254     // tmp164 = j : TYPEOF(j);
 59:           assignment  165    1    4     // tmp165 = 4: SMALLINT;
 60:            less_than  166  164  165     // tmp166 = tmp164 < tmp165;
 61:       is_true_jmp_up  166    0   37     // if (tmp166) goto 24;
//   }
 62:            post_incr  167  254          // tmp167 = i++;
 20:             jmp_down    0   43          // goto 63; // REWRITE
 63:           assignment  168    6  254     // tmp168 = i : TYPEOF(i);
 64:           assignment  169    1    4     // tmp169 = 4: SMALLINT;
 65:            less_than  170  168  169     // tmp170 = tmp168 < tmp169;
 66:       is_true_jmp_up  170    0   45     // if (tmp170) goto 21;
//   return M;
 67:               retval  254               // return M;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  173    3     // var tmp128 .. tmp173; // REWRITE
 68:                  ret                    // ret;
  3:                 meta    7    0   66     // function end: 69; // REWRITE
// //multiplies matrix with vector
// 
// function VMulti(M, V) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var Vect = new Array();
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:          construct_n  253  254  253     // 
  6:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  7:           assignment  254    6  130     // Vect = tmp130 : TYPEOF(tmp130);
//   var i = 0;
  8:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  9:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   for (;i < 4; i++) Vect[i] = M[i][0] * V[0] + M[i][1] * V[1] + M[i][2] * V[2] + M[i][3] * V[3];
 10:             jmp_down  253  253          // goto 65031;
 11:          prop_getter  130  254  254     // tmp130 = Vect[i];
 11:          prop_getter  131  254  254     // tmp131 = M[i];
 12:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 13:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 14:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 15:          prop_getter  135  254  134     // tmp135 = V[tmp134];
 16:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 17:          prop_getter  137  254  254     // tmp137 = M[i];
 18:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
 19:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
 20:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 21:          prop_getter  141  254  140     // tmp141 = V[tmp140];
 22:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
 23:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
 24:          prop_getter  144  254  254     // tmp144 = M[i];
 25:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
 26:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
 27:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
 28:          prop_getter  148  254  147     // tmp148 = V[tmp147];
 29:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
 30:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
 31:          prop_getter  151  254  254     // tmp151 = M[i];
 32:           assignment  152    1    3     // tmp152 = 3: SMALLINT;
 33:          prop_getter  153  151  152     // tmp153 = tmp151[tmp152];
 34:           assignment  154    1    3     // tmp154 = 3: SMALLINT;
 35:          prop_getter  155  254  154     // tmp155 = V[tmp154];
 36:       multiplication  156  153  155     // tmp156 = tmp153 * tmp155;
 37:             addition  157  150  156     // tmp157 = tmp150 + tmp156;
 38:          prop_setter  254  254  157     // Vect[i] = tmp157;
 39:            post_incr  158  254          // tmp158 = i++;
 10:             jmp_down    0   30          // goto 40; // REWRITE
 40:           assignment  159    6  254     // tmp159 = i : TYPEOF(i);
 41:           assignment  160    1    4     // tmp160 = 4: SMALLINT;
 42:            less_than  161  159  160     // tmp161 = tmp159 < tmp160;
 43:       is_true_jmp_up  161    0   32     // if (tmp161) goto 11;
//   return Vect;
 44:               retval  254               // return Vect;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  163    2     // var tmp128 .. tmp163; // REWRITE
 45:                  ret                    // ret;
  3:                 meta    7    0   43     // function end: 46; // REWRITE
// function VMulti2(M, V) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var Vect = new Array();
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:          construct_n  253  254  253     // 
  6:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  7:           assignment  254    6  130     // Vect = tmp130 : TYPEOF(tmp130);
//   var i = 0;
  8:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  9:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   for (;i < 3; i++) Vect[i] = M[i][0] * V[0] + M[i][1] * V[1] + M[i][2] * V[2];
 10:             jmp_down  253  253          // goto 65031;
 11:          prop_getter  130  254  254     // tmp130 = Vect[i];
 11:          prop_getter  131  254  254     // tmp131 = M[i];
 12:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 13:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 14:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 15:          prop_getter  135  254  134     // tmp135 = V[tmp134];
 16:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 17:          prop_getter  137  254  254     // tmp137 = M[i];
 18:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
 19:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
 20:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 21:          prop_getter  141  254  140     // tmp141 = V[tmp140];
 22:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
 23:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
 24:          prop_getter  144  254  254     // tmp144 = M[i];
 25:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
 26:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
 27:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
 28:          prop_getter  148  254  147     // tmp148 = V[tmp147];
 29:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
 30:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
 31:          prop_setter  254  254  150     // Vect[i] = tmp150;
 32:            post_incr  151  254          // tmp151 = i++;
 10:             jmp_down    0   23          // goto 33; // REWRITE
 33:           assignment  152    6  254     // tmp152 = i : TYPEOF(i);
 34:           assignment  153    1    3     // tmp153 = 3: SMALLINT;
 35:            less_than  154  152  153     // tmp154 = tmp152 < tmp153;
 36:       is_true_jmp_up  154    0   25     // if (tmp154) goto 11;
//   return Vect;
 37:               retval  254               // return Vect;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  156    2     // var tmp128 .. tmp156; // REWRITE
 38:                  ret                    // ret;
  3:                 meta    7    0   36     // function end: 39; // REWRITE
// // add to matrices
// 
// function MAdd(M1, M2) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var M = [[],[],[],[]];
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           array_decl  253  253  255     // 
  7:           array_decl  253  253  255     // 
  7:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  8:                 meta    2  130  255     // 
  9:           array_decl  253  253  255     // 
  9:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 10:                 meta    2  130  255     // 
 11:           array_decl  253  253  255     // 
 11:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 12:                 meta    2  130  255     // 
 13:           array_decl  253  253  255     // 
 13:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 14:                 meta    2  130  255     // 
  6:           array_decl  130    0    4     //  // REWRITE
 15:           assignment  254    6  130     // M = tmp130 : TYPEOF(tmp130);
//   var i = 0;
 16:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 17:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   var j = 0;
 18:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 19:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
//   for (; i < 4; i++) {
 20:             jmp_down  253  253          // goto 65041;
//     j = 0;
 21:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 22:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
//     for (; j < 4; j++) M[i][j] = M1[i][j] + M2[i][j];
 23:             jmp_down  253  253          // goto 65044;
 24:          prop_getter  130  254  254     // tmp130 = M[i];
 25:          prop_getter  131  130  254     // tmp131 = tmp130[j];
 25:          prop_getter  132  254  254     // tmp132 = M1[i];
 26:          prop_getter  133  132  254     // tmp133 = tmp132[j];
 27:          prop_getter  134  254  254     // tmp134 = M2[i];
 28:          prop_getter  135  134  254     // tmp135 = tmp134[j];
 29:             addition  136  133  135     // tmp136 = tmp133 + tmp135;
 30:          prop_setter  130  254  136     // tmp130[j] = tmp136;
 31:            post_incr  137  254          // tmp137 = j++;
 23:             jmp_down    0    9          // goto 32; // REWRITE
 32:           assignment  138    6  254     // tmp138 = j : TYPEOF(j);
 33:           assignment  139    1    4     // tmp139 = 4: SMALLINT;
 34:            less_than  140  138  139     // tmp140 = tmp138 < tmp139;
 35:       is_true_jmp_up  140    0   11     // if (tmp140) goto 24;
//   }
 36:            post_incr  141  254          // tmp141 = i++;
 20:             jmp_down    0   17          // goto 37; // REWRITE
 37:           assignment  142    6  254     // tmp142 = i : TYPEOF(i);
 38:           assignment  143    1    4     // tmp143 = 4: SMALLINT;
 39:            less_than  144  142  143     // tmp144 = tmp142 < tmp143;
 40:       is_true_jmp_up  144    0   19     // if (tmp144) goto 21;
//   return M;
 41:               retval  254               // return M;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  147    3     // var tmp128 .. tmp147; // REWRITE
 42:                  ret                    // ret;
  3:                 meta    7    0   40     // function end: 43; // REWRITE
// function Translate(M, Dx, Dy, Dz) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  4:                 meta    2  254  255     // 
  0:          func_decl_n  254    4          //  // REWRITE
  5:                 meta    7  253  253     // function end: 65026;
//   var T = [
  6:                 meta   12  253  255     // [to be rewritten]
  7:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  8:           array_decl  253  253  255     // 
//   [1,0,0,Dx],
  9:           array_decl  253  253  255     // 
 10:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 11:                 meta    2  130  255     // 
 12:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 13:                 meta    2  130  255     // 
 14:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 15:                 meta    2  130  255     // 
 16:                 meta    2  254  255     // 
  9:           array_decl  130    0    4     //  // REWRITE
 17:                 meta    2  130  255     // 
//   [0,1,0,Dy],
 18:           array_decl  253  253  255     // 
 19:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 20:                 meta    2  130  255     // 
 21:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 22:                 meta    2  130  255     // 
 23:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 24:                 meta    2  130  255     // 
 25:                 meta    2  254  255     // 
 18:           array_decl  130    0    4     //  // REWRITE
 26:                 meta    2  130  255     // 
//   [0,0,1,Dz],
 27:           array_decl  253  253  255     // 
 28:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 29:                 meta    2  130  255     // 
 30:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 31:                 meta    2  130  255     // 
 32:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 33:                 meta    2  130  255     // 
 34:                 meta    2  254  255     // 
 27:           array_decl  130    0    4     //  // REWRITE
 35:                 meta    2  130  255     // 
//   [0,0,0,1]
 36:           array_decl  253  253  255     // 
 37:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 38:                 meta    2  130  255     // 
 39:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 40:                 meta    2  130  255     // 
 41:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 42:                 meta    2  130  255     // 
 43:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 44:                 meta    2  130  255     // 
 36:           array_decl  130    0    4     //  // REWRITE
//   ];
 45:                 meta    2  130  255     // 
  8:           array_decl  130    0    4     //  // REWRITE
 46:           assignment  254    6  130     // T = tmp130 : TYPEOF(tmp130);
//   return MMulti(T, M);
 47:               call_n  253  254  253     // 
 48:                 meta    2  254  255     // 
 49:                 meta    2  254  255     // 
 47:               call_n  130  254    2     //  // REWRITE
 50:               retval  130               // return tmp130;
// }
  6:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  7:         reg_var_decl  128  131    1     // var tmp128 .. tmp131; // REWRITE
 51:                  ret                    // ret;
  5:                 meta    7    0   47     // function end: 52; // REWRITE
// function RotateX(M, Phi) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var a = Phi;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  254    6  254     // a = Phi : TYPEOF(Phi);
//   a *= Math.PI / 180;
  7:           assignment  130    5  254     // tmp130 = 'PI': STRING;
  8:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  9:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
 10:             division  133  131  132     // tmp133 = tmp131 / tmp132;
 11:       multiplication  254  254  133     // a = a * tmp133;
 12:           assignment  134    6  254     // tmp134 = a : TYPEOF(a);
//   var Cos = Math.cos(a);
 13:           assignment  130    5  254     // tmp130 = 'cos': STRING;
 14:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 15:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 16:               call_n  253  131  253     // 
 17:                 meta    1    1  132     // 
 18:                 meta    2  254  255     // 
 16:               call_n  133  131    1     //  // REWRITE
 19:           assignment  254    6  133     // Cos = tmp133 : TYPEOF(tmp133);
//   var Sin = Math.sin(a);
 20:           assignment  130    5  254     // tmp130 = 'sin': STRING;
 21:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 22:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 23:               call_n  253  131  253     // 
 24:                 meta    1    1  132     // 
 25:                 meta    2  254  255     // 
 23:               call_n  133  131    1     //  // REWRITE
 26:           assignment  254    6  133     // Sin = tmp133 : TYPEOF(tmp133);
//   var R = [
 27:           array_decl  253  253  255     // 
//   [1,0,0,0],
 28:           array_decl  253  253  255     // 
 29:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 30:                 meta    2  130  255     // 
 31:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 32:                 meta    2  130  255     // 
 33:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 34:                 meta    2  130  255     // 
 35:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 36:                 meta    2  130  255     // 
 28:           array_decl  130    0    4     //  // REWRITE
 37:                 meta    2  130  255     // 
//   [0,Cos,-Sin,0],
 38:           array_decl  253  253  255     // 
 39:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 40:                 meta    2  130  255     // 
 41:                 meta    2  254  255     // 
 42:          unary_minus  130  254          // tmp130 = -Sin;
 43:                 meta    2  130  255     // 
 44:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 45:                 meta    2  130  255     // 
 38:           array_decl  130    0    4     //  // REWRITE
 46:                 meta    2  130  255     // 
//   [0,Sin,Cos,0],
 47:           array_decl  253  253  255     // 
 48:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 49:                 meta    2  130  255     // 
 50:                 meta    2  254  255     // 
 51:                 meta    2  254  255     // 
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:                 meta    2  130  255     // 
 47:           array_decl  130    0    4     //  // REWRITE
 54:                 meta    2  130  255     // 
//   [0,0,0,1]
 55:           array_decl  253  253  255     // 
 56:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 57:                 meta    2  130  255     // 
 58:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 59:                 meta    2  130  255     // 
 60:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 61:                 meta    2  130  255     // 
 62:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 63:                 meta    2  130  255     // 
 55:           array_decl  130    0    4     //  // REWRITE
//   ];
 64:                 meta    2  130  255     // 
 27:           array_decl  130    0    4     //  // REWRITE
 65:           assignment  254    6  130     // R = tmp130 : TYPEOF(tmp130);
//   return MMulti(R, M);
 66:               call_n  253  254  253     // 
 67:                 meta    2  254  255     // 
 68:                 meta    2  254  255     // 
 66:               call_n  130  254    2     //  // REWRITE
 69:               retval  130               // return tmp130;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  138    4     // var tmp128 .. tmp138; // REWRITE
 70:                  ret                    // ret;
  3:                 meta    7    0   68     // function end: 71; // REWRITE
// function RotateY(M, Phi) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var a = Phi;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  254    6  254     // a = Phi : TYPEOF(Phi);
//   a *= Math.PI / 180;
  7:           assignment  130    5  254     // tmp130 = 'PI': STRING;
  8:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  9:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
 10:             division  133  131  132     // tmp133 = tmp131 / tmp132;
 11:       multiplication  254  254  133     // a = a * tmp133;
 12:           assignment  134    6  254     // tmp134 = a : TYPEOF(a);
//   var Cos = Math.cos(a);
 13:           assignment  130    5  254     // tmp130 = 'cos': STRING;
 14:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 15:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 16:               call_n  253  131  253     // 
 17:                 meta    1    1  132     // 
 18:                 meta    2  254  255     // 
 16:               call_n  133  131    1     //  // REWRITE
 19:           assignment  254    6  133     // Cos = tmp133 : TYPEOF(tmp133);
//   var Sin = Math.sin(a);
 20:           assignment  130    5  254     // tmp130 = 'sin': STRING;
 21:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 22:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 23:               call_n  253  131  253     // 
 24:                 meta    1    1  132     // 
 25:                 meta    2  254  255     // 
 23:               call_n  133  131    1     //  // REWRITE
 26:           assignment  254    6  133     // Sin = tmp133 : TYPEOF(tmp133);
//   var R = [
 27:           array_decl  253  253  255     // 
//   [Cos,0,Sin,0],
 28:           array_decl  253  253  255     // 
 29:                 meta    2  254  255     // 
 30:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 31:                 meta    2  130  255     // 
 32:                 meta    2  254  255     // 
 33:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 34:                 meta    2  130  255     // 
 28:           array_decl  130    0    4     //  // REWRITE
 35:                 meta    2  130  255     // 
//   [0,1,0,0],
 36:           array_decl  253  253  255     // 
 37:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 38:                 meta    2  130  255     // 
 39:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 40:                 meta    2  130  255     // 
 41:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 42:                 meta    2  130  255     // 
 43:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 44:                 meta    2  130  255     // 
 36:           array_decl  130    0    4     //  // REWRITE
 45:                 meta    2  130  255     // 
//   [-Sin,0,Cos,0],
 46:           array_decl  253  253  255     // 
 47:          unary_minus  130  254          // tmp130 = -Sin;
 48:                 meta    2  130  255     // 
 49:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 50:                 meta    2  130  255     // 
 51:                 meta    2  254  255     // 
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:                 meta    2  130  255     // 
 46:           array_decl  130    0    4     //  // REWRITE
 54:                 meta    2  130  255     // 
//   [0,0,0,1]
 55:           array_decl  253  253  255     // 
 56:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 57:                 meta    2  130  255     // 
 58:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 59:                 meta    2  130  255     // 
 60:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 61:                 meta    2  130  255     // 
 62:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 63:                 meta    2  130  255     // 
 55:           array_decl  130    0    4     //  // REWRITE
//   ];
 64:                 meta    2  130  255     // 
 27:           array_decl  130    0    4     //  // REWRITE
 65:           assignment  254    6  130     // R = tmp130 : TYPEOF(tmp130);
//   return MMulti(R, M);
 66:               call_n  253  254  253     // 
 67:                 meta    2  254  255     // 
 68:                 meta    2  254  255     // 
 66:               call_n  130  254    2     //  // REWRITE
 69:               retval  130               // return tmp130;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  138    4     // var tmp128 .. tmp138; // REWRITE
 70:                  ret                    // ret;
  3:                 meta    7    0   68     // function end: 71; // REWRITE
// function RotateZ(M, Phi) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var a = Phi;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  254    6  254     // a = Phi : TYPEOF(Phi);
//   a *= Math.PI / 180;
  7:           assignment  130    5  254     // tmp130 = 'PI': STRING;
  8:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  9:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
 10:             division  133  131  132     // tmp133 = tmp131 / tmp132;
 11:       multiplication  254  254  133     // a = a * tmp133;
 12:           assignment  134    6  254     // tmp134 = a : TYPEOF(a);
//   var Cos = Math.cos(a);
 13:           assignment  130    5  254     // tmp130 = 'cos': STRING;
 14:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 15:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 16:               call_n  253  131  253     // 
 17:                 meta    1    1  132     // 
 18:                 meta    2  254  255     // 
 16:               call_n  133  131    1     //  // REWRITE
 19:           assignment  254    6  133     // Cos = tmp133 : TYPEOF(tmp133);
//   var Sin = Math.sin(a);
 20:           assignment  130    5  254     // tmp130 = 'sin': STRING;
 21:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 22:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 23:               call_n  253  131  253     // 
 24:                 meta    1    1  132     // 
 25:                 meta    2  254  255     // 
 23:               call_n  133  131    1     //  // REWRITE
 26:           assignment  254    6  133     // Sin = tmp133 : TYPEOF(tmp133);
//   var R = [
 27:           array_decl  253  253  255     // 
//   [Cos,-Sin,0,0],
 28:           array_decl  253  253  255     // 
 29:                 meta    2  254  255     // 
 30:          unary_minus  130  254          // tmp130 = -Sin;
 31:                 meta    2  130  255     // 
 32:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 33:                 meta    2  130  255     // 
 34:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 35:                 meta    2  130  255     // 
 28:           array_decl  130    0    4     //  // REWRITE
 36:                 meta    2  130  255     // 
//   [Sin,Cos,0,0],
 37:           array_decl  253  253  255     // 
 38:                 meta    2  254  255     // 
 39:                 meta    2  254  255     // 
 40:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 41:                 meta    2  130  255     // 
 42:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 43:                 meta    2  130  255     // 
 37:           array_decl  130    0    4     //  // REWRITE
 44:                 meta    2  130  255     // 
//   [0,0,1,0],   
 45:           array_decl  253  253  255     // 
 46:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 47:                 meta    2  130  255     // 
 48:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 49:                 meta    2  130  255     // 
 50:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 51:                 meta    2  130  255     // 
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:                 meta    2  130  255     // 
 45:           array_decl  130    0    4     //  // REWRITE
 54:                 meta    2  130  255     // 
//   [0,0,0,1]
 55:           array_decl  253  253  255     // 
 56:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 57:                 meta    2  130  255     // 
 58:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 59:                 meta    2  130  255     // 
 60:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 61:                 meta    2  130  255     // 
 62:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 63:                 meta    2  130  255     // 
 55:           array_decl  130    0    4     //  // REWRITE
//   ];
 64:                 meta    2  130  255     // 
 27:           array_decl  130    0    4     //  // REWRITE
 65:           assignment  254    6  130     // R = tmp130 : TYPEOF(tmp130);
//   return MMulti(R, M);
 66:               call_n  253  254  253     // 
 67:                 meta    2  254  255     // 
 68:                 meta    2  254  255     // 
 66:               call_n  130  254    2     //  // REWRITE
 69:               retval  130               // return tmp130;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  138    4     // var tmp128 .. tmp138; // REWRITE
 70:                  ret                    // ret;
  3:                 meta    7    0   68     // function end: 71; // REWRITE
// function DrawQube() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function DrawQube (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//   // calc current normals
// 
//   var CurN = new Array();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  4:          construct_n  130  254    0     // tmp130 = new Array; // REWRITE
  5:           assignment  254    6  130     // CurN = tmp130 : TYPEOF(tmp130);
//   var i = 5;
  6:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
  7:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   Q.LastPx = 0;
  8:           assignment  130    5  254     // tmp130 = 'LastPx': STRING;
  9:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
  9:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 10:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   for (; i > -1; i--) CurN[i] = VMulti2(MQube, Q.Normal[i]);
 11:             jmp_down  253  253          // goto 65032;
 12:          prop_getter  130  254  254     // tmp130 = CurN[i];
 12:               call_n  253  254  253     // 
 13:                 meta    2  254  255     // 
 14:           assignment  131    5  254     // tmp131 = 'Normal': STRING;
 15:          prop_getter  132  254  131     // tmp132 = Q[tmp131];
 16:          prop_getter  133  132  254     // tmp133 = tmp132[i];
 17:                 meta    2  133  255     // 
 12:               call_n  131  254    2     //  // REWRITE
 18:          prop_setter  254  254  131     // CurN[i] = tmp131;
 19:            post_decr  132  254          // tmp132 = i--;
 11:             jmp_down    0    9          // goto 20; // REWRITE
 20:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 21:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 22:          unary_minus  135  134          // tmp135 = -tmp134;
 23:         greater_than  136  133  135     // tmp136 = tmp133 > tmp135;
 24:       is_true_jmp_up  136    0   12     // if (tmp136) goto 12;
//   if (CurN[0][2] < 0) {
 25:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 26:          prop_getter  131  254  130     // tmp131 = CurN[tmp130];
 27:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 28:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 29:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 30:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 31:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65052;
//     if (!Q.Line[0]) { DrawLine(Q[0], Q[1]); Q.Line[0] = true; };
 32:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 33:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 34:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 35:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 36:          logical_not  134  133          // tmp134 = ! tmp133;
 37:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65058;
 38:               call_n  253  254  253     // 
 39:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 40:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 41:                 meta    2  131  255     // 
 42:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 43:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 44:                 meta    2  131  255     // 
 38:               call_n  130  254    2     //  // REWRITE
 45:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 46:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 47:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 48:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 48:           assignment  134    0    4     // tmp134 = true: SIMPLE;
 49:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
 37:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 50; // REWRITE
//     if (!Q.Line[1]) { DrawLine(Q[1], Q[2]); Q.Line[1] = true; };
 50:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 51:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 52:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 53:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 54:          logical_not  134  133          // tmp134 = ! tmp133;
 55:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65076;
 56:               call_n  253  254  253     // 
 57:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 58:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 59:                 meta    2  131  255     // 
 60:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 61:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 62:                 meta    2  131  255     // 
 56:               call_n  130  254    2     //  // REWRITE
 63:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 64:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 65:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 66:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 66:           assignment  134    0    4     // tmp134 = true: SIMPLE;
 67:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
 55:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 68; // REWRITE
//     if (!Q.Line[2]) { DrawLine(Q[2], Q[3]); Q.Line[2] = true; };
 68:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 69:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 70:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 71:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 72:          logical_not  134  133          // tmp134 = ! tmp133;
 73:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65094;
 74:               call_n  253  254  253     // 
 75:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 76:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 77:                 meta    2  131  255     // 
 78:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 79:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 80:                 meta    2  131  255     // 
 74:               call_n  130  254    2     //  // REWRITE
 81:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 82:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 83:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 84:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 84:           assignment  134    0    4     // tmp134 = true: SIMPLE;
 85:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
 73:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 86; // REWRITE
//     if (!Q.Line[3]) { DrawLine(Q[3], Q[0]); Q.Line[3] = true; };
 86:           assignment  130    5  254     // tmp130 = 'Line': STRING;
 87:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 88:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
 89:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 90:          logical_not  134  133          // tmp134 = ! tmp133;
 91:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65112;
 92:               call_n  253  254  253     // 
 93:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 94:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 95:                 meta    2  131  255     // 
 96:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 97:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 98:                 meta    2  131  255     // 
 92:               call_n  130  254    2     //  // REWRITE
 99:           assignment  130    5  254     // tmp130 = 'Line': STRING;
100:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
101:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
102:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
102:           assignment  134    0    4     // tmp134 = true: SIMPLE;
103:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
 91:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 104; // REWRITE
//   }
//   if (CurN[1][2] < 0) {
 31:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 104; // REWRITE
104:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
105:          prop_getter  131  254  130     // tmp131 = CurN[tmp130];
106:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
107:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
108:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
109:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
110:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65131;
//     if (!Q.Line[2]) { DrawLine(Q[3], Q[2]); Q.Line[2] = true; };
111:           assignment  130    5  254     // tmp130 = 'Line': STRING;
112:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
113:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
114:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
115:          logical_not  134  133          // tmp134 = ! tmp133;
116:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65137;
117:               call_n  253  254  253     // 
118:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
119:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
120:                 meta    2  131  255     // 
121:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
122:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
123:                 meta    2  131  255     // 
117:               call_n  130  254    2     //  // REWRITE
124:           assignment  130    5  254     // tmp130 = 'Line': STRING;
125:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
126:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
127:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
127:           assignment  134    0    4     // tmp134 = true: SIMPLE;
128:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
116:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 129; // REWRITE
//     if (!Q.Line[9]) { DrawLine(Q[2], Q[6]); Q.Line[9] = true; };
129:           assignment  130    5  254     // tmp130 = 'Line': STRING;
130:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
131:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
132:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
133:          logical_not  134  133          // tmp134 = ! tmp133;
134:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65155;
135:               call_n  253  254  253     // 
136:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
137:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
138:                 meta    2  131  255     // 
139:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
140:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
141:                 meta    2  131  255     // 
135:               call_n  130  254    2     //  // REWRITE
142:           assignment  130    5  254     // tmp130 = 'Line': STRING;
143:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
144:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
145:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
145:           assignment  134    0    4     // tmp134 = true: SIMPLE;
146:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
134:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 147; // REWRITE
//     if (!Q.Line[6]) { DrawLine(Q[6], Q[7]); Q.Line[6] = true; };
147:           assignment  130    5  254     // tmp130 = 'Line': STRING;
148:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
149:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
150:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
151:          logical_not  134  133          // tmp134 = ! tmp133;
152:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65173;
153:               call_n  253  254  253     // 
154:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
155:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
156:                 meta    2  131  255     // 
157:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
158:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
159:                 meta    2  131  255     // 
153:               call_n  130  254    2     //  // REWRITE
160:           assignment  130    5  254     // tmp130 = 'Line': STRING;
161:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
162:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
163:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
163:           assignment  134    0    4     // tmp134 = true: SIMPLE;
164:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
152:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 165; // REWRITE
//     if (!Q.Line[10]) { DrawLine(Q[7], Q[3]); Q.Line[10] = true; };
165:           assignment  130    5  254     // tmp130 = 'Line': STRING;
166:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
167:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
168:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
169:          logical_not  134  133          // tmp134 = ! tmp133;
170:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65191;
171:               call_n  253  254  253     // 
172:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
173:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
174:                 meta    2  131  255     // 
175:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
176:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
177:                 meta    2  131  255     // 
171:               call_n  130  254    2     //  // REWRITE
178:           assignment  130    5  254     // tmp130 = 'Line': STRING;
179:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
180:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
181:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
181:           assignment  134    0    4     // tmp134 = true: SIMPLE;
182:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
170:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 183; // REWRITE
//   }
//   if (CurN[2][2] < 0) {
110:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 183; // REWRITE
183:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
184:          prop_getter  131  254  130     // tmp131 = CurN[tmp130];
185:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
186:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
187:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
188:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
189:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65210;
//     if (!Q.Line[4]) { DrawLine(Q[4], Q[5]); Q.Line[4] = true; };
190:           assignment  130    5  254     // tmp130 = 'Line': STRING;
191:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
192:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
193:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
194:          logical_not  134  133          // tmp134 = ! tmp133;
195:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65216;
196:               call_n  253  254  253     // 
197:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
198:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
199:                 meta    2  131  255     // 
200:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
201:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
202:                 meta    2  131  255     // 
196:               call_n  130  254    2     //  // REWRITE
203:           assignment  130    5  254     // tmp130 = 'Line': STRING;
204:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
205:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
206:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
206:           assignment  134    0    4     // tmp134 = true: SIMPLE;
207:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
195:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 208; // REWRITE
//     if (!Q.Line[5]) { DrawLine(Q[5], Q[6]); Q.Line[5] = true; };
208:           assignment  130    5  254     // tmp130 = 'Line': STRING;
209:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
210:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
211:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
212:          logical_not  134  133          // tmp134 = ! tmp133;
213:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65234;
214:               call_n  253  254  253     // 
215:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
216:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
217:                 meta    2  131  255     // 
218:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
219:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
220:                 meta    2  131  255     // 
214:               call_n  130  254    2     //  // REWRITE
221:           assignment  130    5  254     // tmp130 = 'Line': STRING;
222:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
223:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
224:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
224:           assignment  134    0    4     // tmp134 = true: SIMPLE;
225:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
213:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 226; // REWRITE
//     if (!Q.Line[6]) { DrawLine(Q[6], Q[7]); Q.Line[6] = true; };
226:           assignment  130    5  254     // tmp130 = 'Line': STRING;
227:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
228:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
229:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
230:          logical_not  134  133          // tmp134 = ! tmp133;
231:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65252;
232:               call_n  253  254  253     // 
233:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
234:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
235:                 meta    2  131  255     // 
236:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
237:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
238:                 meta    2  131  255     // 
232:               call_n  130  254    2     //  // REWRITE
239:           assignment  130    5  254     // tmp130 = 'Line': STRING;
240:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
241:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
242:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
242:           assignment  134    0    4     // tmp134 = true: SIMPLE;
243:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
231:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 244; // REWRITE
//     if (!Q.Line[7]) { DrawLine(Q[7], Q[4]); Q.Line[7] = true; };
244:           assignment  130    5  254     // tmp130 = 'Line': STRING;
245:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
246:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
247:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
248:          logical_not  134  133          // tmp134 = ! tmp133;
249:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65270;
250:               call_n  253  254  253     // 
251:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
252:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
253:                 meta    2  131  255     // 
254:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
255:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
256:                 meta    2  131  255     // 
250:               call_n  130  254    2     //  // REWRITE
257:           assignment  130    5  254     // tmp130 = 'Line': STRING;
258:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
259:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
260:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
260:           assignment  134    0    4     // tmp134 = true: SIMPLE;
261:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
249:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 262; // REWRITE
//   }
//   if (CurN[3][2] < 0) {
189:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 262; // REWRITE
262:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
263:          prop_getter  131  254  130     // tmp131 = CurN[tmp130];
264:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
265:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
266:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
267:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
268:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65289;
//     if (!Q.Line[4]) { DrawLine(Q[4], Q[5]); Q.Line[4] = true; };
269:           assignment  130    5  254     // tmp130 = 'Line': STRING;
270:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
271:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
272:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
273:          logical_not  134  133          // tmp134 = ! tmp133;
274:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65295;
275:               call_n  253  254  253     // 
276:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
277:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
278:                 meta    2  131  255     // 
279:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
280:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
281:                 meta    2  131  255     // 
275:               call_n  130  254    2     //  // REWRITE
282:           assignment  130    5  254     // tmp130 = 'Line': STRING;
283:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
284:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
285:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
285:           assignment  134    0    4     // tmp134 = true: SIMPLE;
286:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
274:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 287; // REWRITE
//     if (!Q.Line[8]) { DrawLine(Q[5], Q[1]); Q.Line[8] = true; };
287:           assignment  130    5  254     // tmp130 = 'Line': STRING;
288:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
289:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
290:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
291:          logical_not  134  133          // tmp134 = ! tmp133;
292:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65313;
293:               call_n  253  254  253     // 
294:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
295:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
296:                 meta    2  131  255     // 
297:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
298:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
299:                 meta    2  131  255     // 
293:               call_n  130  254    2     //  // REWRITE
300:           assignment  130    5  254     // tmp130 = 'Line': STRING;
301:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
302:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
303:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
303:           assignment  134    0    4     // tmp134 = true: SIMPLE;
304:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
292:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 305; // REWRITE
//     if (!Q.Line[0]) { DrawLine(Q[1], Q[0]); Q.Line[0] = true; };
305:           assignment  130    5  254     // tmp130 = 'Line': STRING;
306:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
307:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
308:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
309:          logical_not  134  133          // tmp134 = ! tmp133;
310:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65331;
311:               call_n  253  254  253     // 
312:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
313:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
314:                 meta    2  131  255     // 
315:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
316:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
317:                 meta    2  131  255     // 
311:               call_n  130  254    2     //  // REWRITE
318:           assignment  130    5  254     // tmp130 = 'Line': STRING;
319:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
320:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
321:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
321:           assignment  134    0    4     // tmp134 = true: SIMPLE;
322:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
310:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 323; // REWRITE
//     if (!Q.Line[11]) { DrawLine(Q[0], Q[4]); Q.Line[11] = true; };
323:           assignment  130    5  254     // tmp130 = 'Line': STRING;
324:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
325:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
326:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
327:          logical_not  134  133          // tmp134 = ! tmp133;
328:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65349;
329:               call_n  253  254  253     // 
330:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
331:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
332:                 meta    2  131  255     // 
333:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
334:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
335:                 meta    2  131  255     // 
329:               call_n  130  254    2     //  // REWRITE
336:           assignment  130    5  254     // tmp130 = 'Line': STRING;
337:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
338:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
339:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
339:           assignment  134    0    4     // tmp134 = true: SIMPLE;
340:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
328:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 341; // REWRITE
//   }
//   if (CurN[4][2] < 0) {
268:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 341; // REWRITE
341:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
342:          prop_getter  131  254  130     // tmp131 = CurN[tmp130];
343:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
344:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
345:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
346:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
347:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65368;
//     if (!Q.Line[11]) { DrawLine(Q[4], Q[0]); Q.Line[11] = true; };
348:           assignment  130    5  254     // tmp130 = 'Line': STRING;
349:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
350:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
351:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
352:          logical_not  134  133          // tmp134 = ! tmp133;
353:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65374;
354:               call_n  253  254  253     // 
355:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
356:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
357:                 meta    2  131  255     // 
358:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
359:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
360:                 meta    2  131  255     // 
354:               call_n  130  254    2     //  // REWRITE
361:           assignment  130    5  254     // tmp130 = 'Line': STRING;
362:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
363:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
364:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
364:           assignment  134    0    4     // tmp134 = true: SIMPLE;
365:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
353:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 366; // REWRITE
//     if (!Q.Line[3]) { DrawLine(Q[0], Q[3]); Q.Line[3] = true; };
366:           assignment  130    5  254     // tmp130 = 'Line': STRING;
367:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
368:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
369:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
370:          logical_not  134  133          // tmp134 = ! tmp133;
371:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65392;
372:               call_n  253  254  253     // 
373:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
374:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
375:                 meta    2  131  255     // 
376:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
377:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
378:                 meta    2  131  255     // 
372:               call_n  130  254    2     //  // REWRITE
379:           assignment  130    5  254     // tmp130 = 'Line': STRING;
380:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
381:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
382:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
382:           assignment  134    0    4     // tmp134 = true: SIMPLE;
383:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
371:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 384; // REWRITE
//     if (!Q.Line[10]) { DrawLine(Q[3], Q[7]); Q.Line[10] = true; };
384:           assignment  130    5  254     // tmp130 = 'Line': STRING;
385:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
386:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
387:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
388:          logical_not  134  133          // tmp134 = ! tmp133;
389:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65410;
390:               call_n  253  254  253     // 
391:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
392:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
393:                 meta    2  131  255     // 
394:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
395:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
396:                 meta    2  131  255     // 
390:               call_n  130  254    2     //  // REWRITE
397:           assignment  130    5  254     // tmp130 = 'Line': STRING;
398:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
399:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
400:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
400:           assignment  134    0    4     // tmp134 = true: SIMPLE;
401:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
389:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 402; // REWRITE
//     if (!Q.Line[7]) { DrawLine(Q[7], Q[4]); Q.Line[7] = true; };
402:           assignment  130    5  254     // tmp130 = 'Line': STRING;
403:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
404:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
405:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
406:          logical_not  134  133          // tmp134 = ! tmp133;
407:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65428;
408:               call_n  253  254  253     // 
409:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
410:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
411:                 meta    2  131  255     // 
412:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
413:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
414:                 meta    2  131  255     // 
408:               call_n  130  254    2     //  // REWRITE
415:           assignment  130    5  254     // tmp130 = 'Line': STRING;
416:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
417:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
418:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
418:           assignment  134    0    4     // tmp134 = true: SIMPLE;
419:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
407:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 420; // REWRITE
//   }
//   if (CurN[5][2] < 0) {
347:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 420; // REWRITE
420:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
421:          prop_getter  131  254  130     // tmp131 = CurN[tmp130];
422:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
423:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
424:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
425:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
426:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65447;
//     if (!Q.Line[8]) { DrawLine(Q[1], Q[5]); Q.Line[8] = true; };
427:           assignment  130    5  254     // tmp130 = 'Line': STRING;
428:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
429:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
430:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
431:          logical_not  134  133          // tmp134 = ! tmp133;
432:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65453;
433:               call_n  253  254  253     // 
434:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
435:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
436:                 meta    2  131  255     // 
437:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
438:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
439:                 meta    2  131  255     // 
433:               call_n  130  254    2     //  // REWRITE
440:           assignment  130    5  254     // tmp130 = 'Line': STRING;
441:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
442:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
443:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
443:           assignment  134    0    4     // tmp134 = true: SIMPLE;
444:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
432:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 445; // REWRITE
//     if (!Q.Line[5]) { DrawLine(Q[5], Q[6]); Q.Line[5] = true; };
445:           assignment  130    5  254     // tmp130 = 'Line': STRING;
446:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
447:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
448:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
449:          logical_not  134  133          // tmp134 = ! tmp133;
450:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65471;
451:               call_n  253  254  253     // 
452:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
453:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
454:                 meta    2  131  255     // 
455:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
456:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
457:                 meta    2  131  255     // 
451:               call_n  130  254    2     //  // REWRITE
458:           assignment  130    5  254     // tmp130 = 'Line': STRING;
459:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
460:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
461:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
461:           assignment  134    0    4     // tmp134 = true: SIMPLE;
462:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
450:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 463; // REWRITE
//     if (!Q.Line[9]) { DrawLine(Q[6], Q[2]); Q.Line[9] = true; };
463:           assignment  130    5  254     // tmp130 = 'Line': STRING;
464:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
465:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
466:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
467:          logical_not  134  133          // tmp134 = ! tmp133;
468:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65489;
469:               call_n  253  254  253     // 
470:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
471:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
472:                 meta    2  131  255     // 
473:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
474:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
475:                 meta    2  131  255     // 
469:               call_n  130  254    2     //  // REWRITE
476:           assignment  130    5  254     // tmp130 = 'Line': STRING;
477:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
478:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
479:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
479:           assignment  134    0    4     // tmp134 = true: SIMPLE;
480:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
468:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 481; // REWRITE
//     if (!Q.Line[1]) { DrawLine(Q[2], Q[1]); Q.Line[1] = true; };
481:           assignment  130    5  254     // tmp130 = 'Line': STRING;
482:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
483:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
484:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
485:          logical_not  134  133          // tmp134 = ! tmp133;
486:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65507;
487:               call_n  253  254  253     // 
488:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
489:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
490:                 meta    2  131  255     // 
491:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
492:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
493:                 meta    2  131  255     // 
487:               call_n  130  254    2     //  // REWRITE
494:           assignment  130    5  254     // tmp130 = 'Line': STRING;
495:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
496:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
497:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
497:           assignment  134    0    4     // tmp134 = true: SIMPLE;
498:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
486:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 499; // REWRITE
//   }
//   Q.Line = [false,false,false,false,false,false,false,false,false,false,false,false];
426:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 499; // REWRITE
499:           assignment  130    5  254     // tmp130 = 'Line': STRING;
500:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
500:           array_decl  253  253  255     // 
501:           assignment  132    0    3     // tmp132 = false: SIMPLE;
502:                 meta    2  132  255     // 
503:           assignment  132    0    3     // tmp132 = false: SIMPLE;
504:                 meta    2  132  255     // 
505:           assignment  132    0    3     // tmp132 = false: SIMPLE;
506:                 meta    2  132  255     // 
507:           assignment  132    0    3     // tmp132 = false: SIMPLE;
508:                 meta    2  132  255     // 
509:           assignment  132    0    3     // tmp132 = false: SIMPLE;
510:                 meta    2  132  255     // 
511:           assignment  132    0    3     // tmp132 = false: SIMPLE;
512:                 meta    2  132  255     // 
513:           assignment  132    0    3     // tmp132 = false: SIMPLE;
514:                 meta    2  132  255     // 
515:           assignment  132    0    3     // tmp132 = false: SIMPLE;
516:                 meta    2  132  255     // 
517:           assignment  132    0    3     // tmp132 = false: SIMPLE;
518:                 meta    2  132  255     // 
519:           assignment  132    0    3     // tmp132 = false: SIMPLE;
520:                 meta    2  132  255     // 
521:           assignment  132    0    3     // tmp132 = false: SIMPLE;
522:                 meta    2  132  255     // 
523:           assignment  132    0    3     // tmp132 = false: SIMPLE;
524:                 meta    2  132  255     // 
500:           array_decl  132    0   12     //  // REWRITE
525:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q.LastPx = 0;
526:           assignment  130    5  254     // tmp130 = 'LastPx': STRING;
527:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
527:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
528:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  138    2     // var tmp128 .. tmp138; // REWRITE
529:                  ret                    // ret;
  1:                 meta    7    2   17     // function end: 530; // REWRITE
// function Loop() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Loop (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//   if (Testing.LoopCount > Testing.LoopMax) return;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'LoopCount': STRING;
  5:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
  6:           assignment  132    5  254     // tmp132 = 'LoopMax': STRING;
  7:          prop_getter  133  254  132     // tmp133 = Testing[tmp132];
  8:         greater_than  134  131  133     // tmp134 = tmp131 > tmp133;
  9:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65030;
 10:                  ret                    // ret;
//   var TestingStr = String(Testing.LoopCount);
  9:    is_false_jmp_down  134    0    2     // if (tmp134 == false) goto 11; // REWRITE
 11:               call_n  253  254  253     // 
 12:           assignment  130    5  254     // tmp130 = 'LoopCount': STRING;
 13:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 14:                 meta    2  131  255     // 
 11:               call_n  130  254    1     //  // REWRITE
 15:           assignment  254    6  130     // TestingStr = tmp130 : TYPEOF(tmp130);
//   while (TestingStr.length < 3) TestingStr = "0" + TestingStr;
 16:             jmp_down  253  253          // goto 65037;
 17:           assignment  130    5  254     // tmp130 = '0': STRING;
 18:             addition  131  130  254     // tmp131 = tmp130 + TestingStr;
 19:           assignment  254    6  131     // TestingStr = tmp131 : TYPEOF(tmp131);
 16:             jmp_down    0    4          // goto 20; // REWRITE
 20:           assignment  132    5  254     // tmp132 = 'length': STRING;
 21:          prop_getter  133  254  132     // tmp133 = TestingStr[tmp132];
 22:           assignment  134    1    3     // tmp134 = 3: SMALLINT;
 23:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 24:       is_true_jmp_up  135    0    7     // if (tmp135) goto 17;
//   MTrans = Translate(I, -Q[8].V[0], -Q[8].V[1], -Q[8].V[2]);
 25:               call_n  253  254  253     // 
 26:                 meta    2  254  255     // 
 27:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 28:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 29:           assignment  132    5  254     // tmp132 = 'V': STRING;
 30:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 31:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 32:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 33:          unary_minus  136  135          // tmp136 = -tmp135;
 34:                 meta    2  136  255     // 
 35:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 36:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 37:           assignment  132    5  254     // tmp132 = 'V': STRING;
 38:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 39:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 40:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 41:          unary_minus  136  135          // tmp136 = -tmp135;
 42:                 meta    2  136  255     // 
 43:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 44:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 45:           assignment  132    5  254     // tmp132 = 'V': STRING;
 46:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 47:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 48:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 49:          unary_minus  136  135          // tmp136 = -tmp135;
 50:                 meta    2  136  255     // 
 25:               call_n  130  254    4     //  // REWRITE
 51:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   MTrans = RotateX(MTrans, 1);
 52:               call_n  253  254  253     // 
 53:                 meta    2  254  255     // 
 54:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 55:                 meta    2  130  255     // 
 52:               call_n  130  254    2     //  // REWRITE
 56:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   MTrans = RotateY(MTrans, 3);
 57:               call_n  253  254  253     // 
 58:                 meta    2  254  255     // 
 59:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 60:                 meta    2  130  255     // 
 57:               call_n  130  254    2     //  // REWRITE
 61:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   MTrans = RotateZ(MTrans, 5);
 62:               call_n  253  254  253     // 
 63:                 meta    2  254  255     // 
 64:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
 65:                 meta    2  130  255     // 
 62:               call_n  130  254    2     //  // REWRITE
 66:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   MTrans = Translate(MTrans, Q[8].V[0], Q[8].V[1], Q[8].V[2]);
 67:               call_n  253  254  253     // 
 68:                 meta    2  254  255     // 
 69:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 70:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 71:           assignment  132    5  254     // tmp132 = 'V': STRING;
 72:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 73:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 74:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 75:                 meta    2  135  255     // 
 76:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 77:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 78:           assignment  132    5  254     // tmp132 = 'V': STRING;
 79:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 80:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 81:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 82:                 meta    2  135  255     // 
 83:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 84:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
 85:           assignment  132    5  254     // tmp132 = 'V': STRING;
 86:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 87:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 88:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 89:                 meta    2  135  255     // 
 67:               call_n  130  254    4     //  // REWRITE
 90:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   MQube = MMulti(MTrans, MQube);
 91:               call_n  253  254  253     // 
 92:                 meta    2  254  255     // 
 93:                 meta    2  254  255     // 
 91:               call_n  130  254    2     //  // REWRITE
 94:           assignment  254    6  130     // MQube = tmp130 : TYPEOF(tmp130);
//   var i = 8;
 95:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 96:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   for (; i > -1; i--) {
 97:             jmp_down  253  253          // goto 65118;
//     Q[i].V = VMulti(MTrans, Q[i].V);
 98:          prop_getter  130  254  254     // tmp130 = Q[i];
 99:           assignment  131    5  254     // tmp131 = 'V': STRING;
100:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
100:               call_n  253  254  253     // 
101:                 meta    2  254  255     // 
102:          prop_getter  133  254  254     // tmp133 = Q[i];
103:           assignment  134    5  254     // tmp134 = 'V': STRING;
104:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
105:                 meta    2  135  255     // 
100:               call_n  133  254    2     //  // REWRITE
106:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
//   }
107:            post_decr  134  254          // tmp134 = i--;
 97:             jmp_down    0   11          // goto 108; // REWRITE
108:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
109:           assignment  136    1    1     // tmp136 = 1: SMALLINT;
110:          unary_minus  137  136          // tmp137 = -tmp136;
111:         greater_than  138  135  137     // tmp138 = tmp135 > tmp137;
112:       is_true_jmp_up  138    0   14     // if (tmp138) goto 98;
//   DrawQube();
113:               call_n  253  254  253     // 
113:               call_n  130  254    0     //  // REWRITE
//   Testing.LoopCount++;
114:           assignment  130    5  254     // tmp130 = 'LoopCount': STRING;
115:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
116:            post_incr  132  131          // tmp132 = tmp131++;
117:          prop_setter  254  130  131     // Testing[tmp130] = tmp131;
//   Loop();
118:               call_n  253  254  253     // 
118:               call_n  130  254    0     //  // REWRITE
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  140    2     // var tmp128 .. tmp140; // REWRITE
119:                  ret                    // ret;
  1:                 meta    7    0  119     // function end: 120; // REWRITE
// function Init(CubeSize) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//   // init/reset vars
// 
//   Origin.V = [150,150,20,1];
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    5  254     // tmp130 = 'V': STRING;
  6:          prop_getter  131  254  130     // tmp131 = Origin[tmp130];
  6:           array_decl  253  253  255     // 
  7:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
  8:                 meta    2  132  255     // 
  9:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
 10:                 meta    2  132  255     // 
 11:           assignment  132    1   20     // tmp132 = 20: SMALLINT;
 12:                 meta    2  132  255     // 
 13:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 14:                 meta    2  132  255     // 
  6:           array_decl  132    0    4     //  // REWRITE
 15:          prop_setter  254  130  132     // Origin[tmp130] = tmp132;
//   Testing.LoopCount = 0;
 16:           assignment  130    5  254     // tmp130 = 'LoopCount': STRING;
 17:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 17:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 18:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.LoopMax = 50;
 19:           assignment  130    5  254     // tmp130 = 'LoopMax': STRING;
 20:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 20:           assignment  132    1   50     // tmp132 = 50: SMALLINT;
 21:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.TimeMax = 0;
 22:           assignment  130    5  254     // tmp130 = 'TimeMax': STRING;
 23:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 23:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 24:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.TimeAvg = 0;
 25:           assignment  130    5  254     // tmp130 = 'TimeAvg': STRING;
 26:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 26:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 27:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.TimeMin = 0;
 28:           assignment  130    5  254     // tmp130 = 'TimeMin': STRING;
 29:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 29:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 30:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.TimeTemp = 0;
 31:           assignment  130    5  254     // tmp130 = 'TimeTemp': STRING;
 32:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 32:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 33:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.TimeTotal = 0;
 34:           assignment  130    5  254     // tmp130 = 'TimeTotal': STRING;
 35:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 35:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 36:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Testing.Init = false;
 37:           assignment  130    5  254     // tmp130 = 'Init': STRING;
 38:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
 38:           assignment  132    0    3     // tmp132 = false: SIMPLE;
 39:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   // transformation matrix
// 
//   MTrans = [
 40:           array_decl  253  253  255     // 
//   [1,0,0,0],
 41:           array_decl  253  253  255     // 
 42:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 43:                 meta    2  130  255     // 
 44:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 45:                 meta    2  130  255     // 
 46:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 47:                 meta    2  130  255     // 
 48:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 49:                 meta    2  130  255     // 
 41:           array_decl  130    0    4     //  // REWRITE
 50:                 meta    2  130  255     // 
//   [0,1,0,0],
 51:           array_decl  253  253  255     // 
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:                 meta    2  130  255     // 
 54:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 55:                 meta    2  130  255     // 
 56:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 57:                 meta    2  130  255     // 
 58:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 59:                 meta    2  130  255     // 
 51:           array_decl  130    0    4     //  // REWRITE
 60:                 meta    2  130  255     // 
//   [0,0,1,0],
 61:           array_decl  253  253  255     // 
 62:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 63:                 meta    2  130  255     // 
 64:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 65:                 meta    2  130  255     // 
 66:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 67:                 meta    2  130  255     // 
 68:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 69:                 meta    2  130  255     // 
 61:           array_decl  130    0    4     //  // REWRITE
 70:                 meta    2  130  255     // 
//   [0,0,0,1]
 71:           array_decl  253  253  255     // 
 72:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 73:                 meta    2  130  255     // 
 74:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 75:                 meta    2  130  255     // 
 76:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 77:                 meta    2  130  255     // 
 78:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 79:                 meta    2  130  255     // 
 71:           array_decl  130    0    4     //  // REWRITE
//   ];
 80:                 meta    2  130  255     // 
 40:           array_decl  130    0    4     //  // REWRITE
 81:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   
//   // position information of qube
// 
//   MQube = [
 82:           array_decl  253  253  255     // 
//   [1,0,0,0],
 83:           array_decl  253  253  255     // 
 84:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 85:                 meta    2  130  255     // 
 86:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 87:                 meta    2  130  255     // 
 88:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 89:                 meta    2  130  255     // 
 90:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 91:                 meta    2  130  255     // 
 83:           array_decl  130    0    4     //  // REWRITE
 92:                 meta    2  130  255     // 
//   [0,1,0,0],
 93:           array_decl  253  253  255     // 
 94:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 95:                 meta    2  130  255     // 
 96:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 97:                 meta    2  130  255     // 
 98:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 99:                 meta    2  130  255     // 
100:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
101:                 meta    2  130  255     // 
 93:           array_decl  130    0    4     //  // REWRITE
102:                 meta    2  130  255     // 
//   [0,0,1,0],
103:           array_decl  253  253  255     // 
104:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
105:                 meta    2  130  255     // 
106:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
107:                 meta    2  130  255     // 
108:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
109:                 meta    2  130  255     // 
110:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
111:                 meta    2  130  255     // 
103:           array_decl  130    0    4     //  // REWRITE
112:                 meta    2  130  255     // 
//   [0,0,0,1]
113:           array_decl  253  253  255     // 
114:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
115:                 meta    2  130  255     // 
116:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
117:                 meta    2  130  255     // 
118:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
119:                 meta    2  130  255     // 
120:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
121:                 meta    2  130  255     // 
113:           array_decl  130    0    4     //  // REWRITE
//   ];
122:                 meta    2  130  255     // 
 82:           array_decl  130    0    4     //  // REWRITE
123:           assignment  254    6  130     // MQube = tmp130 : TYPEOF(tmp130);
//   
//   // entity matrix
// 
//   I = [
124:           array_decl  253  253  255     // 
//   [1,0,0,0],
125:           array_decl  253  253  255     // 
126:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
127:                 meta    2  130  255     // 
128:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
129:                 meta    2  130  255     // 
130:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
131:                 meta    2  130  255     // 
132:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
133:                 meta    2  130  255     // 
125:           array_decl  130    0    4     //  // REWRITE
134:                 meta    2  130  255     // 
//   [0,1,0,0],
135:           array_decl  253  253  255     // 
136:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
137:                 meta    2  130  255     // 
138:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
139:                 meta    2  130  255     // 
140:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
141:                 meta    2  130  255     // 
142:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
143:                 meta    2  130  255     // 
135:           array_decl  130    0    4     //  // REWRITE
144:                 meta    2  130  255     // 
//   [0,0,1,0],
145:           array_decl  253  253  255     // 
146:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
147:                 meta    2  130  255     // 
148:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
149:                 meta    2  130  255     // 
150:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
151:                 meta    2  130  255     // 
152:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
153:                 meta    2  130  255     // 
145:           array_decl  130    0    4     //  // REWRITE
154:                 meta    2  130  255     // 
//   [0,0,0,1]
155:           array_decl  253  253  255     // 
156:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
157:                 meta    2  130  255     // 
158:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
159:                 meta    2  130  255     // 
160:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
161:                 meta    2  130  255     // 
162:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
163:                 meta    2  130  255     // 
155:           array_decl  130    0    4     //  // REWRITE
//   ];
164:                 meta    2  130  255     // 
124:           array_decl  130    0    4     //  // REWRITE
165:           assignment  254    6  130     // I = tmp130 : TYPEOF(tmp130);
//   
//   // create qube
// 
//   Q[0] = new CreateP(-CubeSize,-CubeSize, CubeSize);
166:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
167:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
167:          construct_n  253  254  253     // 
168:          unary_minus  132  254          // tmp132 = -CubeSize;
169:                 meta    2  132  255     // 
170:          unary_minus  132  254          // tmp132 = -CubeSize;
171:                 meta    2  132  255     // 
172:                 meta    2  254  255     // 
167:          construct_n  132  254    3     //  // REWRITE
173:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[1] = new CreateP(-CubeSize, CubeSize, CubeSize);
174:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
175:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
175:          construct_n  253  254  253     // 
176:          unary_minus  132  254          // tmp132 = -CubeSize;
177:                 meta    2  132  255     // 
178:                 meta    2  254  255     // 
179:                 meta    2  254  255     // 
175:          construct_n  132  254    3     //  // REWRITE
180:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[2] = new CreateP( CubeSize, CubeSize, CubeSize);
181:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
182:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
182:          construct_n  253  254  253     // 
183:                 meta    2  254  255     // 
184:                 meta    2  254  255     // 
185:                 meta    2  254  255     // 
182:          construct_n  132  254    3     //  // REWRITE
186:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[3] = new CreateP( CubeSize,-CubeSize, CubeSize);
187:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
188:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
188:          construct_n  253  254  253     // 
189:                 meta    2  254  255     // 
190:          unary_minus  132  254          // tmp132 = -CubeSize;
191:                 meta    2  132  255     // 
192:                 meta    2  254  255     // 
188:          construct_n  132  254    3     //  // REWRITE
193:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[4] = new CreateP(-CubeSize,-CubeSize,-CubeSize);
194:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
195:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
195:          construct_n  253  254  253     // 
196:          unary_minus  132  254          // tmp132 = -CubeSize;
197:                 meta    2  132  255     // 
198:          unary_minus  132  254          // tmp132 = -CubeSize;
199:                 meta    2  132  255     // 
200:          unary_minus  132  254          // tmp132 = -CubeSize;
201:                 meta    2  132  255     // 
195:          construct_n  132  254    3     //  // REWRITE
202:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[5] = new CreateP(-CubeSize, CubeSize,-CubeSize);
203:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
204:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
204:          construct_n  253  254  253     // 
205:          unary_minus  132  254          // tmp132 = -CubeSize;
206:                 meta    2  132  255     // 
207:                 meta    2  254  255     // 
208:          unary_minus  132  254          // tmp132 = -CubeSize;
209:                 meta    2  132  255     // 
204:          construct_n  132  254    3     //  // REWRITE
210:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[6] = new CreateP( CubeSize, CubeSize,-CubeSize);
211:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
212:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
212:          construct_n  253  254  253     // 
213:                 meta    2  254  255     // 
214:                 meta    2  254  255     // 
215:          unary_minus  132  254          // tmp132 = -CubeSize;
216:                 meta    2  132  255     // 
212:          construct_n  132  254    3     //  // REWRITE
217:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   Q[7] = new CreateP( CubeSize,-CubeSize,-CubeSize);
218:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
219:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
219:          construct_n  253  254  253     // 
220:                 meta    2  254  255     // 
221:          unary_minus  132  254          // tmp132 = -CubeSize;
222:                 meta    2  132  255     // 
223:          unary_minus  132  254          // tmp132 = -CubeSize;
224:                 meta    2  132  255     // 
219:          construct_n  132  254    3     //  // REWRITE
225:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   
//   // center of gravity
// 
//   Q[8] = new CreateP(0, 0, 0);
226:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
227:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
227:          construct_n  253  254  253     // 
228:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
229:                 meta    2  132  255     // 
230:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
231:                 meta    2  132  255     // 
232:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
233:                 meta    2  132  255     // 
227:          construct_n  132  254    3     //  // REWRITE
234:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   
//   // anti-clockwise edge check
// 
//   Q.Edge = [[0,1,2],[3,2,6],[7,6,5],[4,5,1],[4,0,3],[1,5,6]];
235:           assignment  130    5  254     // tmp130 = 'Edge': STRING;
236:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
236:           array_decl  253  253  255     // 
237:           array_decl  253  253  255     // 
238:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
239:                 meta    2  132  255     // 
240:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
241:                 meta    2  132  255     // 
242:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
243:                 meta    2  132  255     // 
237:           array_decl  132    0    3     //  // REWRITE
244:                 meta    2  132  255     // 
245:           array_decl  253  253  255     // 
246:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
247:                 meta    2  132  255     // 
248:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
249:                 meta    2  132  255     // 
250:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
251:                 meta    2  132  255     // 
245:           array_decl  132    0    3     //  // REWRITE
252:                 meta    2  132  255     // 
253:           array_decl  253  253  255     // 
254:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
255:                 meta    2  132  255     // 
256:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
257:                 meta    2  132  255     // 
258:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
259:                 meta    2  132  255     // 
253:           array_decl  132    0    3     //  // REWRITE
260:                 meta    2  132  255     // 
261:           array_decl  253  253  255     // 
262:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
263:                 meta    2  132  255     // 
264:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
265:                 meta    2  132  255     // 
266:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
267:                 meta    2  132  255     // 
261:           array_decl  132    0    3     //  // REWRITE
268:                 meta    2  132  255     // 
269:           array_decl  253  253  255     // 
270:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
271:                 meta    2  132  255     // 
272:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
273:                 meta    2  132  255     // 
274:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
275:                 meta    2  132  255     // 
269:           array_decl  132    0    3     //  // REWRITE
276:                 meta    2  132  255     // 
277:           array_decl  253  253  255     // 
278:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
279:                 meta    2  132  255     // 
280:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
281:                 meta    2  132  255     // 
282:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
283:                 meta    2  132  255     // 
277:           array_decl  132    0    3     //  // REWRITE
284:                 meta    2  132  255     // 
236:           array_decl  132    0    6     //  // REWRITE
285:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   
//   // calculate squad normals
// 
//   Q.Normal = new Array();
286:           assignment  130    5  254     // tmp130 = 'Normal': STRING;
287:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
287:          construct_n  253  254  253     // 
287:          construct_n  132  254    0     // tmp132 = new Array; // REWRITE
288:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   for (var i = 0; i < Q.Edge.length; i++) Q.Normal[i] = CalcNormal(Q[Q.Edge[i][0]].V, Q[Q.Edge[i][1]].V, Q[Q.Edge[i][2]].V);
289:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
290:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
291:             jmp_down  253  253          // goto 65312;
292:           assignment  130    5  254     // tmp130 = 'Normal': STRING;
293:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
294:          prop_getter  132  131  254     // tmp132 = tmp131[i];
294:               call_n  253  254  253     // 
295:           assignment  133    5  254     // tmp133 = 'Edge': STRING;
296:          prop_getter  134  254  133     // tmp134 = Q[tmp133];
297:          prop_getter  135  134  254     // tmp135 = tmp134[i];
298:           assignment  136    1    0     // tmp136 = 0: SMALLINT;
299:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
300:          prop_getter  138  254  137     // tmp138 = Q[tmp137];
301:           assignment  139    5  254     // tmp139 = 'V': STRING;
302:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
303:                 meta    2  140  255     // 
304:           assignment  133    5  254     // tmp133 = 'Edge': STRING;
305:          prop_getter  134  254  133     // tmp134 = Q[tmp133];
306:          prop_getter  135  134  254     // tmp135 = tmp134[i];
307:           assignment  136    1    1     // tmp136 = 1: SMALLINT;
308:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
309:          prop_getter  138  254  137     // tmp138 = Q[tmp137];
310:           assignment  139    5  254     // tmp139 = 'V': STRING;
311:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
312:                 meta    2  140  255     // 
313:           assignment  133    5  254     // tmp133 = 'Edge': STRING;
314:          prop_getter  134  254  133     // tmp134 = Q[tmp133];
315:          prop_getter  135  134  254     // tmp135 = tmp134[i];
316:           assignment  136    1    2     // tmp136 = 2: SMALLINT;
317:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
318:          prop_getter  138  254  137     // tmp138 = Q[tmp137];
319:           assignment  139    5  254     // tmp139 = 'V': STRING;
320:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
321:                 meta    2  140  255     // 
294:               call_n  133  254    3     //  // REWRITE
322:          prop_setter  131  254  133     // tmp131[i] = tmp133;
323:            post_incr  134  254          // tmp134 = i++;
291:             jmp_down    0   33          // goto 324; // REWRITE
324:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
325:           assignment  136    5  254     // tmp136 = 'Edge': STRING;
326:          prop_getter  137  254  136     // tmp137 = Q[tmp136];
327:           assignment  138    5  254     // tmp138 = 'length': STRING;
328:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
329:            less_than  140  135  139     // tmp140 = tmp135 < tmp139;
330:       is_true_jmp_up  140    0   38     // if (tmp140) goto 292;
//   
//   // line drawn ?
// 
//   Q.Line = [false,false,false,false,false,false,false,false,false,false,false,false];
331:           assignment  130    5  254     // tmp130 = 'Line': STRING;
332:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
332:           array_decl  253  253  255     // 
333:           assignment  132    0    3     // tmp132 = false: SIMPLE;
334:                 meta    2  132  255     // 
335:           assignment  132    0    3     // tmp132 = false: SIMPLE;
336:                 meta    2  132  255     // 
337:           assignment  132    0    3     // tmp132 = false: SIMPLE;
338:                 meta    2  132  255     // 
339:           assignment  132    0    3     // tmp132 = false: SIMPLE;
340:                 meta    2  132  255     // 
341:           assignment  132    0    3     // tmp132 = false: SIMPLE;
342:                 meta    2  132  255     // 
343:           assignment  132    0    3     // tmp132 = false: SIMPLE;
344:                 meta    2  132  255     // 
345:           assignment  132    0    3     // tmp132 = false: SIMPLE;
346:                 meta    2  132  255     // 
347:           assignment  132    0    3     // tmp132 = false: SIMPLE;
348:                 meta    2  132  255     // 
349:           assignment  132    0    3     // tmp132 = false: SIMPLE;
350:                 meta    2  132  255     // 
351:           assignment  132    0    3     // tmp132 = false: SIMPLE;
352:                 meta    2  132  255     // 
353:           assignment  132    0    3     // tmp132 = false: SIMPLE;
354:                 meta    2  132  255     // 
355:           assignment  132    0    3     // tmp132 = false: SIMPLE;
356:                 meta    2  132  255     // 
332:           array_decl  132    0   12     //  // REWRITE
357:          prop_setter  254  130  132     // Q[tmp130] = tmp132;
//   
//   // create line pixels
// 
//   Q.NumPx = 9 * 2 * CubeSize;
358:           assignment  130    5  254     // tmp130 = 'NumPx': STRING;
359:          prop_getter  131  254  130     // tmp131 = Q[tmp130];
359:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
360:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
361:       multiplication  134  132  133     // tmp134 = tmp132 * tmp133;
362:       multiplication  135  134  254     // tmp135 = tmp134 * CubeSize;
363:          prop_setter  254  130  135     // Q[tmp130] = tmp135;
//   for (var i = 0; i < Q.NumPx; i++) CreateP(0,0,0);
364:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
365:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
366:             jmp_down  253  253          // goto 65387;
367:               call_n  253  254  253     // 
368:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
369:                 meta    2  130  255     // 
370:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
371:                 meta    2  130  255     // 
372:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
373:                 meta    2  130  255     // 
367:               call_n  130  254    3     //  // REWRITE
374:            post_incr  131  254          // tmp131 = i++;
366:             jmp_down    0    9          // goto 375; // REWRITE
375:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
376:           assignment  133    5  254     // tmp133 = 'NumPx': STRING;
377:          prop_getter  134  254  133     // tmp134 = Q[tmp133];
378:            less_than  135  132  134     // tmp135 = tmp132 < tmp134;
379:       is_true_jmp_up  135    0   12     // if (tmp135) goto 367;
//   
//   MTrans = Translate(MTrans, Origin.V[0], Origin.V[1], Origin.V[2]);
380:               call_n  253  254  253     // 
381:                 meta    2  254  255     // 
382:           assignment  130    5  254     // tmp130 = 'V': STRING;
383:          prop_getter  131  254  130     // tmp131 = Origin[tmp130];
384:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
385:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
386:                 meta    2  133  255     // 
387:           assignment  130    5  254     // tmp130 = 'V': STRING;
388:          prop_getter  131  254  130     // tmp131 = Origin[tmp130];
389:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
390:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
391:                 meta    2  133  255     // 
392:           assignment  130    5  254     // tmp130 = 'V': STRING;
393:          prop_getter  131  254  130     // tmp131 = Origin[tmp130];
394:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
395:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
396:                 meta    2  133  255     // 
380:               call_n  130  254    4     //  // REWRITE
397:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
//   MQube = MMulti(MTrans, MQube);
398:               call_n  253  254  253     // 
399:                 meta    2  254  255     // 
400:                 meta    2  254  255     // 
398:               call_n  130  254    2     //  // REWRITE
401:           assignment  254    6  130     // MQube = tmp130 : TYPEOF(tmp130);
//   var i = 0;
402:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
403:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//   for (; i < 9; i++) {
404:             jmp_down  253  253          // goto 65425;
//     Q[i].V = VMulti(MTrans, Q[i].V);
405:          prop_getter  130  254  254     // tmp130 = Q[i];
406:           assignment  131    5  254     // tmp131 = 'V': STRING;
407:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
407:               call_n  253  254  253     // 
408:                 meta    2  254  255     // 
409:          prop_getter  133  254  254     // tmp133 = Q[i];
410:           assignment  134    5  254     // tmp134 = 'V': STRING;
411:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
412:                 meta    2  135  255     // 
407:               call_n  133  254    2     //  // REWRITE
413:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
//   }
414:            post_incr  134  254          // tmp134 = i++;
404:             jmp_down    0   11          // goto 415; // REWRITE
415:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
416:           assignment  136    1    9     // tmp136 = 9: SMALLINT;
417:            less_than  137  135  136     // tmp137 = tmp135 < tmp136;
418:       is_true_jmp_up  137    0   13     // if (tmp137) goto 405;
//   DrawQube();
419:               call_n  253  254  253     // 
419:               call_n  130  254    0     //  // REWRITE
//   Testing.Init = true;
420:           assignment  130    5  254     // tmp130 = 'Init': STRING;
421:          prop_getter  131  254  130     // tmp131 = Testing[tmp130];
421:           assignment  132    0    4     // tmp132 = true: SIMPLE;
422:          prop_setter  254  130  132     // Testing[tmp130] = tmp132;
//   Loop();
423:               call_n  253  254  253     // 
423:               call_n  130  254    0     //  // REWRITE
//   
//   // Perform a simple sum-based verification.
// 
//   var sum = 0;
424:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
425:           assignment  254    6  130     // sum = tmp130 : TYPEOF(tmp130);
//   for (var i = 0; i < Q.length; ++i) {
426:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
427:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
428:             jmp_down  253  253          // goto 65449;
//     var vector = Q[i].V;
429:          prop_getter  130  254  254     // tmp130 = Q[i];
430:           assignment  131    5  254     // tmp131 = 'V': STRING;
431:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
432:           assignment  254    6  132     // vector = tmp132 : TYPEOF(tmp132);
//     for (var j = 0; j < vector.length; ++j)
//       sum += vector[j];
433:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
434:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
435:             jmp_down  253  253          // goto 65456;
436:          prop_getter  130  254  254     // tmp130 = vector[j];
437:             addition  254  254  130     // sum = sum + tmp130;
438:           assignment  131    6  254     // tmp131 = sum : TYPEOF(sum);
439:             pre_incr  132  254          // tmp132 = ++j;
435:             jmp_down    0    5          // goto 440; // REWRITE
440:           assignment  133    6  254     // tmp133 = j : TYPEOF(j);
441:           assignment  134    5  254     // tmp134 = 'length': STRING;
442:          prop_getter  135  254  134     // tmp135 = vector[tmp134];
443:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
444:       is_true_jmp_up  136    0    8     // if (tmp136) goto 436;
//   }
445:             pre_incr  137  254          // tmp137 = ++i;
428:             jmp_down    0   18          // goto 446; // REWRITE
446:           assignment  138    6  254     // tmp138 = i : TYPEOF(i);
447:           assignment  139    5  254     // tmp139 = 'length': STRING;
448:          prop_getter  140  254  139     // tmp140 = Q[tmp139];
449:            less_than  141  138  140     // tmp141 = tmp138 < tmp140;
450:       is_true_jmp_up  141    0   21     // if (tmp141) goto 429;
//   if (sum != validation[CubeSize])
451:           assignment  130    6  254     // tmp130 = sum : TYPEOF(sum);
452:          prop_getter  131  254  254     // tmp131 = validation[CubeSize];
453:      not_equal_value  132  130  131     // tmp132 = tmp130 != tmp131;
454:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65475;
//     throw "Error: bad vector sum for CubeSize = " + CubeSize + "; expected " + validation[CubeSize] + " but got " + sum;
455:           assignment  130    5  254     // tmp130 = 'Error: bad vector sum for CubeSize = ': STRING;
456:             addition  131  130  254     // tmp131 = tmp130 + CubeSize;
457:           assignment  132    5  254     // tmp132 = '; expected ': STRING;
458:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
459:          prop_getter  134  254  254     // tmp134 = validation[CubeSize];
460:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
461:           assignment  136    5  254     // tmp136 = ' but got ': STRING;
462:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
463:             addition  138  137  254     // tmp138 = tmp137 + sum;
464:          throw_value  138               // throw tmp138;
// }
454:    is_false_jmp_down  132    0   11     // if (tmp132 == false) goto 465; // REWRITE
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  145    4     // var tmp128 .. tmp145; // REWRITE
465:                  ret                    // ret;
  2:                 meta    7    1  208     // function end: 466; // REWRITE
// for ( var i = 20; i <= 160; i *= 2 ) {
 36:           assignment  130    1   20     // tmp130 = 20: SMALLINT;
 37:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 38:             jmp_down  253  253          // goto 65059;
//   Init(i);
 39:               call_n  253  254  253     // 
 40:                 meta    2  254  255     // 
 39:               call_n  130  254    1     //  // REWRITE
// }
 41:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 42:       multiplication  254  254  131     // i = i * tmp131;
 38:             jmp_down    0    5          // goto 43; // REWRITE
 43:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 44:           assignment  133    1  160     // tmp133 = 160: SMALLINT;
 45:   less_or_equal_than  134  132  133     // tmp134 = tmp132 <= tmp133;
 46:       is_true_jmp_up  134    0    7     // if (tmp134) goto 39;
// Q = null;
 47:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 48:           assignment  254    6  130     // Q = tmp130 : TYPEOF(tmp130);
// MTrans = null;
 49:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 50:           assignment  254    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
// MQube = null;
 51:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 52:           assignment  254    6  130     // MQube = tmp130 : TYPEOF(tmp130);
// I = null;
 53:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 54:           assignment  254    6  130     // I = tmp130 : TYPEOF(tmp130);
// Origin = null;
 55:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 56:           assignment  254    6  130     // Origin = tmp130 : TYPEOF(tmp130);
// Testing = null;
 57:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 58:           assignment  254    6  130     // Testing = tmp130 : TYPEOF(tmp130);
// LoopTime = null;
 59:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 60:           assignment  254    6  130     // LoopTime = tmp130 : TYPEOF(tmp130);
// DisplArea = null;
 61:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 62:           assignment  254    6  130     // DisplArea = tmp130 : TYPEOF(tmp130);
// 
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 63:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] Q : STRING
0x8a54cc [  4] Array : MAGIC STRING [id=29] 
0x8a54d0 [ 12] MTrans : STRING
0x8a54dc [ 12] MQube : STRING
0x8a54e8 [  8] I : STRING
0x8a54f0 [ 12] Origin : STRING
0x8a54fc [  4] Object : MAGIC STRING [id=27] 
0x8a5504 [ 16] Testing : STRING
0x8a5514 [ 16] LoopTimer : STRING
0x8a5524 [ 16] validation : STRING
0x8a5534 [ 12] 20 : NUMBER
0x8a5544 [ 12] 2889.0000000000045 : NUMBER
0x8a5550 [ 12] 40 : NUMBER
0x8a555c [ 12] 2889.0000000000054 : NUMBER
0x8a5568 [ 12] 80 : NUMBER
0x8a5574 [ 12] 2889.000000000005 : NUMBER
0x8a5584 [ 12] 160 : NUMBER
0x8a5590 [ 16] DisplArea : STRING
0x8a55a0 [ 12] Width : STRING
0x8a55ac [ 12] 300 : NUMBER
0x8a55b8 [ 12] Height : STRING
0x8a55c8 [ 16] DrawLine : STRING
0x8a55d8 [ 12] From : STRING
0x8a55e4 [  8] To : STRING
0x8a55ec [  8] x1 : STRING
0x8a55f4 [  8] V : STRING
0x8a55fc [  8] x2 : STRING
0x8a5608 [  8] y1 : STRING
0x8a5610 [  8] y2 : STRING
0x8a5618 [  8] dx : STRING
0x8a5620 [  4] Math : MAGIC STRING [id=44] 
0x8a5624 [  4] abs : MAGIC STRING [id=84] 
0x8a5628 [  8] dy : STRING
0x8a5630 [  8] x : STRING
0x8a5638 [  8] y : STRING
0x8a5644 [ 12] IncX1 : STRING
0x8a5650 [ 12] IncY1 : STRING
0x8a565c [ 12] IncX2 : STRING
0x8a5668 [ 12] IncY2 : STRING
0x8a5674 [ 12] Den : STRING
0x8a5684 [ 12] Num : STRING
0x8a5690 [ 12] NumAdd : STRING
0x8a569c [ 12] NumPix : STRING
0x8a56a8 [  4] round : MAGIC STRING [id=98] 
0x8a56ac [ 12] LastPx : STRING
0x8a56b8 [  4] i : MAGIC STRING [id=207] 
0x8a56bc [ 16] CalcCross : STRING
0x8a56d0 [  8] V0 : STRING
0x8a56d8 [  8] V1 : STRING
0x8a56e0 [ 12] Cross : STRING
0x8a56ec [ 16] CalcNormal : STRING
0x8a56fc [  8] V2 : STRING
0x8a5708 [  8] A : STRING
0x8a5710 [  8] B : STRING
0x8a5718 [ 12] Length : STRING
0x8a5724 [  4] sqrt : MAGIC STRING [id=100] 
0x8a5728 [ 16] CreateP : STRING
0x8a5738 [  8] X : STRING
0x8a5744 [  8] Y : STRING
0x8a574c [  4] Z : MAGIC STRING [id=210] 
0x8a5750 [ 12] MMulti : STRING
0x8a575c [  8] M1 : STRING
0x8a5764 [  8] M2 : STRING
0x8a576c [  8] M : STRING
0x8a5774 [  8] j : STRING
0x8a577c [ 12] VMulti : STRING
0x8a578c [ 12] Vect : STRING
0x8a5798 [ 16] VMulti2 : STRING
0x8a57a8 [ 12] MAdd : STRING
0x8a57b4 [ 16] Translate : STRING
0x8a57c8 [  8] Dx : STRING
0x8a57d0 [  8] Dy : STRING
0x8a57d8 [  8] Dz : STRING
0x8a57e0 [  4] T : MAGIC STRING [id=209] 
0x8a57e4 [ 16] RotateX : STRING
0x8a57f4 [ 12] Phi : STRING
0x8a5804 [  8] a : STRING
0x8a580c [  4] PI : MAGIC STRING [id=81] 
0x8a5810 [ 12] Cos : STRING
0x8a581c [  4] cos : MAGIC STRING [id=90] 
0x8a5820 [ 12] Sin : STRING
0x8a582c [  4] sin : MAGIC STRING [id=99] 
0x8a5830 [  8] R : STRING
0x8a5838 [ 16] RotateY : STRING
0x8a584c [ 16] RotateZ : STRING
0x8a585c [ 16] DrawQube : STRING
0x8a586c [ 12] CurN : STRING
0x8a5878 [ 12] Normal : STRING
0x8a5888 [ 12] Line : STRING
0x8a5894 [ 12] Loop : STRING
0x8a58a0 [ 16] LoopCount : STRING
0x8a58b0 [ 16] LoopMax : STRING
0x8a58c4 [ 16] TestingStr : STRING
0x8a58d4 [  4] String : MAGIC STRING [id=31] 
0x8a58d8 [  4] length : MAGIC STRING [id=15] 
0x8a58dc [  8] 0 : STRING
0x8a58e4 [ 12] Init : STRING
0x8a58f0 [ 16] CubeSize : STRING
0x8a5904 [ 16] TimeMax : STRING
0x8a5914 [ 16] TimeAvg : STRING
0x8a5924 [ 16] TimeMin : STRING
0x8a5934 [ 16] TimeTemp : STRING
0x8a5948 [ 16] TimeTotal : STRING
0x8a5958 [ 12] Edge : STRING
0x8a5964 [ 12] NumPx : STRING
0x8a5970 [ 12] sum : STRING
0x8a597c [ 12] vector : STRING
0x8a598c [ 44] Error: bad vector sum for CubeSize =  : STRING
0x8a59b8 [ 20] ; expected  : STRING
0x8a59d0 [ 16]  but got  : STRING
0x8a59e0 [ 16] LoopTime : STRING
0x8a59f0 [ 16]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
  2:             var_decl    0               // var Q;
  3:             var_decl    1               // var MTrans;
  4:             var_decl    2               // var MQube;
  5:             var_decl    3               // var I;
  6:             var_decl    4               // var Origin;
  7:             var_decl    5               // var Testing;
  8:             var_decl    6               // var LoopTimer;
  9:             var_decl    7               // var validation;
 10:             var_decl    8               // var DisplArea;
 11:             var_decl    9               // var i;
 12:          func_decl_n   10    2          // 
 13:                 meta    2   11  255     // 
 14:                 meta    2   12  255     // function DrawLine (From, To);
 15:                 meta    7    0  140     // function end: 155;
 16:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 17:         reg_var_decl  128  152   17     // var tmp128 .. tmp152;
 18:           assignment  130    5   13     // tmp130 = 'V': STRING;
 19:          prop_getter  131   11  130     // tmp131 = From[tmp130];
 20:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 21:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 22:           assignment  136    6  133     // tmp136 = tmp133 : TYPEOF(tmp133);
 23:           assignment  130    5   13     // tmp130 = 'V': STRING;
 24:          prop_getter  131   12  130     // tmp131 = To[tmp130];
 25:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 26:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 27:           assignment  137    6  133     // tmp137 = tmp133 : TYPEOF(tmp133);
 28:           assignment  130    5   13     // tmp130 = 'V': STRING;
 29:          prop_getter  131   11  130     // tmp131 = From[tmp130];
 30:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 31:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 32:           assignment  138    6  133     // tmp138 = tmp133 : TYPEOF(tmp133);
 33:           assignment  130    5   13     // tmp130 = 'V': STRING;
 34:          prop_getter  131   12  130     // tmp131 = To[tmp130];
 35:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 36:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 37:           assignment  139    6  133     // tmp139 = tmp133 : TYPEOF(tmp133);
 38:           assignment  130    5   14     // tmp130 = 'abs': STRING;
 39:          prop_getter  131   15  130     // tmp131 = Math[tmp130];
 40:           assignment  132    6   15     // tmp132 = Math : TYPEOF(Math);
 41:               call_n  133  131    1     // 
 42:                 meta    1    1  132     // 
 43:           assignment  133    6  137     // tmp133 = tmp137 : TYPEOF(tmp137);
 44:         substraction  134  133  136     // tmp134 = tmp133 - tmp136;
 45:                 meta    2  134  255     // tmp133 = tmp131 (this_arg = tmp132, tmp134);
 46:           assignment  140    6  133     // tmp140 = tmp133 : TYPEOF(tmp133);
 47:           assignment  130    5   14     // tmp130 = 'abs': STRING;
 48:          prop_getter  131   15  130     // tmp131 = Math[tmp130];
 49:           assignment  132    6   15     // tmp132 = Math : TYPEOF(Math);
 50:               call_n  133  131    1     // 
 51:                 meta    1    1  132     // 
 52:           assignment  133    6  139     // tmp133 = tmp139 : TYPEOF(tmp139);
 53:         substraction  134  133  138     // tmp134 = tmp133 - tmp138;
 54:                 meta    2  134  255     // tmp133 = tmp131 (this_arg = tmp132, tmp134);
 55:           assignment  141    6  133     // tmp141 = tmp133 : TYPEOF(tmp133);
 56:           assignment  142    6  136     // tmp142 = tmp136 : TYPEOF(tmp136);
 57:           assignment  143    6  138     // tmp143 = tmp138 : TYPEOF(tmp138);
 58:           assignment  130    6  137     // tmp130 = tmp137 : TYPEOF(tmp137);
 59: greater_or_equal_than  131  130  136     // tmp131 = tmp130 >= tmp136;
 60:    is_false_jmp_down  131    0    6     // if (tmp131 == false) goto 66;
 61:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 62:           assignment  144    6  130     // tmp144 = tmp130 : TYPEOF(tmp130);
 63:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 64:           assignment  146    6  130     // tmp146 = tmp130 : TYPEOF(tmp130);
 65:             jmp_down    0    7          // goto 72;
 66:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 67:          unary_minus  131  130          // tmp131 = -tmp130;
 68:           assignment  144    6  131     // tmp144 = tmp131 : TYPEOF(tmp131);
 69:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 70:          unary_minus  131  130          // tmp131 = -tmp130;
 71:           assignment  146    6  131     // tmp146 = tmp131 : TYPEOF(tmp131);
 72:           assignment  130    6  139     // tmp130 = tmp139 : TYPEOF(tmp139);
 73: greater_or_equal_than  131  130  138     // tmp131 = tmp130 >= tmp138;
 74:    is_false_jmp_down  131    0    6     // if (tmp131 == false) goto 80;
 75:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 76:           assignment  145    6  130     // tmp145 = tmp130 : TYPEOF(tmp130);
 77:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 78:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
 79:             jmp_down    0    7          // goto 86;
 80:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 81:          unary_minus  131  130          // tmp131 = -tmp130;
 82:           assignment  145    6  131     // tmp145 = tmp131 : TYPEOF(tmp131);
 83:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 84:          unary_minus  131  130          // tmp131 = -tmp130;
 85:           assignment  147    6  131     // tmp147 = tmp131 : TYPEOF(tmp131);
 86:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
 87: greater_or_equal_than  131  130  141     // tmp131 = tmp130 >= tmp141;
 88:    is_false_jmp_down  131    0   16     // if (tmp131 == false) goto 104;
 89:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 90:           assignment  144    6  130     // tmp144 = tmp130 : TYPEOF(tmp130);
 91:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 92:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
 93:           assignment  148    6  140     // tmp148 = tmp140 : TYPEOF(tmp140);
 94:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
 95:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
 96:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 97:             division  132  130  131     // tmp132 = tmp130 / tmp131;
 98:           assignment  149    6  132     // tmp149 = tmp132 : TYPEOF(tmp132);
 99:           assignment  150    6  141     // tmp150 = tmp141 : TYPEOF(tmp141);
100:           assignment  130    6  141     // tmp130 = tmp141 : TYPEOF(tmp141);
101:           assignment  151    6  140     // tmp151 = tmp140 : TYPEOF(tmp140);
102:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
103:             jmp_down    0   15          // goto 118;
104:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
105:           assignment  146    6  130     // tmp146 = tmp130 : TYPEOF(tmp130);
106:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
107:           assignment  145    6  130     // tmp145 = tmp130 : TYPEOF(tmp130);
108:           assignment  148    6  141     // tmp148 = tmp141 : TYPEOF(tmp141);
109:           assignment  130    6  141     // tmp130 = tmp141 : TYPEOF(tmp141);
110:           assignment  130    6  141     // tmp130 = tmp141 : TYPEOF(tmp141);
111:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
112:             division  132  130  131     // tmp132 = tmp130 / tmp131;
113:           assignment  149    6  132     // tmp149 = tmp132 : TYPEOF(tmp132);
114:           assignment  150    6  140     // tmp150 = tmp140 : TYPEOF(tmp140);
115:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
116:           assignment  151    6  141     // tmp151 = tmp141 : TYPEOF(tmp141);
117:           assignment  130    6  141     // tmp130 = tmp141 : TYPEOF(tmp141);
118:           assignment  130    5    0     // tmp130 = 'round': STRING;
119:          prop_getter  131    1  130     // tmp131 = Math[tmp130];
120:           assignment  132    6    1     // tmp132 = Math : TYPEOF(Math);
121:               call_n  133  131    1     // 
122:                 meta    1    1  132     // 
123:           assignment  133    5    2     // tmp133 = 'LastPx': STRING;
124:          prop_getter  134    3  133     // tmp134 = Q[tmp133];
125:             addition  135  134  151     // tmp135 = tmp134 + tmp151;
126:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
127:           assignment  151    6  133     // tmp151 = tmp133 : TYPEOF(tmp133);
128:           assignment  130    5    0     // tmp130 = 'LastPx': STRING;
129:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
130:           assignment  152    6  131     // tmp152 = tmp131 : TYPEOF(tmp131);
131:             jmp_down    0   17          // goto 148;
132:             addition  149  149  150     // tmp149 = tmp149 + tmp150;
133:           assignment  130    6  149     // tmp130 = tmp149 : TYPEOF(tmp149);
134:           assignment  130    6  149     // tmp130 = tmp149 : TYPEOF(tmp149);
135: greater_or_equal_than  131  130  148     // tmp131 = tmp130 >= tmp148;
136:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 143;
137:         substraction  149  149  148     // tmp149 = tmp149 - tmp148;
138:           assignment  130    6  149     // tmp130 = tmp149 : TYPEOF(tmp149);
139:             addition  142  142  144     // tmp142 = tmp142 + tmp144;
140:           assignment  130    6  142     // tmp130 = tmp142 : TYPEOF(tmp142);
141:             addition  143  143  145     // tmp143 = tmp143 + tmp145;
142:           assignment  130    6  143     // tmp130 = tmp143 : TYPEOF(tmp143);
143:             addition  142  142  146     // tmp142 = tmp142 + tmp146;
144:           assignment  130    6  142     // tmp130 = tmp142 : TYPEOF(tmp142);
145:             addition  143  143  147     // tmp143 = tmp143 + tmp147;
146:           assignment  130    6  143     // tmp130 = tmp143 : TYPEOF(tmp143);
147:            post_incr  131  152          // tmp131 = tmp152++;
148:           assignment  132    6  152     // tmp132 = tmp152 : TYPEOF(tmp152);
149:            less_than  133  132  151     // tmp133 = tmp132 < tmp151;
150:       is_true_jmp_up  133    0   18     // if (tmp133) goto 132;
151:           assignment  130    5    0     // tmp130 = 'LastPx': STRING;
152:          prop_setter    1  130  151     // Q[tmp130] = tmp151;
153:           assignment  132    6  151     // tmp132 = tmp151 : TYPEOF(tmp151);
154:                  ret                    // ret;
155:          func_decl_n    2    2          // 
156:                 meta    2    3  255     // 
157:                 meta    2    4  255     // function CalcCross (V0, V1);
158:                 meta    7    0   46     // function end: 204;
159:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
160:         reg_var_decl  128  143    1     // var tmp128 .. tmp143;
161:          construct_n  130    5    0     // tmp130 = new Array;
162:           assignment  143    6  130     // tmp143 = tmp130 : TYPEOF(tmp130);
163:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
164:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
165:          prop_getter  133    3  132     // tmp133 = V0[tmp132];
166:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
167:          prop_getter  135    4  134     // tmp135 = V1[tmp134];
168:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
169:           assignment  137    1    2     // tmp137 = 2: SMALLINT;
170:          prop_getter  138    3  137     // tmp138 = V0[tmp137];
171:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
172:          prop_getter  140    4  139     // tmp140 = V1[tmp139];
173:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
174:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
175:          prop_setter  143  130  142     // tmp143[tmp130] = tmp142;
176:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
177:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
178:          prop_getter  133    3  132     // tmp133 = V0[tmp132];
179:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
180:          prop_getter  135    4  134     // tmp135 = V1[tmp134];
181:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
182:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
183:          prop_getter  138    3  137     // tmp138 = V0[tmp137];
184:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
185:          prop_getter  140    4  139     // tmp140 = V1[tmp139];
186:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
187:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
188:          prop_setter  143  130  142     // tmp143[tmp130] = tmp142;
189:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
190:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
191:          prop_getter  133    3  132     // tmp133 = V0[tmp132];
192:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
193:          prop_getter  135    0  134     // tmp135 = V1[tmp134];
194:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
195:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
196:          prop_getter  138    1  137     // tmp138 = V0[tmp137];
197:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
198:          prop_getter  140    0  139     // tmp140 = V1[tmp139];
199:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
200:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
201:          prop_setter  143  130  142     // tmp143[tmp130] = tmp142;
202:               retval  143               // return tmp143;
203:                  ret                    // ret;
204:          func_decl_n    2    3          // 
205:                 meta    2    1  255     // 
206:                 meta    2    0  255     // 
207:                 meta    2    3  255     // function CalcNormal (V0, V1, V2);
208:                 meta    7    0   67     // function end: 275;
209:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
210:         reg_var_decl  128  153    4     // var tmp128 .. tmp153;
211:          construct_n  130    4    0     // tmp130 = new Array;
212:           assignment  150    6  130     // tmp150 = tmp130 : TYPEOF(tmp130);
213:          construct_n  130    4    0     // tmp130 = new Array;
214:           assignment  151    6  130     // tmp151 = tmp130 : TYPEOF(tmp130);
215:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
216:           assignment  152    6  130     // tmp152 = tmp130 : TYPEOF(tmp130);
217:             jmp_down    0   10          // goto 227;
218:          prop_getter  131    1  152     // tmp131 = V0[tmp152];
219:          prop_getter  132    0  152     // tmp132 = V1[tmp152];
220:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
221:          prop_setter  150  152  133     // tmp150[tmp152] = tmp133;
222:          prop_getter  131    3  152     // tmp131 = V2[tmp152];
223:          prop_getter  132    0  152     // tmp132 = V1[tmp152];
224:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
225:          prop_setter  151  152  133     // tmp151[tmp152] = tmp133;
226:            post_incr  134  152          // tmp134 = tmp152++;
227:           assignment  135    6  152     // tmp135 = tmp152 : TYPEOF(tmp152);
228:           assignment  136    1    3     // tmp136 = 3: SMALLINT;
229:            less_than  137  135  136     // tmp137 = tmp135 < tmp136;
230:       is_true_jmp_up  137    0   12     // if (tmp137) goto 218;
231:               call_n  130    5    2     // 
232:                 meta    2  150  255     // 
233:                 meta    2  151  255     // tmp130 = CalcCross (tmp150, tmp151);
234:           assignment  150    6  130     // tmp150 = tmp130 : TYPEOF(tmp130);
235:           assignment  130    5    6     // tmp130 = 'sqrt': STRING;
236:          prop_getter  131    7  130     // tmp131 = Math[tmp130];
237:           assignment  132    6    7     // tmp132 = Math : TYPEOF(Math);
238:               call_n  133  131    1     // 
239:                 meta    1    1  132     // 
240:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
241:          prop_getter  134  150  133     // tmp134 = tmp150[tmp133];
242:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
243:          prop_getter  136  150  135     // tmp136 = tmp150[tmp135];
244:       multiplication  137  134  136     // tmp137 = tmp134 * tmp136;
245:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
246:          prop_getter  139  150  138     // tmp139 = tmp150[tmp138];
247:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
248:          prop_getter  141  150  140     // tmp141 = tmp150[tmp140];
249:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
250:             addition  143  137  142     // tmp143 = tmp137 + tmp142;
251:           assignment  144    1    2     // tmp144 = 2: SMALLINT;
252:          prop_getter  145  150  144     // tmp145 = tmp150[tmp144];
253:           assignment  146    1    2     // tmp146 = 2: SMALLINT;
254:          prop_getter  147  150  146     // tmp147 = tmp150[tmp146];
255:       multiplication  148  145  147     // tmp148 = tmp145 * tmp147;
256:             addition  149  143  148     // tmp149 = tmp143 + tmp148;
257:                 meta    2  149  255     // tmp133 = tmp131 (this_arg = tmp132, tmp149);
258:           assignment  153    6  133     // tmp153 = tmp133 : TYPEOF(tmp133);
259:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
260:           assignment  152    6  130     // tmp152 = tmp130 : TYPEOF(tmp130);
261:             jmp_down    0    5          // goto 266;
262:          prop_getter  131  150  152     // tmp131 = tmp150[tmp152];
263:             division  132  131  153     // tmp132 = tmp131 / tmp153;
264:          prop_setter  150  152  132     // tmp150[tmp152] = tmp132;
265:            post_incr  133  152          // tmp133 = tmp152++;
266:           assignment  134    6  152     // tmp134 = tmp152 : TYPEOF(tmp152);
267:           assignment  135    1    3     // tmp135 = 3: SMALLINT;
268:            less_than  136  134  135     // tmp136 = tmp134 < tmp135;
269:       is_true_jmp_up  136    0    7     // if (tmp136) goto 262;
270:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
271:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
272:          prop_setter  150  130  132     // tmp150[tmp130] = tmp132;
273:               retval  150               // return tmp150;
274:                  ret                    // ret;
275:          func_decl_n    0    3          // 
276:                 meta    2    1  255     // 
277:                 meta    2    2  255     // 
278:                 meta    2    3  255     // function CreateP (X, Y, Z);
279:                 meta    7    0   13     // function end: 292;
280:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
281:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
282:         this_binding  130               // tmp130 = this;
283:           assignment  131    5    4     // tmp131 = 'V': STRING;
284:           array_decl  133    0    4     // 
285:                 meta    2    1  255     // 
286:                 meta    2    2  255     // 
287:                 meta    2    3  255     // 
288:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
289:                 meta    2  133  255     // tmp133 = [X, Y, Z, tmp133];
290:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
291:                  ret                    // ret;
292:          func_decl_n    5    2          // 
293:                 meta    2    6  255     // 
294:                 meta    2    7  255     // function MMulti (M1, M2);
295:                 meta    7    0   66     // function end: 361;
296:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
297:         reg_var_decl  128  173    3     // var tmp128 .. tmp173;
298:           array_decl  130    0    4     // 
299:           array_decl  130    0    0     // tmp130 = [];
300:                 meta    2  130  255     // 
301:           array_decl  130    0    0     // tmp130 = [];
302:                 meta    2  130  255     // 
303:           array_decl  130    0    0     // tmp130 = [];
304:                 meta    2  130  255     // 
305:           array_decl  130    0    0     // tmp130 = [];
306:                 meta    2  130  255     // tmp130 = [tmp130];
307:           assignment  171    6  130     // tmp171 = tmp130 : TYPEOF(tmp130);
308:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
309:           assignment  172    6  130     // tmp172 = tmp130 : TYPEOF(tmp130);
310:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
311:           assignment  173    6  130     // tmp173 = tmp130 : TYPEOF(tmp130);
312:             jmp_down    0   43          // goto 355;
313:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
314:           assignment  173    6  130     // tmp173 = tmp130 : TYPEOF(tmp130);
315:             jmp_down    0   35          // goto 350;
316:          prop_getter  130  171  172     // tmp130 = tmp171[tmp172];
317:          prop_getter  132    6  172     // tmp132 = M1[tmp172];
318:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
319:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
320:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
321:          prop_getter  136    0  135     // tmp136 = M2[tmp135];
322:          prop_getter  137  136  173     // tmp137 = tmp136[tmp173];
323:       multiplication  138  134  137     // tmp138 = tmp134 * tmp137;
324:          prop_getter  139    1  172     // tmp139 = M1[tmp172];
325:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
326:          prop_getter  141  139  140     // tmp141 = tmp139[tmp140];
327:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
328:          prop_getter  143    0  142     // tmp143 = M2[tmp142];
329:          prop_getter  144  143  173     // tmp144 = tmp143[tmp173];
330:       multiplication  145  141  144     // tmp145 = tmp141 * tmp144;
331:             addition  146  138  145     // tmp146 = tmp138 + tmp145;
332:          prop_getter  147    1  172     // tmp147 = M1[tmp172];
333:           assignment  148    1    2     // tmp148 = 2: SMALLINT;
334:          prop_getter  149  147  148     // tmp149 = tmp147[tmp148];
335:           assignment  150    1    2     // tmp150 = 2: SMALLINT;
336:          prop_getter  151    0  150     // tmp151 = M2[tmp150];
337:          prop_getter  152  151  173     // tmp152 = tmp151[tmp173];
338:       multiplication  153  149  152     // tmp153 = tmp149 * tmp152;
339:             addition  154  146  153     // tmp154 = tmp146 + tmp153;
340:          prop_getter  155    1  172     // tmp155 = M1[tmp172];
341:           assignment  156    1    3     // tmp156 = 3: SMALLINT;
342:          prop_getter  157  155  156     // tmp157 = tmp155[tmp156];
343:           assignment  158    1    3     // tmp158 = 3: SMALLINT;
344:          prop_getter  159    0  158     // tmp159 = M2[tmp158];
345:          prop_getter  160  159  173     // tmp160 = tmp159[tmp173];
346:       multiplication  161  157  160     // tmp161 = tmp157 * tmp160;
347:             addition  162  154  161     // tmp162 = tmp154 + tmp161;
348:          prop_setter  130  173  162     // tmp130[tmp173] = tmp162;
349:            post_incr  163  173          // tmp163 = tmp173++;
350:           assignment  164    6  173     // tmp164 = tmp173 : TYPEOF(tmp173);
351:           assignment  165    1    4     // tmp165 = 4: SMALLINT;
352:            less_than  166  164  165     // tmp166 = tmp164 < tmp165;
353:       is_true_jmp_up  166    0   37     // if (tmp166) goto 316;
354:            post_incr  167  172          // tmp167 = tmp172++;
355:           assignment  168    6  172     // tmp168 = tmp172 : TYPEOF(tmp172);
356:           assignment  169    1    4     // tmp169 = 4: SMALLINT;
357:            less_than  170  168  169     // tmp170 = tmp168 < tmp169;
358:       is_true_jmp_up  170    0   45     // if (tmp170) goto 313;
359:               retval  171               // return tmp171;
360:                  ret                    // ret;
361:          func_decl_n    2    2          // 
362:                 meta    2    3  255     // 
363:                 meta    2    4  255     // function VMulti (M, V);
364:                 meta    7    0   43     // function end: 407;
365:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
366:         reg_var_decl  128  163    2     // var tmp128 .. tmp163;
367:          construct_n  130    5    0     // tmp130 = new Array;
368:           assignment  162    6  130     // tmp162 = tmp130 : TYPEOF(tmp130);
369:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
370:           assignment  163    6  130     // tmp163 = tmp130 : TYPEOF(tmp130);
371:             jmp_down    0   30          // goto 401;
372:          prop_getter  131    3  163     // tmp131 = M[tmp163];
373:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
374:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
375:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
376:          prop_getter  135    4  134     // tmp135 = V[tmp134];
377:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
378:          prop_getter  137    3  163     // tmp137 = M[tmp163];
379:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
380:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
381:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
382:          prop_getter  141    4  140     // tmp141 = V[tmp140];
383:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
384:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
385:          prop_getter  144    0  163     // tmp144 = M[tmp163];
386:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
387:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
388:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
389:          prop_getter  148    1  147     // tmp148 = V[tmp147];
390:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
391:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
392:          prop_getter  151    0  163     // tmp151 = M[tmp163];
393:           assignment  152    1    3     // tmp152 = 3: SMALLINT;
394:          prop_getter  153  151  152     // tmp153 = tmp151[tmp152];
395:           assignment  154    1    3     // tmp154 = 3: SMALLINT;
396:          prop_getter  155    1  154     // tmp155 = V[tmp154];
397:       multiplication  156  153  155     // tmp156 = tmp153 * tmp155;
398:             addition  157  150  156     // tmp157 = tmp150 + tmp156;
399:          prop_setter  162  163  157     // tmp162[tmp163] = tmp157;
400:            post_incr  158  163          // tmp158 = tmp163++;
401:           assignment  159    6  163     // tmp159 = tmp163 : TYPEOF(tmp163);
402:           assignment  160    1    4     // tmp160 = 4: SMALLINT;
403:            less_than  161  159  160     // tmp161 = tmp159 < tmp160;
404:       is_true_jmp_up  161    0   32     // if (tmp161) goto 372;
405:               retval  162               // return tmp162;
406:                  ret                    // ret;
407:          func_decl_n    2    2          // 
408:                 meta    2    0  255     // 
409:                 meta    2    1  255     // function VMulti2 (M, V);
410:                 meta    7    0   36     // function end: 446;
411:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
412:         reg_var_decl  128  156    2     // var tmp128 .. tmp156;
413:          construct_n  130    3    0     // tmp130 = new Array;
414:           assignment  155    6  130     // tmp155 = tmp130 : TYPEOF(tmp130);
415:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
416:           assignment  156    6  130     // tmp156 = tmp130 : TYPEOF(tmp130);
417:             jmp_down    0   23          // goto 440;
418:          prop_getter  131    0  156     // tmp131 = M[tmp156];
419:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
420:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
421:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
422:          prop_getter  135    1  134     // tmp135 = V[tmp134];
423:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
424:          prop_getter  137    0  156     // tmp137 = M[tmp156];
425:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
426:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
427:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
428:          prop_getter  141    1  140     // tmp141 = V[tmp140];
429:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
430:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
431:          prop_getter  144    0  156     // tmp144 = M[tmp156];
432:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
433:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
434:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
435:          prop_getter  148    1  147     // tmp148 = V[tmp147];
436:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
437:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
438:          prop_setter  155  156  150     // tmp155[tmp156] = tmp150;
439:            post_incr  151  156          // tmp151 = tmp156++;
440:           assignment  152    6  156     // tmp152 = tmp156 : TYPEOF(tmp156);
441:           assignment  153    1    3     // tmp153 = 3: SMALLINT;
442:            less_than  154  152  153     // tmp154 = tmp152 < tmp153;
443:       is_true_jmp_up  154    0   25     // if (tmp154) goto 418;
444:               retval  155               // return tmp155;
445:                  ret                    // ret;
446:          func_decl_n    4    2          // 
447:                 meta    2    5  255     // 
448:                 meta    2    0  255     // function MAdd (M1, M2);
449:                 meta    7    0   40     // function end: 489;
450:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
451:         reg_var_decl  128  147    3     // var tmp128 .. tmp147;
452:           array_decl  130    0    4     // 
453:           array_decl  130    0    0     // tmp130 = [];
454:                 meta    2  130  255     // 
455:           array_decl  130    0    0     // tmp130 = [];
456:                 meta    2  130  255     // 
457:           array_decl  130    0    0     // tmp130 = [];
458:                 meta    2  130  255     // 
459:           array_decl  130    0    0     // tmp130 = [];
460:                 meta    2  130  255     // tmp130 = [tmp130];
461:           assignment  145    6  130     // tmp145 = tmp130 : TYPEOF(tmp130);
462:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
463:           assignment  146    6  130     // tmp146 = tmp130 : TYPEOF(tmp130);
464:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
465:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
466:             jmp_down    0   17          // goto 483;
467:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
468:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
469:             jmp_down    0    9          // goto 478;
470:          prop_getter  130  145  146     // tmp130 = tmp145[tmp146];
471:          prop_getter  132    1  146     // tmp132 = M1[tmp146];
472:          prop_getter  133  132  147     // tmp133 = tmp132[tmp147];
473:          prop_getter  134    0  146     // tmp134 = M2[tmp146];
474:          prop_getter  135  134  147     // tmp135 = tmp134[tmp147];
475:             addition  136  133  135     // tmp136 = tmp133 + tmp135;
476:          prop_setter  130  147  136     // tmp130[tmp147] = tmp136;
477:            post_incr  137  147          // tmp137 = tmp147++;
478:           assignment  138    6  147     // tmp138 = tmp147 : TYPEOF(tmp147);
479:           assignment  139    1    4     // tmp139 = 4: SMALLINT;
480:            less_than  140  138  139     // tmp140 = tmp138 < tmp139;
481:       is_true_jmp_up  140    0   11     // if (tmp140) goto 470;
482:            post_incr  141  146          // tmp141 = tmp146++;
483:           assignment  142    6  146     // tmp142 = tmp146 : TYPEOF(tmp146);
484:           assignment  143    1    4     // tmp143 = 4: SMALLINT;
485:            less_than  144  142  143     // tmp144 = tmp142 < tmp143;
486:       is_true_jmp_up  144    0   19     // if (tmp144) goto 467;
487:               retval  145               // return tmp145;
488:                  ret                    // ret;
489:          func_decl_n    2    4          // 
490:                 meta    2    3  255     // 
491:                 meta    2    4  255     // 
492:                 meta    2    5  255     // 
493:                 meta    2    6  255     // function Translate (M, Dx, Dy, Dz);
494:                 meta    7    0   47     // function end: 541;
495:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
496:         reg_var_decl  128  131    1     // var tmp128 .. tmp131;
497:           array_decl  130    0    4     // 
498:           array_decl  130    0    4     // 
499:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
500:                 meta    2  130  255     // 
501:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
502:                 meta    2  130  255     // 
503:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
504:                 meta    2  130  255     // 
505:                 meta    2    4  255     // tmp130 = [tmp130, tmp130, tmp130, Dx];
506:                 meta    2  130  255     // 
507:           array_decl  130    0    4     // 
508:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
509:                 meta    2  130  255     // 
510:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
511:                 meta    2  130  255     // 
512:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
513:                 meta    2  130  255     // 
514:                 meta    2    0  255     // tmp130 = [tmp130, tmp130, tmp130, Dy];
515:                 meta    2  130  255     // 
516:           array_decl  130    0    4     // 
517:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
518:                 meta    2  130  255     // 
519:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
520:                 meta    2  130  255     // 
521:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
522:                 meta    2  130  255     // 
523:                 meta    2    1  255     // tmp130 = [tmp130, tmp130, tmp130, Dz];
524:                 meta    2  130  255     // 
525:           array_decl  130    0    4     // 
526:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
527:                 meta    2  130  255     // 
528:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
529:                 meta    2  130  255     // 
530:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
531:                 meta    2  130  255     // 
532:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
533:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
534:                 meta    2  130  255     // 
535:           assignment  131    6  130     // tmp131 = tmp130 : TYPEOF(tmp130);
536:               call_n  130    2    2     // 
537:                 meta    2  131  255     // 
538:                 meta    2    3  255     // tmp130 = MMulti (tmp131, M);
539:               retval  130               // return tmp130;
540:                  ret                    // ret;
541:          func_decl_n    4    2          // 
542:                 meta    2    3  255     // 
543:                 meta    2    5  255     // function RotateX (M, Phi);
544:                 meta    7    0   68     // function end: 612;
545:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
546:         reg_var_decl  128  138    4     // var tmp128 .. tmp138;
547:           assignment  135    6    5     // tmp135 = Phi : TYPEOF(Phi);
548:           assignment  130    5    6     // tmp130 = 'PI': STRING;
549:          prop_getter  131    7  130     // tmp131 = Math[tmp130];
550:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
551:             division  133  131  132     // tmp133 = tmp131 / tmp132;
552:       multiplication  135  135  133     // tmp135 = tmp135 * tmp133;
553:           assignment  134    6  135     // tmp134 = tmp135 : TYPEOF(tmp135);
554:           assignment  130    5    8     // tmp130 = 'cos': STRING;
555:          prop_getter  131    7  130     // tmp131 = Math[tmp130];
556:           assignment  132    6    7     // tmp132 = Math : TYPEOF(Math);
557:               call_n  133  131    1     // 
558:                 meta    1    1  132     // 
559:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
560:           assignment  136    6  133     // tmp136 = tmp133 : TYPEOF(tmp133);
561:           assignment  130    5    9     // tmp130 = 'sin': STRING;
562:          prop_getter  131    7  130     // tmp131 = Math[tmp130];
563:           assignment  132    6    7     // tmp132 = Math : TYPEOF(Math);
564:               call_n  133  131    1     // 
565:                 meta    1    1  132     // 
566:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
567:           assignment  137    6  133     // tmp137 = tmp133 : TYPEOF(tmp133);
568:           array_decl  130    0    4     // 
569:           array_decl  130    0    4     // 
570:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
571:                 meta    2  130  255     // 
572:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
573:                 meta    2  130  255     // 
574:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
575:                 meta    2  130  255     // 
576:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
577:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
578:                 meta    2  130  255     // 
579:           array_decl  130    0    4     // 
580:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
581:                 meta    2  130  255     // 
582:                 meta    2  136  255     // 
583:          unary_minus  130  137          // tmp130 = -tmp137;
584:                 meta    2  130  255     // 
585:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
586:                 meta    2  130  255     // tmp130 = [tmp130, tmp136, tmp130, tmp130];
587:                 meta    2  130  255     // 
588:           array_decl  130    0    4     // 
589:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
590:                 meta    2  130  255     // 
591:                 meta    2  137  255     // 
592:                 meta    2  136  255     // 
593:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
594:                 meta    2  130  255     // tmp130 = [tmp130, tmp137, tmp136, tmp130];
595:                 meta    2  130  255     // 
596:           array_decl  130    0    4     // 
597:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
598:                 meta    2  130  255     // 
599:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
600:                 meta    2  130  255     // 
601:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
602:                 meta    2  130  255     // 
603:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
604:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
605:                 meta    2  130  255     // 
606:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
607:               call_n  130    0    2     // 
608:                 meta    2  138  255     // 
609:                 meta    2    1  255     // tmp130 = MMulti (tmp138, M);
610:               retval  130               // return tmp130;
611:                  ret                    // ret;
612:          func_decl_n    2    2          // 
613:                 meta    2    1  255     // 
614:                 meta    2    3  255     // function RotateY (M, Phi);
615:                 meta    7    0   68     // function end: 683;
616:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
617:         reg_var_decl  128  138    4     // var tmp128 .. tmp138;
618:           assignment  135    6    3     // tmp135 = Phi : TYPEOF(Phi);
619:           assignment  130    5    4     // tmp130 = 'PI': STRING;
620:          prop_getter  131    5  130     // tmp131 = Math[tmp130];
621:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
622:             division  133  131  132     // tmp133 = tmp131 / tmp132;
623:       multiplication  135  135  133     // tmp135 = tmp135 * tmp133;
624:           assignment  134    6  135     // tmp134 = tmp135 : TYPEOF(tmp135);
625:           assignment  130    5    6     // tmp130 = 'cos': STRING;
626:          prop_getter  131    5  130     // tmp131 = Math[tmp130];
627:           assignment  132    6    5     // tmp132 = Math : TYPEOF(Math);
628:               call_n  133  131    1     // 
629:                 meta    1    1  132     // 
630:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
631:           assignment  136    6  133     // tmp136 = tmp133 : TYPEOF(tmp133);
632:           assignment  130    5    7     // tmp130 = 'sin': STRING;
633:          prop_getter  131    5  130     // tmp131 = Math[tmp130];
634:           assignment  132    6    5     // tmp132 = Math : TYPEOF(Math);
635:               call_n  133  131    1     // 
636:                 meta    1    1  132     // 
637:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
638:           assignment  137    6  133     // tmp137 = tmp133 : TYPEOF(tmp133);
639:           array_decl  130    0    4     // 
640:           array_decl  130    0    4     // 
641:                 meta    2  136  255     // 
642:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
643:                 meta    2  130  255     // 
644:                 meta    2  137  255     // 
645:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
646:                 meta    2  130  255     // tmp130 = [tmp136, tmp130, tmp137, tmp130];
647:                 meta    2  130  255     // 
648:           array_decl  130    0    4     // 
649:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
650:                 meta    2  130  255     // 
651:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
652:                 meta    2  130  255     // 
653:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
654:                 meta    2  130  255     // 
655:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
656:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
657:                 meta    2  130  255     // 
658:           array_decl  130    0    4     // 
659:          unary_minus  130  137          // tmp130 = -tmp137;
660:                 meta    2  130  255     // 
661:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
662:                 meta    2  130  255     // 
663:                 meta    2  136  255     // 
664:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
665:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp136, tmp130];
666:                 meta    2  130  255     // 
667:           array_decl  130    0    4     // 
668:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
669:                 meta    2  130  255     // 
670:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
671:                 meta    2  130  255     // 
672:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
673:                 meta    2  130  255     // 
674:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
675:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
676:                 meta    2  130  255     // 
677:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
678:               call_n  130    0    2     // 
679:                 meta    2  138  255     // 
680:                 meta    2    1  255     // tmp130 = MMulti (tmp138, M);
681:               retval  130               // return tmp130;
682:                  ret                    // ret;
683:          func_decl_n    2    2          // 
684:                 meta    2    1  255     // 
685:                 meta    2    3  255     // function RotateZ (M, Phi);
686:                 meta    7    0   68     // function end: 754;
687:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
688:         reg_var_decl  128  138    4     // var tmp128 .. tmp138;
689:           assignment  135    6    3     // tmp135 = Phi : TYPEOF(Phi);
690:           assignment  130    5    4     // tmp130 = 'PI': STRING;
691:          prop_getter  131    5  130     // tmp131 = Math[tmp130];
692:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
693:             division  133  131  132     // tmp133 = tmp131 / tmp132;
694:       multiplication  135  135  133     // tmp135 = tmp135 * tmp133;
695:           assignment  134    6  135     // tmp134 = tmp135 : TYPEOF(tmp135);
696:           assignment  130    5    6     // tmp130 = 'cos': STRING;
697:          prop_getter  131    5  130     // tmp131 = Math[tmp130];
698:           assignment  132    6    5     // tmp132 = Math : TYPEOF(Math);
699:               call_n  133  131    1     // 
700:                 meta    1    1  132     // 
701:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
702:           assignment  136    6  133     // tmp136 = tmp133 : TYPEOF(tmp133);
703:           assignment  130    5    7     // tmp130 = 'sin': STRING;
704:          prop_getter  131    0  130     // tmp131 = Math[tmp130];
705:           assignment  132    6    0     // tmp132 = Math : TYPEOF(Math);
706:               call_n  133  131    1     // 
707:                 meta    1    1  132     // 
708:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
709:           assignment  137    6  133     // tmp137 = tmp133 : TYPEOF(tmp133);
710:           array_decl  130    0    4     // 
711:           array_decl  130    0    4     // 
712:                 meta    2  136  255     // 
713:          unary_minus  130  137          // tmp130 = -tmp137;
714:                 meta    2  130  255     // 
715:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
716:                 meta    2  130  255     // 
717:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
718:                 meta    2  130  255     // tmp130 = [tmp136, tmp130, tmp130, tmp130];
719:                 meta    2  130  255     // 
720:           array_decl  130    0    4     // 
721:                 meta    2  137  255     // 
722:                 meta    2  136  255     // 
723:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
724:                 meta    2  130  255     // 
725:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
726:                 meta    2  130  255     // tmp130 = [tmp137, tmp136, tmp130, tmp130];
727:                 meta    2  130  255     // 
728:           array_decl  130    0    4     // 
729:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
730:                 meta    2  130  255     // 
731:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
732:                 meta    2  130  255     // 
733:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
734:                 meta    2  130  255     // 
735:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
736:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
737:                 meta    2  130  255     // 
738:           array_decl  130    0    4     // 
739:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
740:                 meta    2  130  255     // 
741:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
742:                 meta    2  130  255     // 
743:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
744:                 meta    2  130  255     // 
745:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
746:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
747:                 meta    2  130  255     // 
748:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
749:               call_n  130    1    2     // 
750:                 meta    2  138  255     // 
751:                 meta    2    2  255     // tmp130 = MMulti (tmp138, M);
752:               retval  130               // return tmp130;
753:                  ret                    // ret;
754:          func_decl_n    3    0          // function DrawQube ();
755:                 meta    7    2   17     // function end: 1284;
756:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
757:         reg_var_decl  128  138    2     // var tmp128 .. tmp138;
758:          construct_n  130    4    0     // tmp130 = new Array;
759:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
760:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
761:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
762:           assignment  130    5    5     // tmp130 = 'LastPx': STRING;
763:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
764:          prop_setter    6  130  132     // Q[tmp130] = tmp132;
765:             jmp_down    0    9          // goto 774;
766:               call_n  131    7    2     // 
767:                 meta    2    8  255     // 
768:           assignment  131    5    0     // tmp131 = 'Normal': STRING;
769:          prop_getter  132    1  131     // tmp132 = Q[tmp131];
770:          prop_getter  133  132  138     // tmp133 = tmp132[tmp138];
771:                 meta    2  133  255     // tmp131 = VMulti2 (MQube, tmp133);
772:          prop_setter  137  138  131     // tmp137[tmp138] = tmp131;
773:            post_decr  132  138          // tmp132 = tmp138--;
774:           assignment  133    6  138     // tmp133 = tmp138 : TYPEOF(tmp138);
775:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
776:          unary_minus  135  134          // tmp135 = -tmp134;
777:         greater_than  136  133  135     // tmp136 = tmp133 > tmp135;
778:       is_true_jmp_up  136    0   12     // if (tmp136) goto 766;
779:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
780:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
781:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
782:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
783:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
784:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
785:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 858;
786:           assignment  130    5    2     // tmp130 = 'Line': STRING;
787:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
788:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
789:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
790:          logical_not  134  133          // tmp134 = ! tmp133;
791:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 804;
792:               call_n  130    3    2     // 
793:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
794:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
795:                 meta    2  131  255     // 
796:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
797:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
798:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
799:           assignment  130    5    2     // tmp130 = 'Line': STRING;
800:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
801:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
802:           assignment  134    0    4     // tmp134 = true: SIMPLE;
803:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
804:           assignment  130    5    2     // tmp130 = 'Line': STRING;
805:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
806:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
807:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
808:          logical_not  134  133          // tmp134 = ! tmp133;
809:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 822;
810:               call_n  130    3    2     // 
811:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
812:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
813:                 meta    2  131  255     // 
814:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
815:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
816:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
817:           assignment  130    5    2     // tmp130 = 'Line': STRING;
818:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
819:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
820:           assignment  134    0    4     // tmp134 = true: SIMPLE;
821:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
822:           assignment  130    5    2     // tmp130 = 'Line': STRING;
823:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
824:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
825:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
826:          logical_not  134  133          // tmp134 = ! tmp133;
827:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 840;
828:               call_n  130    3    2     // 
829:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
830:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
831:                 meta    2  131  255     // 
832:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
833:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
834:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
835:           assignment  130    5    1     // tmp130 = 'Line': STRING;
836:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
837:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
838:           assignment  134    0    4     // tmp134 = true: SIMPLE;
839:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
840:           assignment  130    5    1     // tmp130 = 'Line': STRING;
841:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
842:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
843:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
844:          logical_not  134  133          // tmp134 = ! tmp133;
845:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 858;
846:               call_n  130    2    2     // 
847:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
848:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
849:                 meta    2  131  255     // 
850:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
851:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
852:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
853:           assignment  130    5    1     // tmp130 = 'Line': STRING;
854:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
855:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
856:           assignment  134    0    4     // tmp134 = true: SIMPLE;
857:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
858:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
859:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
860:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
861:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
862:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
863:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
864:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 937;
865:           assignment  130    5    1     // tmp130 = 'Line': STRING;
866:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
867:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
868:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
869:          logical_not  134  133          // tmp134 = ! tmp133;
870:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 883;
871:               call_n  130    2    2     // 
872:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
873:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
874:                 meta    2  131  255     // 
875:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
876:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
877:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
878:           assignment  130    5    1     // tmp130 = 'Line': STRING;
879:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
880:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
881:           assignment  134    0    4     // tmp134 = true: SIMPLE;
882:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
883:           assignment  130    5    1     // tmp130 = 'Line': STRING;
884:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
885:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
886:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
887:          logical_not  134  133          // tmp134 = ! tmp133;
888:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 901;
889:               call_n  130    2    2     // 
890:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
891:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
892:                 meta    2  131  255     // 
893:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
894:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
895:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
896:           assignment  130    5    0     // tmp130 = 'Line': STRING;
897:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
898:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
899:           assignment  134    0    4     // tmp134 = true: SIMPLE;
900:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
901:           assignment  130    5    0     // tmp130 = 'Line': STRING;
902:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
903:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
904:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
905:          logical_not  134  133          // tmp134 = ! tmp133;
906:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 919;
907:               call_n  130    2    2     // 
908:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
909:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
910:                 meta    2  131  255     // 
911:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
912:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
913:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
914:           assignment  130    5    0     // tmp130 = 'Line': STRING;
915:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
916:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
917:           assignment  134    0    4     // tmp134 = true: SIMPLE;
918:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
919:           assignment  130    5    0     // tmp130 = 'Line': STRING;
920:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
921:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
922:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
923:          logical_not  134  133          // tmp134 = ! tmp133;
924:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 937;
925:               call_n  130    2    2     // 
926:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
927:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
928:                 meta    2  131  255     // 
929:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
930:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
931:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
932:           assignment  130    5    0     // tmp130 = 'Line': STRING;
933:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
934:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
935:           assignment  134    0    4     // tmp134 = true: SIMPLE;
936:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
937:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
938:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
939:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
940:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
941:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
942:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
943:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 1016;
944:           assignment  130    5    0     // tmp130 = 'Line': STRING;
945:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
946:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
947:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
948:          logical_not  134  133          // tmp134 = ! tmp133;
949:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 962;
950:               call_n  130    2    2     // 
951:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
952:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
953:                 meta    2  131  255     // 
954:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
955:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
956:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
957:           assignment  130    5    0     // tmp130 = 'Line': STRING;
958:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
959:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
960:           assignment  134    0    4     // tmp134 = true: SIMPLE;
961:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
962:           assignment  130    5    0     // tmp130 = 'Line': STRING;
963:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
964:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
965:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
966:          logical_not  134  133          // tmp134 = ! tmp133;
967:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 980;
968:               call_n  130    2    2     // 
969:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
970:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
971:                 meta    2  131  255     // 
972:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
973:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
974:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
975:           assignment  130    5    0     // tmp130 = 'Line': STRING;
976:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
977:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
978:           assignment  134    0    4     // tmp134 = true: SIMPLE;
979:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
980:           assignment  130    5    0     // tmp130 = 'Line': STRING;
981:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
982:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
983:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
984:          logical_not  134  133          // tmp134 = ! tmp133;
985:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 998;
986:               call_n  130    2    2     // 
987:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
988:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
989:                 meta    2  131  255     // 
990:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
991:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
992:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
993:           assignment  130    5    0     // tmp130 = 'Line': STRING;
994:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
995:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
996:           assignment  134    0    4     // tmp134 = true: SIMPLE;
997:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
998:           assignment  130    5    0     // tmp130 = 'Line': STRING;
999:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1000:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
1001:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1002:          logical_not  134  133          // tmp134 = ! tmp133;
1003:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1016;
1004:               call_n  130    2    2     // 
1005:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
1006:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1007:                 meta    2  131  255     // 
1008:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1009:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1010:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1011:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1012:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1013:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
1014:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1015:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1016:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1017:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
1018:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1019:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1020:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1021:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
1022:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 1095;
1023:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1024:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1025:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
1026:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1027:          logical_not  134  133          // tmp134 = ! tmp133;
1028:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1041;
1029:               call_n  130    1    2     // 
1030:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1031:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1032:                 meta    2  131  255     // 
1033:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1034:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1035:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1036:           assignment  130    5    2     // tmp130 = 'Line': STRING;
1037:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1038:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
1039:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1040:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1041:           assignment  130    5    2     // tmp130 = 'Line': STRING;
1042:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1043:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
1044:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1045:          logical_not  134  133          // tmp134 = ! tmp133;
1046:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1059;
1047:               call_n  130    1    2     // 
1048:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1049:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1050:                 meta    2  131  255     // 
1051:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1052:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1053:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1054:           assignment  130    5    2     // tmp130 = 'Line': STRING;
1055:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1056:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
1057:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1058:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1059:           assignment  130    5    2     // tmp130 = 'Line': STRING;
1060:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1061:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1062:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1063:          logical_not  134  133          // tmp134 = ! tmp133;
1064:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1077;
1065:               call_n  130    1    2     // 
1066:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1067:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1068:                 meta    2  131  255     // 
1069:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1070:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1071:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1072:           assignment  130    5    2     // tmp130 = 'Line': STRING;
1073:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1074:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1075:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1076:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1077:           assignment  130    5    2     // tmp130 = 'Line': STRING;
1078:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1079:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
1080:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1081:          logical_not  134  133          // tmp134 = ! tmp133;
1082:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1095;
1083:               call_n  130    1    2     // 
1084:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1085:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1086:                 meta    2  131  255     // 
1087:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1088:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1089:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1090:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1091:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1092:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
1093:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1094:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1095:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1096:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
1097:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1098:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1099:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1100:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
1101:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 1174;
1102:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1103:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1104:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
1105:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1106:          logical_not  134  133          // tmp134 = ! tmp133;
1107:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1120;
1108:               call_n  130    2    2     // 
1109:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1110:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1111:                 meta    2  131  255     // 
1112:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1113:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1114:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1115:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1116:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1117:           assignment  132    1   11     // tmp132 = 11: SMALLINT;
1118:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1119:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1120:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1121:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1122:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
1123:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1124:          logical_not  134  133          // tmp134 = ! tmp133;
1125:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1138;
1126:               call_n  130    2    2     // 
1127:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1128:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1129:                 meta    2  131  255     // 
1130:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1131:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1132:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1133:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1134:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1135:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
1136:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1137:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1138:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1139:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1140:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
1141:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1142:          logical_not  134  133          // tmp134 = ! tmp133;
1143:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1156;
1144:               call_n  130    2    2     // 
1145:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1146:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1147:                 meta    2  131  255     // 
1148:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
1149:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1150:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1151:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1152:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1153:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
1154:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1155:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1156:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1157:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1158:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
1159:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1160:          logical_not  134  133          // tmp134 = ! tmp133;
1161:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1174;
1162:               call_n  130    2    2     // 
1163:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
1164:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1165:                 meta    2  131  255     // 
1166:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1167:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1168:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1169:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1170:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1171:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
1172:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1173:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1174:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1175:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
1176:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1177:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1178:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1179:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
1180:    is_false_jmp_down  135    0   73     // if (tmp135 == false) goto 1253;
1181:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1182:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1183:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
1184:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1185:          logical_not  134  133          // tmp134 = ! tmp133;
1186:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1199;
1187:               call_n  130    2    2     // 
1188:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1189:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1190:                 meta    2  131  255     // 
1191:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1192:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1193:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1194:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1195:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1196:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
1197:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1198:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1199:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1200:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1201:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1202:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1203:          logical_not  134  133          // tmp134 = ! tmp133;
1204:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1217;
1205:               call_n  130    2    2     // 
1206:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1207:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1208:                 meta    2  131  255     // 
1209:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
1210:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1211:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1212:           assignment  130    5    1     // tmp130 = 'Line': STRING;
1213:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1214:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1215:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1216:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1217:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1218:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1219:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
1220:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1221:          logical_not  134  133          // tmp134 = ! tmp133;
1222:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1235;
1223:               call_n  130    2    2     // 
1224:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
1225:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1226:                 meta    2  131  255     // 
1227:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
1228:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1229:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1230:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1231:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1232:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
1233:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1234:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1235:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1236:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1237:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1238:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1239:          logical_not  134  133          // tmp134 = ! tmp133;
1240:    is_false_jmp_down  134    0   13     // if (tmp134 == false) goto 1253;
1241:               call_n  130    2    2     // 
1242:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
1243:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1244:                 meta    2  131  255     // 
1245:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1246:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1247:                 meta    2  131  255     // tmp130 = DrawLine (tmp131, tmp131);
1248:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1249:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1250:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1251:           assignment  134    0    4     // tmp134 = true: SIMPLE;
1252:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1253:           assignment  130    5    0     // tmp130 = 'Line': STRING;
1254:           array_decl  132    0   12     // 
1255:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1256:                 meta    2  132  255     // 
1257:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1258:                 meta    2  132  255     // 
1259:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1260:                 meta    2  132  255     // 
1261:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1262:                 meta    2  132  255     // 
1263:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1264:                 meta    2  132  255     // 
1265:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1266:                 meta    2  132  255     // 
1267:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1268:                 meta    2  132  255     // 
1269:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1270:                 meta    2  132  255     // 
1271:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1272:                 meta    2  132  255     // 
1273:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1274:                 meta    2  132  255     // 
1275:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1276:                 meta    2  132  255     // 
1277:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1278:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132];
1279:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1280:           assignment  130    5    0     // tmp130 = 'LastPx': STRING;
1281:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1282:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1283:                  ret                    // ret;
1284:          func_decl_n    2    0          // function Loop ();
1285:                 meta    7    0  119     // function end: 1404;
1286:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
1287:         reg_var_decl  128  140    2     // var tmp128 .. tmp140;
1288:           assignment  130    5    3     // tmp130 = 'LoopCount': STRING;
1289:          prop_getter  131    4  130     // tmp131 = Testing[tmp130];
1290:           assignment  132    5    5     // tmp132 = 'LoopMax': STRING;
1291:          prop_getter  133    4  132     // tmp133 = Testing[tmp132];
1292:         greater_than  134  131  133     // tmp134 = tmp131 > tmp133;
1293:    is_false_jmp_down  134    0    2     // if (tmp134 == false) goto 1295;
1294:                  ret                    // ret;
1295:               call_n  130    6    1     // 
1296:           assignment  130    5    3     // tmp130 = 'LoopCount': STRING;
1297:          prop_getter  131    4  130     // tmp131 = Testing[tmp130];
1298:                 meta    2  131  255     // tmp130 = String (tmp131);
1299:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
1300:             jmp_down    0    4          // goto 1304;
1301:           assignment  130    5    7     // tmp130 = '0': STRING;
1302:             addition  131  130  139     // tmp131 = tmp130 + tmp139;
1303:           assignment  139    6  131     // tmp139 = tmp131 : TYPEOF(tmp131);
1304:           assignment  132    5    8     // tmp132 = 'length': STRING;
1305:          prop_getter  133  139  132     // tmp133 = tmp139[tmp132];
1306:           assignment  134    1    3     // tmp134 = 3: SMALLINT;
1307:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
1308:       is_true_jmp_up  135    0    7     // if (tmp135) goto 1301;
1309:               call_n  130    9    4     // 
1310:                 meta    2   10  255     // 
1311:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1312:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1313:           assignment  132    5   11     // tmp132 = 'V': STRING;
1314:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1315:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1316:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1317:          unary_minus  136  135          // tmp136 = -tmp135;
1318:                 meta    2  136  255     // 
1319:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1320:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1321:           assignment  132    5   11     // tmp132 = 'V': STRING;
1322:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1323:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
1324:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1325:          unary_minus  136  135          // tmp136 = -tmp135;
1326:                 meta    2  136  255     // 
1327:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1328:          prop_getter  131    1  130     // tmp131 = Q[tmp130];
1329:           assignment  132    5   11     // tmp132 = 'V': STRING;
1330:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1331:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
1332:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1333:          unary_minus  136  135          // tmp136 = -tmp135;
1334:                 meta    2  136  255     // tmp130 = Translate (I, tmp136, tmp136, tmp136);
1335:           assignment   12    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1336:               call_n  130   13    2     // 
1337:                 meta    2   12  255     // 
1338:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1339:                 meta    2  130  255     // tmp130 = RotateX (MTrans, tmp130);
1340:           assignment   12    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1341:               call_n  130   14    2     // 
1342:                 meta    2   12  255     // 
1343:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1344:                 meta    2  130  255     // tmp130 = RotateY (MTrans, tmp130);
1345:           assignment    0    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1346:               call_n  130    1    2     // 
1347:                 meta    2    0  255     // 
1348:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1349:                 meta    2  130  255     // tmp130 = RotateZ (MTrans, tmp130);
1350:           assignment    0    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1351:               call_n  130    2    4     // 
1352:                 meta    2    0  255     // 
1353:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1354:          prop_getter  131    3  130     // tmp131 = Q[tmp130];
1355:           assignment  132    5    4     // tmp132 = 'V': STRING;
1356:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1357:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1358:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1359:                 meta    2  135  255     // 
1360:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1361:          prop_getter  131    3  130     // tmp131 = Q[tmp130];
1362:           assignment  132    5    4     // tmp132 = 'V': STRING;
1363:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1364:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
1365:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1366:                 meta    2  135  255     // 
1367:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1368:          prop_getter  131    3  130     // tmp131 = Q[tmp130];
1369:           assignment  132    5    4     // tmp132 = 'V': STRING;
1370:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1371:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
1372:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1373:                 meta    2  135  255     // tmp130 = Translate (MTrans, tmp135, tmp135, tmp135);
1374:           assignment    0    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1375:               call_n  130    5    2     // 
1376:                 meta    2    0  255     // 
1377:                 meta    2    6  255     // tmp130 = MMulti (MTrans, MQube);
1378:           assignment    6    6  130     // MQube = tmp130 : TYPEOF(tmp130);
1379:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1380:           assignment  140    6  130     // tmp140 = tmp130 : TYPEOF(tmp130);
1381:             jmp_down    0   11          // goto 1392;
1382:          prop_getter  130    3  140     // tmp130 = Q[tmp140];
1383:           assignment  131    5    4     // tmp131 = 'V': STRING;
1384:               call_n  133    7    2     // 
1385:                 meta    2    0  255     // 
1386:          prop_getter  133    3  140     // tmp133 = Q[tmp140];
1387:           assignment  134    5    4     // tmp134 = 'V': STRING;
1388:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1389:                 meta    2  135  255     // tmp133 = VMulti (MTrans, tmp135);
1390:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
1391:            post_decr  134  140          // tmp134 = tmp140--;
1392:           assignment  135    6  140     // tmp135 = tmp140 : TYPEOF(tmp140);
1393:           assignment  136    1    1     // tmp136 = 1: SMALLINT;
1394:          unary_minus  137  136          // tmp137 = -tmp136;
1395:         greater_than  138  135  137     // tmp138 = tmp135 > tmp137;
1396:       is_true_jmp_up  138    0   14     // if (tmp138) goto 1382;
1397:               call_n  130    8    0     // 
1398:           assignment  130    5    9     // tmp130 = 'LoopCount': STRING;
1399:          prop_getter  131   10  130     // tmp131 = Testing[tmp130];
1400:            post_incr  132  131          // tmp132 = tmp131++;
1401:          prop_setter   10  130  131     // Testing[tmp130] = tmp131;
1402:               call_n  130   11    0     // 
1403:                  ret                    // ret;
1404:          func_decl_n   12    1          // 
1405:                 meta    2   13  255     // function Init (CubeSize);
1406:                 meta    7    1  208     // function end: 1870;
1407:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
1408:         reg_var_decl  128  145    4     // var tmp128 .. tmp145;
1409:           assignment  130    5    0     // tmp130 = 'V': STRING;
1410:           array_decl  132    0    4     // 
1411:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
1412:                 meta    2  132  255     // 
1413:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
1414:                 meta    2  132  255     // 
1415:           assignment  132    1   20     // tmp132 = 20: SMALLINT;
1416:                 meta    2  132  255     // 
1417:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1418:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132, tmp132];
1419:          prop_setter    1  130  132     // Origin[tmp130] = tmp132;
1420:           assignment  130    5    2     // tmp130 = 'LoopCount': STRING;
1421:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1422:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1423:           assignment  130    5    4     // tmp130 = 'LoopMax': STRING;
1424:           assignment  132    1   50     // tmp132 = 50: SMALLINT;
1425:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1426:           assignment  130    5    5     // tmp130 = 'TimeMax': STRING;
1427:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1428:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1429:           assignment  130    5    6     // tmp130 = 'TimeAvg': STRING;
1430:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1431:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1432:           assignment  130    5    7     // tmp130 = 'TimeMin': STRING;
1433:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1434:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1435:           assignment  130    5    8     // tmp130 = 'TimeTemp': STRING;
1436:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1437:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1438:           assignment  130    5    9     // tmp130 = 'TimeTotal': STRING;
1439:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1440:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1441:           assignment  130    5   10     // tmp130 = 'Init': STRING;
1442:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1443:          prop_setter    3  130  132     // Testing[tmp130] = tmp132;
1444:           array_decl  130    0    4     // 
1445:           array_decl  130    0    4     // 
1446:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1447:                 meta    2  130  255     // 
1448:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1449:                 meta    2  130  255     // 
1450:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1451:                 meta    2  130  255     // 
1452:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1453:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1454:                 meta    2  130  255     // 
1455:           array_decl  130    0    4     // 
1456:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1457:                 meta    2  130  255     // 
1458:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1459:                 meta    2  130  255     // 
1460:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1461:                 meta    2  130  255     // 
1462:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1463:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1464:                 meta    2  130  255     // 
1465:           array_decl  130    0    4     // 
1466:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1467:                 meta    2  130  255     // 
1468:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1469:                 meta    2  130  255     // 
1470:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1471:                 meta    2  130  255     // 
1472:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1473:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1474:                 meta    2  130  255     // 
1475:           array_decl  130    0    4     // 
1476:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1477:                 meta    2  130  255     // 
1478:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1479:                 meta    2  130  255     // 
1480:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1481:                 meta    2  130  255     // 
1482:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1483:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1484:                 meta    2  130  255     // 
1485:           assignment    0    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1486:           array_decl  130    0    4     // 
1487:           array_decl  130    0    4     // 
1488:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1489:                 meta    2  130  255     // 
1490:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1491:                 meta    2  130  255     // 
1492:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1493:                 meta    2  130  255     // 
1494:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1495:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1496:                 meta    2  130  255     // 
1497:           array_decl  130    0    4     // 
1498:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1499:                 meta    2  130  255     // 
1500:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1501:                 meta    2  130  255     // 
1502:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1503:                 meta    2  130  255     // 
1504:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1505:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1506:                 meta    2  130  255     // 
1507:           array_decl  130    0    4     // 
1508:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1509:                 meta    2  130  255     // 
1510:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1511:                 meta    2  130  255     // 
1512:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1513:                 meta    2  130  255     // 
1514:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1515:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1516:                 meta    2  130  255     // 
1517:           array_decl  130    0    4     // 
1518:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1519:                 meta    2  130  255     // 
1520:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1521:                 meta    2  130  255     // 
1522:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1523:                 meta    2  130  255     // 
1524:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1525:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1526:                 meta    2  130  255     // 
1527:           assignment    1    6  130     // MQube = tmp130 : TYPEOF(tmp130);
1528:           array_decl  130    0    4     // 
1529:           array_decl  130    0    4     // 
1530:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1531:                 meta    2  130  255     // 
1532:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1533:                 meta    2  130  255     // 
1534:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1535:                 meta    2  130  255     // 
1536:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1537:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1538:                 meta    2  130  255     // 
1539:           array_decl  130    0    4     // 
1540:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1541:                 meta    2  130  255     // 
1542:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1543:                 meta    2  130  255     // 
1544:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1545:                 meta    2  130  255     // 
1546:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1547:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1548:                 meta    2  130  255     // 
1549:           array_decl  130    0    4     // 
1550:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1551:                 meta    2  130  255     // 
1552:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1553:                 meta    2  130  255     // 
1554:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1555:                 meta    2  130  255     // 
1556:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1557:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1558:                 meta    2  130  255     // 
1559:           array_decl  130    0    4     // 
1560:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1561:                 meta    2  130  255     // 
1562:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1563:                 meta    2  130  255     // 
1564:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1565:                 meta    2  130  255     // 
1566:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1567:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1568:                 meta    2  130  255     // 
1569:           assignment    0    6  130     // I = tmp130 : TYPEOF(tmp130);
1570:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1571:          construct_n  132    1    3     // 
1572:          unary_minus  132    2          // tmp132 = -CubeSize;
1573:                 meta    2  132  255     // 
1574:          unary_minus  132    2          // tmp132 = -CubeSize;
1575:                 meta    2  132  255     // 
1576:                 meta    2    2  255     // tmp132 = new CreateP (tmp132, tmp132, CubeSize);
1577:          prop_setter    3  130  132     // Q[tmp130] = tmp132;
1578:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1579:          construct_n  132    1    3     // 
1580:          unary_minus  132    2          // tmp132 = -CubeSize;
1581:                 meta    2  132  255     // 
1582:                 meta    2    2  255     // 
1583:                 meta    2    2  255     // tmp132 = new CreateP (tmp132, CubeSize, CubeSize);
1584:          prop_setter    3  130  132     // Q[tmp130] = tmp132;
1585:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
1586:          construct_n  132    1    3     // 
1587:                 meta    2    2  255     // 
1588:                 meta    2    2  255     // 
1589:                 meta    2    2  255     // tmp132 = new CreateP (CubeSize, CubeSize, CubeSize);
1590:          prop_setter    3  130  132     // Q[tmp130] = tmp132;
1591:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1592:          construct_n  132    1    3     // 
1593:                 meta    2    2  255     // 
1594:          unary_minus  132    2          // tmp132 = -CubeSize;
1595:                 meta    2  132  255     // 
1596:                 meta    2    2  255     // tmp132 = new CreateP (CubeSize, tmp132, CubeSize);
1597:          prop_setter    3  130  132     // Q[tmp130] = tmp132;
1598:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1599:          construct_n  132    1    3     // 
1600:          unary_minus  132    0          // tmp132 = -CubeSize;
1601:                 meta    2  132  255     // 
1602:          unary_minus  132    0          // tmp132 = -CubeSize;
1603:                 meta    2  132  255     // 
1604:          unary_minus  132    0          // tmp132 = -CubeSize;
1605:                 meta    2  132  255     // tmp132 = new CreateP (tmp132, tmp132, tmp132);
1606:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1607:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1608:          construct_n  132    2    3     // 
1609:          unary_minus  132    0          // tmp132 = -CubeSize;
1610:                 meta    2  132  255     // 
1611:                 meta    2    0  255     // 
1612:          unary_minus  132    0          // tmp132 = -CubeSize;
1613:                 meta    2  132  255     // tmp132 = new CreateP (tmp132, CubeSize, tmp132);
1614:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1615:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
1616:          construct_n  132    2    3     // 
1617:                 meta    2    0  255     // 
1618:                 meta    2    0  255     // 
1619:          unary_minus  132    0          // tmp132 = -CubeSize;
1620:                 meta    2  132  255     // tmp132 = new CreateP (CubeSize, CubeSize, tmp132);
1621:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1622:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
1623:          construct_n  132    2    3     // 
1624:                 meta    2    0  255     // 
1625:          unary_minus  132    0          // tmp132 = -CubeSize;
1626:                 meta    2  132  255     // 
1627:          unary_minus  132    0          // tmp132 = -CubeSize;
1628:                 meta    2  132  255     // tmp132 = new CreateP (CubeSize, tmp132, tmp132);
1629:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1630:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1631:          construct_n  132    2    3     // 
1632:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1633:                 meta    2  132  255     // 
1634:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1635:                 meta    2  132  255     // 
1636:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1637:                 meta    2  132  255     // tmp132 = new CreateP (tmp132, tmp132, tmp132);
1638:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1639:           assignment  130    5    3     // tmp130 = 'Edge': STRING;
1640:           array_decl  132    0    6     // 
1641:           array_decl  132    0    3     // 
1642:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1643:                 meta    2  132  255     // 
1644:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1645:                 meta    2  132  255     // 
1646:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1647:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1648:                 meta    2  132  255     // 
1649:           array_decl  132    0    3     // 
1650:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
1651:                 meta    2  132  255     // 
1652:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1653:                 meta    2  132  255     // 
1654:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
1655:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1656:                 meta    2  132  255     // 
1657:           array_decl  132    0    3     // 
1658:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
1659:                 meta    2  132  255     // 
1660:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
1661:                 meta    2  132  255     // 
1662:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1663:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1664:                 meta    2  132  255     // 
1665:           array_decl  132    0    3     // 
1666:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
1667:                 meta    2  132  255     // 
1668:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1669:                 meta    2  132  255     // 
1670:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1671:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1672:                 meta    2  132  255     // 
1673:           array_decl  132    0    3     // 
1674:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
1675:                 meta    2  132  255     // 
1676:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1677:                 meta    2  132  255     // 
1678:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
1679:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1680:                 meta    2  132  255     // 
1681:           array_decl  132    0    3     // 
1682:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1683:                 meta    2  132  255     // 
1684:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1685:                 meta    2  132  255     // 
1686:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
1687:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1688:                 meta    2  132  255     // 
1689:          prop_setter    0  130  132     // Q[tmp130] = tmp132;
1690:           assignment  130    5    1     // tmp130 = 'Normal': STRING;
1691:          construct_n  132    2    0     // tmp132 = new Array;
1692:          prop_setter    0  130  132     // Q[tmp130] = tmp132;
1693:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1694:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
1695:             jmp_down    0   33          // goto 1728;
1696:           assignment  130    5    1     // tmp130 = 'Normal': STRING;
1697:          prop_getter  131    0  130     // tmp131 = Q[tmp130];
1698:               call_n  133    3    3     // 
1699:           assignment  133    5    4     // tmp133 = 'Edge': STRING;
1700:          prop_getter  134    0  133     // tmp134 = Q[tmp133];
1701:          prop_getter  135  134  142     // tmp135 = tmp134[tmp142];
1702:           assignment  136    1    0     // tmp136 = 0: SMALLINT;
1703:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
1704:          prop_getter  138    0  137     // tmp138 = Q[tmp137];
1705:           assignment  139    5    5     // tmp139 = 'V': STRING;
1706:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
1707:                 meta    2  140  255     // 
1708:           assignment  133    5    4     // tmp133 = 'Edge': STRING;
1709:          prop_getter  134    0  133     // tmp134 = Q[tmp133];
1710:          prop_getter  135  134  142     // tmp135 = tmp134[tmp142];
1711:           assignment  136    1    1     // tmp136 = 1: SMALLINT;
1712:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
1713:          prop_getter  138    0  137     // tmp138 = Q[tmp137];
1714:           assignment  139    5    5     // tmp139 = 'V': STRING;
1715:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
1716:                 meta    2  140  255     // 
1717:           assignment  133    5    4     // tmp133 = 'Edge': STRING;
1718:          prop_getter  134    0  133     // tmp134 = Q[tmp133];
1719:          prop_getter  135  134  142     // tmp135 = tmp134[tmp142];
1720:           assignment  136    1    2     // tmp136 = 2: SMALLINT;
1721:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
1722:          prop_getter  138    0  137     // tmp138 = Q[tmp137];
1723:           assignment  139    5    5     // tmp139 = 'V': STRING;
1724:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
1725:                 meta    2  140  255     // tmp133 = CalcNormal (tmp140, tmp140, tmp140);
1726:          prop_setter  131  142  133     // tmp131[tmp142] = tmp133;
1727:            post_incr  134  142          // tmp134 = tmp142++;
1728:           assignment  135    6  142     // tmp135 = tmp142 : TYPEOF(tmp142);
1729:           assignment  136    5    0     // tmp136 = 'Edge': STRING;
1730:          prop_getter  137    1  136     // tmp137 = Q[tmp136];
1731:           assignment  138    5    2     // tmp138 = 'length': STRING;
1732:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
1733:            less_than  140  135  139     // tmp140 = tmp135 < tmp139;
1734:       is_true_jmp_up  140    0   38     // if (tmp140) goto 1696;
1735:           assignment  130    5    3     // tmp130 = 'Line': STRING;
1736:           array_decl  132    0   12     // 
1737:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1738:                 meta    2  132  255     // 
1739:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1740:                 meta    2  132  255     // 
1741:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1742:                 meta    2  132  255     // 
1743:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1744:                 meta    2  132  255     // 
1745:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1746:                 meta    2  132  255     // 
1747:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1748:                 meta    2  132  255     // 
1749:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1750:                 meta    2  132  255     // 
1751:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1752:                 meta    2  132  255     // 
1753:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1754:                 meta    2  132  255     // 
1755:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1756:                 meta    2  132  255     // 
1757:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1758:                 meta    2  132  255     // 
1759:           assignment  132    0    3     // tmp132 = false: SIMPLE;
1760:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132, tmp132];
1761:          prop_setter    1  130  132     // Q[tmp130] = tmp132;
1762:           assignment  130    5    4     // tmp130 = 'NumPx': STRING;
1763:           assignment  132    1    9     // tmp132 = 9: SMALLINT;
1764:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
1765:       multiplication  134  132  133     // tmp134 = tmp132 * tmp133;
1766:       multiplication  135  134    5     // tmp135 = tmp134 * CubeSize;
1767:          prop_setter    1  130  135     // Q[tmp130] = tmp135;
1768:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1769:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
1770:             jmp_down    0    9          // goto 1779;
1771:               call_n  130    6    3     // 
1772:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1773:                 meta    2  130  255     // 
1774:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1775:                 meta    2  130  255     // 
1776:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1777:                 meta    2  130  255     // tmp130 = CreateP (tmp130, tmp130, tmp130);
1778:            post_incr  131  142          // tmp131 = tmp142++;
1779:           assignment  132    6  142     // tmp132 = tmp142 : TYPEOF(tmp142);
1780:           assignment  133    5    4     // tmp133 = 'NumPx': STRING;
1781:          prop_getter  134    1  133     // tmp134 = Q[tmp133];
1782:            less_than  135  132  134     // tmp135 = tmp132 < tmp134;
1783:       is_true_jmp_up  135    0   12     // if (tmp135) goto 1771;
1784:               call_n  130    7    4     // 
1785:                 meta    2    8  255     // 
1786:           assignment  130    5    9     // tmp130 = 'V': STRING;
1787:          prop_getter  131   10  130     // tmp131 = Origin[tmp130];
1788:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1789:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1790:                 meta    2  133  255     // 
1791:           assignment  130    5    9     // tmp130 = 'V': STRING;
1792:          prop_getter  131    0  130     // tmp131 = Origin[tmp130];
1793:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1794:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1795:                 meta    2  133  255     // 
1796:           assignment  130    5    1     // tmp130 = 'V': STRING;
1797:          prop_getter  131    0  130     // tmp131 = Origin[tmp130];
1798:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1799:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1800:                 meta    2  133  255     // tmp130 = Translate (MTrans, tmp133, tmp133, tmp133);
1801:           assignment    2    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1802:               call_n  130    3    2     // 
1803:                 meta    2    2  255     // 
1804:                 meta    2    4  255     // tmp130 = MMulti (MTrans, MQube);
1805:           assignment    4    6  130     // MQube = tmp130 : TYPEOF(tmp130);
1806:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1807:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
1808:             jmp_down    0   11          // goto 1819;
1809:          prop_getter  130    5  142     // tmp130 = Q[tmp142];
1810:           assignment  131    5    1     // tmp131 = 'V': STRING;
1811:               call_n  133    6    2     // 
1812:                 meta    2    2  255     // 
1813:          prop_getter  133    5  142     // tmp133 = Q[tmp142];
1814:           assignment  134    5    1     // tmp134 = 'V': STRING;
1815:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1816:                 meta    2  135  255     // tmp133 = VMulti (MTrans, tmp135);
1817:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
1818:            post_incr  134  142          // tmp134 = tmp142++;
1819:           assignment  135    6  142     // tmp135 = tmp142 : TYPEOF(tmp142);
1820:           assignment  136    1    9     // tmp136 = 9: SMALLINT;
1821:            less_than  137  135  136     // tmp137 = tmp135 < tmp136;
1822:       is_true_jmp_up  137    0   13     // if (tmp137) goto 1809;
1823:               call_n  130    7    0     // 
1824:           assignment  130    5    8     // tmp130 = 'Init': STRING;
1825:           assignment  132    0    4     // tmp132 = true: SIMPLE;
1826:          prop_setter    9  130  132     // Testing[tmp130] = tmp132;
1827:               call_n  130   10    0     // 
1828:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1829:           assignment  143    6  130     // tmp143 = tmp130 : TYPEOF(tmp130);
1830:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1831:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
1832:             jmp_down    0   18          // goto 1850;
1833:          prop_getter  130    5  142     // tmp130 = Q[tmp142];
1834:           assignment  131    5    1     // tmp131 = 'V': STRING;
1835:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
1836:           assignment  144    6  132     // tmp144 = tmp132 : TYPEOF(tmp132);
1837:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1838:           assignment  145    6  130     // tmp145 = tmp130 : TYPEOF(tmp130);
1839:             jmp_down    0    5          // goto 1844;
1840:          prop_getter  130  144  145     // tmp130 = tmp144[tmp145];
1841:             addition  143  143  130     // tmp143 = tmp143 + tmp130;
1842:           assignment  131    6  143     // tmp131 = tmp143 : TYPEOF(tmp143);
1843:             pre_incr  132  145          // tmp132 = ++tmp145;
1844:           assignment  133    6  145     // tmp133 = tmp145 : TYPEOF(tmp145);
1845:           assignment  134    5   11     // tmp134 = 'length': STRING;
1846:          prop_getter  135  144  134     // tmp135 = tmp144[tmp134];
1847:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
1848:       is_true_jmp_up  136    0    8     // if (tmp136) goto 1840;
1849:             pre_incr  137  142          // tmp137 = ++tmp142;
1850:           assignment  138    6  142     // tmp138 = tmp142 : TYPEOF(tmp142);
1851:           assignment  139    5   11     // tmp139 = 'length': STRING;
1852:          prop_getter  140    5  139     // tmp140 = Q[tmp139];
1853:            less_than  141  138  140     // tmp141 = tmp138 < tmp140;
1854:       is_true_jmp_up  141    0   21     // if (tmp141) goto 1833;
1855:           assignment  130    6  143     // tmp130 = tmp143 : TYPEOF(tmp143);
1856:          prop_getter  131    0    1     // tmp131 = validation[CubeSize];
1857:      not_equal_value  132  130  131     // tmp132 = tmp130 != tmp131;
1858:    is_false_jmp_down  132    0   11     // if (tmp132 == false) goto 1869;
1859:           assignment  130    5    2     // tmp130 = 'Error: bad vector sum for CubeSize = ': STRING;
1860:             addition  131  130    1     // tmp131 = tmp130 + CubeSize;
1861:           assignment  132    5    3     // tmp132 = '; expected ': STRING;
1862:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
1863:          prop_getter  134    0    1     // tmp134 = validation[CubeSize];
1864:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
1865:           assignment  136    5    4     // tmp136 = ' but got ': STRING;
1866:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
1867:             addition  138  137  143     // tmp138 = tmp137 + tmp143;
1868:          throw_value  138               // throw tmp138;
1869:                  ret                    // ret;
1870:          construct_n  130    5    0     // tmp130 = new Array;
1871:           assignment    6    6  130     // Q = tmp130 : TYPEOF(tmp130);
1872:          construct_n  130    5    0     // tmp130 = new Array;
1873:           assignment    7    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1874:          construct_n  130    5    0     // tmp130 = new Array;
1875:           assignment    8    6  130     // MQube = tmp130 : TYPEOF(tmp130);
1876:          construct_n  130    5    0     // tmp130 = new Array;
1877:           assignment    9    6  130     // I = tmp130 : TYPEOF(tmp130);
1878:          construct_n  130   10    0     // tmp130 = new Object;
1879:           assignment   11    6  130     // Origin = tmp130 : TYPEOF(tmp130);
1880:          construct_n  130   10    0     // tmp130 = new Object;
1881:           assignment   12    6  130     // Testing = tmp130 : TYPEOF(tmp130);
1882:             obj_decl  130    0    4     // 
1883:           assignment  130    3   13     // tmp130 = 2889.0000000000045: NUMBER;
1884:           assignment  131    3   14     // tmp131 = 20: NUMBER;
1885:                 meta    3  131  130     // 
1886:           assignment  130    3   15     // tmp130 = 2889.0000000000054: NUMBER;
1887:           assignment  131    3   16     // tmp131 = 40: NUMBER;
1888:                 meta    3  131  130     // 
1889:           assignment  130    3   17     // tmp130 = 2889.000000000005: NUMBER;
1890:           assignment  131    3   18     // tmp131 = 80: NUMBER;
1891:                 meta    3  131  130     // 
1892:           assignment  130    3   15     // tmp130 = 2889.0000000000054: NUMBER;
1893:           assignment  131    3   19     // tmp131 = 160: NUMBER;
1894:                 meta    3  131  130     // tmp130 = {tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130};
1895:           assignment    0    6  130     // validation = tmp130 : TYPEOF(tmp130);
1896:          construct_n  130   10    0     // tmp130 = new Object;
1897:           assignment   20    6  130     // DisplArea = tmp130 : TYPEOF(tmp130);
1898:           assignment  130    5   21     // tmp130 = 'Width': STRING;
1899:           assignment  132    3   22     // tmp132 = 300: NUMBER;
1900:          prop_setter   20  130  132     // DisplArea[tmp130] = tmp132;
1901:           assignment  130    5   23     // tmp130 = 'Height': STRING;
1902:           assignment  132    3   22     // tmp132 = 300: NUMBER;
1903:          prop_setter   20  130  132     // DisplArea[tmp130] = tmp132;
1904:           assignment  130    1   20     // tmp130 = 20: SMALLINT;
1905:           assignment   24    6  130     // i = tmp130 : TYPEOF(tmp130);
1906:             jmp_down    0    5          // goto 1911;
1907:               call_n  130   25    1     // 
1908:                 meta    2   24  255     // tmp130 = Init (i);
1909:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
1910:       multiplication   24   24  131     // i = i * tmp131;
1911:           assignment  132    6   24     // tmp132 = i : TYPEOF(i);
1912:           assignment  133    1  160     // tmp133 = 160: SMALLINT;
1913:   less_or_equal_than  134  132  133     // tmp134 = tmp132 <= tmp133;
1914:       is_true_jmp_up  134    0    7     // if (tmp134) goto 1907;
1915:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1916:           assignment    6    6  130     // Q = tmp130 : TYPEOF(tmp130);
1917:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1918:           assignment    7    6  130     // MTrans = tmp130 : TYPEOF(tmp130);
1919:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1920:           assignment    0    6  130     // MQube = tmp130 : TYPEOF(tmp130);
1921:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1922:           assignment    1    6  130     // I = tmp130 : TYPEOF(tmp130);
1923:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1924:           assignment    2    6  130     // Origin = tmp130 : TYPEOF(tmp130);
1925:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1926:           assignment    3    6  130     // Testing = tmp130 : TYPEOF(tmp130);
1927:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1928:           assignment    4    6  130     // LoopTime = tmp130 : TYPEOF(tmp130);
1929:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1930:           assignment    5    6  130     // DisplArea = tmp130 : TYPEOF(tmp130);
1931:                  ret                    // ret;
