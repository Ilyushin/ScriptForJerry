// for(var a,b=0,c=1;3>=c;c++){for(var d=1E4*(1<<c),e=b,f=d,g=Array(d+1),h=void 0,k=void 0,l=void 0,h=2;h<=f;h++)g[h]=!0;l=0;for(h=2;h<=f;h++)if(g[h]){for(k=h+h;k<=f;k+=h)g[k]=!1;l++}b=e+l}a=b;if(14302!=a)throw"ERROR: bad result: expected 14302 but got "+a;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
  4:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
  5:           assignment  254    6  131     // c = tmp131 : TYPEOF(tmp131);
  6:             jmp_down  253  253          // goto 65027;
  7:           assignment  130    3  254     // tmp130 = 10000: NUMBER;
  8:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
  9:         b_shift_left  132  131  254     // tmp132 = tmp131 << c;
 10:       multiplication  133  130  132     // tmp133 = tmp130 * tmp132;
 11:           assignment  254    6  133     // d = tmp133 : TYPEOF(tmp133);
 12:           assignment  254    6  254     // e = b : TYPEOF(b);
 13:           assignment  254    6  254     // f = d : TYPEOF(d);
 14:               call_n  253  254  253     // 
 15:           assignment  134    6  254     // tmp134 = d : TYPEOF(d);
 16:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 17:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 18:                 meta    2  136  255     // 
 14:               call_n  134  254    1     //  // REWRITE
 19:           assignment  254    6  134     // g = tmp134 : TYPEOF(tmp134);
 20:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 21:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 22:           assignment  136    0    1     // tmp136 = undefined: SIMPLE;
 23:           assignment  254    6  136     // h = tmp136 : TYPEOF(tmp136);
 24:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
 25:           assignment  138    6  137     // tmp138 = tmp137 : TYPEOF(tmp137);
 26:           assignment  138    0    1     // tmp138 = undefined: SIMPLE;
 27:           assignment  254    6  138     // k = tmp138 : TYPEOF(tmp138);
 28:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 29:           assignment  140    6  139     // tmp140 = tmp139 : TYPEOF(tmp139);
 30:           assignment  140    0    1     // tmp140 = undefined: SIMPLE;
 31:           assignment  254    6  140     // l = tmp140 : TYPEOF(tmp140);
 32:           assignment  141    1    2     // tmp141 = 2: SMALLINT;
 33:           assignment  254    6  141     // h = tmp141 : TYPEOF(tmp141);
 34:             jmp_down  253  253          // goto 65055;
 35:          prop_getter  130  254  254     // tmp130 = g[h];
 35:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 36:          logical_not  132  131          // tmp132 = ! tmp131;
 37:          prop_setter  254  254  132     // g[h] = tmp132;
 38:            post_incr  133  254          // tmp133 = h++;
 34:             jmp_down    0    5          // goto 39; // REWRITE
 39:           assignment  134    6  254     // tmp134 = h : TYPEOF(h);
 40:   less_or_equal_than  135  134  254     // tmp135 = tmp134 <= f;
 41:       is_true_jmp_up  135    0    6     // if (tmp135) goto 35;
 42:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 43:           assignment  254    6  130     // l = tmp130 : TYPEOF(tmp130);
 44:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 45:           assignment  254    6  130     // h = tmp130 : TYPEOF(tmp130);
 46:             jmp_down  253  253          // goto 65067;
 47:          prop_getter  130  254  254     // tmp130 = g[h];
 48:    is_false_jmp_down  130  253  253     // if (tmp130 == false) goto 65069;
 49:           assignment  130    6  254     // tmp130 = h : TYPEOF(h);
 50:             addition  131  130  254     // tmp131 = tmp130 + h;
 51:           assignment  254    6  131     // k = tmp131 : TYPEOF(tmp131);
 52:             jmp_down  253  253          // goto 65073;
 53:          prop_getter  130  254  254     // tmp130 = g[k];
 53:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 54:          logical_not  132  131          // tmp132 = ! tmp131;
 55:          prop_setter  254  254  132     // g[k] = tmp132;
 56:             addition  254  254  254     // k = k + h;
 52:             jmp_down    0    5          // goto 57; // REWRITE
 57:           assignment  133    6  254     // tmp133 = k : TYPEOF(k);
 58:   less_or_equal_than  134  133  254     // tmp134 = tmp133 <= f;
 59:       is_true_jmp_up  134    0    6     // if (tmp134) goto 53;
 60:            post_incr  130  254          // tmp130 = l++;
 48:    is_false_jmp_down  130    0   13     // if (tmp130 == false) goto 61; // REWRITE
 61:            post_incr  131  254          // tmp131 = h++;
 46:             jmp_down    0   16          // goto 62; // REWRITE
 62:           assignment  132    6  254     // tmp132 = h : TYPEOF(h);
 63:   less_or_equal_than  133  132  254     // tmp133 = tmp132 <= f;
 64:       is_true_jmp_up  133    0   17     // if (tmp133) goto 47;
 65:           assignment  130    6  254     // tmp130 = e : TYPEOF(e);
 66:             addition  131  130  254     // tmp131 = tmp130 + l;
 67:           assignment  254    6  131     // b = tmp131 : TYPEOF(tmp131);
 68:            post_incr  132  254          // tmp132 = c++;
  6:             jmp_down    0   63          // goto 69; // REWRITE
 69:           assignment  133    1    3     // tmp133 = 3: SMALLINT;
 70: greater_or_equal_than  134  133  254     // tmp134 = tmp133 >= c;
 71:       is_true_jmp_up  134    0   64     // if (tmp134) goto 7;
 72:           assignment  254    6  254     // a = b : TYPEOF(b);
 73:           assignment  130    6  254     // tmp130 = b : TYPEOF(b);
 74:           assignment  130    3  254     // tmp130 = 14302: NUMBER;
 75:      not_equal_value  131  130  254     // tmp131 = tmp130 != a;
 76:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65097;
 77:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected 14302 but got ': STRING;
 78:             addition  131  130  254     // tmp131 = tmp130 + a;
 79:          throw_value  131               // throw tmp131;
// 
 76:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 80; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  141    0     // var tmp128 .. tmp141; // REWRITE
 80:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] a : STRING
0x8a54cc [  8] b : STRING
0x8a54d4 [  8] c : STRING
0x8a54dc [  8] d : STRING
0x8a54e4 [ 12] 10000 : NUMBER
0x8a54f0 [  8] e : STRING
0x8a54f8 [  8] f : STRING
0x8a5504 [  4] g : MAGIC STRING [id=206] 
0x8a5508 [  4] Array : MAGIC STRING [id=29] 
0x8a550c [  8] h : STRING
0x8a5514 [  8] k : STRING
0x8a551c [  8] l : STRING
0x8a5524 [ 12] 14302 : NUMBER
0x8a5530 [ 48] ERROR: bad result: expected 14302 but got  : STRING
0x8a5564 [ 28]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  141    0     // var tmp128 .. tmp141;
  2:             var_decl    0               // var a;
  3:             var_decl    1               // var b;
  4:             var_decl    2               // var c;
  5:             var_decl    3               // var d;
  6:             var_decl    4               // var e;
  7:             var_decl    5               // var f;
  8:             var_decl    6               // var g;
  9:             var_decl    7               // var h;
 10:             var_decl    8               // var k;
 11:             var_decl    9               // var l;
 12:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 13:           assignment    1    6  130     // b = tmp130 : TYPEOF(tmp130);
 14:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 15:           assignment    2    6  131     // c = tmp131 : TYPEOF(tmp131);
 16:             jmp_down    0   63          // goto 79;
 17:           assignment  130    3   10     // tmp130 = 10000: NUMBER;
 18:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 19:         b_shift_left  132  131    2     // tmp132 = tmp131 << c;
 20:       multiplication  133  130  132     // tmp133 = tmp130 * tmp132;
 21:           assignment    3    6  133     // d = tmp133 : TYPEOF(tmp133);
 22:           assignment    4    6    1     // e = b : TYPEOF(b);
 23:           assignment    5    6    3     // f = d : TYPEOF(d);
 24:               call_n  134   11    1     // 
 25:           assignment  134    6    3     // tmp134 = d : TYPEOF(d);
 26:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 27:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 28:                 meta    2  136  255     // tmp134 = Array (tmp136);
 29:           assignment    6    6  134     // g = tmp134 : TYPEOF(tmp134);
 30:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 31:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 32:           assignment  136    0    1     // tmp136 = undefined: SIMPLE;
 33:           assignment    7    6  136     // h = tmp136 : TYPEOF(tmp136);
 34:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
 35:           assignment  138    6  137     // tmp138 = tmp137 : TYPEOF(tmp137);
 36:           assignment  138    0    1     // tmp138 = undefined: SIMPLE;
 37:           assignment    8    6  138     // k = tmp138 : TYPEOF(tmp138);
 38:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 39:           assignment  140    6  139     // tmp140 = tmp139 : TYPEOF(tmp139);
 40:           assignment  140    0    1     // tmp140 = undefined: SIMPLE;
 41:           assignment    9    6  140     // l = tmp140 : TYPEOF(tmp140);
 42:           assignment  141    1    2     // tmp141 = 2: SMALLINT;
 43:           assignment    7    6  141     // h = tmp141 : TYPEOF(tmp141);
 44:             jmp_down    0    5          // goto 49;
 45:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 46:          logical_not  132  131          // tmp132 = ! tmp131;
 47:          prop_setter    6    7  132     // g[h] = tmp132;
 48:            post_incr  133    7          // tmp133 = h++;
 49:           assignment  134    6    7     // tmp134 = h : TYPEOF(h);
 50:   less_or_equal_than  135  134    5     // tmp135 = tmp134 <= f;
 51:       is_true_jmp_up  135    0    6     // if (tmp135) goto 45;
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:           assignment    9    6  130     // l = tmp130 : TYPEOF(tmp130);
 54:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 55:           assignment    7    6  130     // h = tmp130 : TYPEOF(tmp130);
 56:             jmp_down    0   16          // goto 72;
 57:          prop_getter  130    6    7     // tmp130 = g[h];
 58:    is_false_jmp_down  130    0   13     // if (tmp130 == false) goto 71;
 59:           assignment  130    6    7     // tmp130 = h : TYPEOF(h);
 60:             addition  131  130    7     // tmp131 = tmp130 + h;
 61:           assignment    8    6  131     // k = tmp131 : TYPEOF(tmp131);
 62:             jmp_down    0    5          // goto 67;
 63:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 64:          logical_not  132  131          // tmp132 = ! tmp131;
 65:          prop_setter    0    1  132     // g[k] = tmp132;
 66:             addition    1    1    2     // k = k + h;
 67:           assignment  133    6    1     // tmp133 = k : TYPEOF(k);
 68:   less_or_equal_than  134  133    3     // tmp134 = tmp133 <= f;
 69:       is_true_jmp_up  134    0    6     // if (tmp134) goto 63;
 70:            post_incr  130    4          // tmp130 = l++;
 71:            post_incr  131    2          // tmp131 = h++;
 72:           assignment  132    6    2     // tmp132 = h : TYPEOF(h);
 73:   less_or_equal_than  133  132    3     // tmp133 = tmp132 <= f;
 74:       is_true_jmp_up  133    0   17     // if (tmp133) goto 57;
 75:           assignment  130    6    5     // tmp130 = e : TYPEOF(e);
 76:             addition  131  130    4     // tmp131 = tmp130 + l;
 77:           assignment    6    6  131     // b = tmp131 : TYPEOF(tmp131);
 78:            post_incr  132    7          // tmp132 = c++;
 79:           assignment  133    1    3     // tmp133 = 3: SMALLINT;
 80: greater_or_equal_than  134  133    7     // tmp134 = tmp133 >= c;
 81:       is_true_jmp_up  134    0   64     // if (tmp134) goto 17;
 82:           assignment    8    6    6     // a = b : TYPEOF(b);
 83:           assignment  130    6    6     // tmp130 = b : TYPEOF(b);
 84:           assignment  130    3    9     // tmp130 = 14302: NUMBER;
 85:      not_equal_value  131  130    8     // tmp131 = tmp130 != a;
 86:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 90;
 87:           assignment  130    5   10     // tmp130 = 'ERROR: bad result: expected 14302 but got ': STRING;
 88:             addition  131  130    8     // tmp131 = tmp130 + a;
 89:          throw_value  131               // throw tmp131;
 90:                  ret                    // ret;
Error: ERR_OUT_OF_MEMORY
