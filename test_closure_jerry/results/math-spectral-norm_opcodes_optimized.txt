// function a(d,l){for(var b=0;b<d.length;++b){for(var e=0,c=0;c<d.length;++c)e+=1/((b+c)*(b+c+1)/2+b+1)*d[c];l[b]=e}}function f(d,l){for(var b=0;b<d.length;++b){for(var e=0,c=0;c<d.length;++c)e+=1/((c+b)*(c+b+1)/2+c+1)*d[c];l[b]=e}}for(var g=0,h=6;48>=h;h*=2){for(var k=g,m=h,n=void 0,p=[],q=[],r=[],t=0,u=0,n=0;n<m;++n)p[n]=1,q[n]=r[n]=0;for(n=0;10>n;++n){var v=q,w=r;a(p,w);f(w,v);var x=p,y=r;a(q,y);f(y,x)}for(n=0;n<m;++n)u+=p[n]*q[n],t+=q[n]*q[n];g=k+Math.sqrt(u/t)}
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  253  253          // goto 65029;
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment  254    6  130     // e = tmp130 : TYPEOF(tmp130);
 11:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 12:           assignment  254    6  131     // c = tmp131 : TYPEOF(tmp131);
 13:             jmp_down  253  253          // goto 65034;
 14:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 15:           assignment  131    6  254     // tmp131 = b : TYPEOF(b);
 16:             addition  132  131  254     // tmp132 = tmp131 + c;
 17:           assignment  133    6  254     // tmp133 = b : TYPEOF(b);
 18:             addition  134  133  254     // tmp134 = tmp133 + c;
 19:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 20:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 21:       multiplication  137  132  136     // tmp137 = tmp132 * tmp136;
 22:           assignment  138    1    2     // tmp138 = 2: SMALLINT;
 23:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 24:             addition  140  139  254     // tmp140 = tmp139 + b;
 25:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 26:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 27:             division  143  130  142     // tmp143 = tmp130 / tmp142;
 28:          prop_getter  144  254  254     // tmp144 = d[c];
 29:       multiplication  145  143  144     // tmp145 = tmp143 * tmp144;
 30:             addition  254  254  145     // e = e + tmp145;
 31:           assignment  146    6  254     // tmp146 = e : TYPEOF(e);
 32:             pre_incr  147  254          // tmp147 = ++c;
 13:             jmp_down    0   20          // goto 33; // REWRITE
 33:           assignment  148    6  254     // tmp148 = c : TYPEOF(c);
 34:           assignment  149    5  254     // tmp149 = 'length': STRING;
 35:          prop_getter  150  254  149     // tmp150 = d[tmp149];
 36:            less_than  151  148  150     // tmp151 = tmp148 < tmp150;
 37:       is_true_jmp_up  151    0   23     // if (tmp151) goto 14;
 38:          prop_getter  130  254  254     // tmp130 = l[b];
 38:          prop_setter  254  254  254     // l[b] = e;
 39:           assignment  131    6  254     // tmp131 = e : TYPEOF(e);
 40:             pre_incr  132  254          // tmp132 = ++b;
  8:             jmp_down    0   33          // goto 41; // REWRITE
 41:           assignment  133    6  254     // tmp133 = b : TYPEOF(b);
 42:           assignment  134    5  254     // tmp134 = 'length': STRING;
 43:          prop_getter  135  254  134     // tmp135 = d[tmp134];
 44:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 45:       is_true_jmp_up  136    0   36     // if (tmp136) goto 9;
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  154    3     // var tmp128 .. tmp154; // REWRITE
 46:                  ret                    // ret;
  3:                 meta    7    0   44     // function end: 47; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  253  253          // goto 65029;
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment  254    6  130     // e = tmp130 : TYPEOF(tmp130);
 11:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 12:           assignment  254    6  131     // c = tmp131 : TYPEOF(tmp131);
 13:             jmp_down  253  253          // goto 65034;
 14:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 15:           assignment  131    6  254     // tmp131 = c : TYPEOF(c);
 16:             addition  132  131  254     // tmp132 = tmp131 + b;
 17:           assignment  133    6  254     // tmp133 = c : TYPEOF(c);
 18:             addition  134  133  254     // tmp134 = tmp133 + b;
 19:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 20:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 21:       multiplication  137  132  136     // tmp137 = tmp132 * tmp136;
 22:           assignment  138    1    2     // tmp138 = 2: SMALLINT;
 23:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 24:             addition  140  139  254     // tmp140 = tmp139 + c;
 25:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 26:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 27:             division  143  130  142     // tmp143 = tmp130 / tmp142;
 28:          prop_getter  144  254  254     // tmp144 = d[c];
 29:       multiplication  145  143  144     // tmp145 = tmp143 * tmp144;
 30:             addition  254  254  145     // e = e + tmp145;
 31:           assignment  146    6  254     // tmp146 = e : TYPEOF(e);
 32:             pre_incr  147  254          // tmp147 = ++c;
 13:             jmp_down    0   20          // goto 33; // REWRITE
 33:           assignment  148    6  254     // tmp148 = c : TYPEOF(c);
 34:           assignment  149    5  254     // tmp149 = 'length': STRING;
 35:          prop_getter  150  254  149     // tmp150 = d[tmp149];
 36:            less_than  151  148  150     // tmp151 = tmp148 < tmp150;
 37:       is_true_jmp_up  151    0   23     // if (tmp151) goto 14;
 38:          prop_getter  130  254  254     // tmp130 = l[b];
 38:          prop_setter  254  254  254     // l[b] = e;
 39:           assignment  131    6  254     // tmp131 = e : TYPEOF(e);
 40:             pre_incr  132  254          // tmp132 = ++b;
  8:             jmp_down    0   33          // goto 41; // REWRITE
 41:           assignment  133    6  254     // tmp133 = b : TYPEOF(b);
 42:           assignment  134    5  254     // tmp134 = 'length': STRING;
 43:          prop_getter  135  254  134     // tmp135 = d[tmp134];
 44:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 45:       is_true_jmp_up  136    0   36     // if (tmp136) goto 9;
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  154    3     // var tmp128 .. tmp154; // REWRITE
 46:                  ret                    // ret;
  3:                 meta    7    0   44     // function end: 47; // REWRITE
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // g = tmp130 : TYPEOF(tmp130);
  4:           assignment  131    1    6     // tmp131 = 6: SMALLINT;
  5:           assignment  254    6  131     // h = tmp131 : TYPEOF(tmp131);
  6:             jmp_down  253  253          // goto 65027;
  7:           assignment  254    6  254     // k = g : TYPEOF(g);
  8:           assignment  254    6  254     // m = h : TYPEOF(h);
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment  131    6  130     // tmp131 = tmp130 : TYPEOF(tmp130);
 11:           assignment  131    0    1     // tmp131 = undefined: SIMPLE;
 12:           assignment  254    6  131     // n = tmp131 : TYPEOF(tmp131);
 13:           array_decl  253  253  255     // 
 13:           array_decl  132    0    0     // tmp132 = []; // REWRITE
 14:           assignment  254    6  132     // p = tmp132 : TYPEOF(tmp132);
 15:           array_decl  253  253  255     // 
 15:           array_decl  133    0    0     // tmp133 = []; // REWRITE
 16:           assignment  254    6  133     // q = tmp133 : TYPEOF(tmp133);
 17:           array_decl  253  253  255     // 
 17:           array_decl  134    0    0     // tmp134 = []; // REWRITE
 18:           assignment  254    6  134     // r = tmp134 : TYPEOF(tmp134);
 19:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 20:           assignment  254    6  135     // t = tmp135 : TYPEOF(tmp135);
 21:           assignment  136    1    0     // tmp136 = 0: SMALLINT;
 22:           assignment  254    6  136     // u = tmp136 : TYPEOF(tmp136);
 23:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
 24:           assignment  254    6  137     // n = tmp137 : TYPEOF(tmp137);
 25:             jmp_down  253  253          // goto 65046;
 26:          prop_getter  130  254  254     // tmp130 = p[n];
 26:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 27:          prop_setter  254  254  131     // p[n] = tmp131;
 28:          prop_getter  132  254  254     // tmp132 = q[n];
 28:          prop_getter  133  254  254     // tmp133 = r[n];
 28:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 29:          prop_setter  254  254  134     // r[n] = tmp134;
 30:          prop_setter  254  254  134     // q[n] = tmp134;
 31:             pre_incr  135  254          // tmp135 = ++n;
 25:             jmp_down    0    7          // goto 32; // REWRITE
 32:           assignment  136    6  254     // tmp136 = n : TYPEOF(n);
 33:            less_than  137  136  254     // tmp137 = tmp136 < m;
 34:       is_true_jmp_up  137    0    8     // if (tmp137) goto 26;
 35:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 36:           assignment  254    6  130     // n = tmp130 : TYPEOF(tmp130);
 37:             jmp_down  253  253          // goto 65058;
 38:           assignment  254    6  254     // v = q : TYPEOF(q);
 39:           assignment  254    6  254     // w = r : TYPEOF(r);
 40:               call_n  253  254  253     // 
 41:                 meta    2  254  255     // 
 42:                 meta    2  254  255     // 
 40:               call_n  130  254    2     //  // REWRITE
 43:               call_n  253  254  253     // 
 44:                 meta    2  254  255     // 
 45:                 meta    2  254  255     // 
 43:               call_n  130  254    2     //  // REWRITE
 46:           assignment  254    6  254     // x = p : TYPEOF(p);
 47:           assignment  254    6  254     // y = r : TYPEOF(r);
 48:               call_n  253  254  253     // 
 49:                 meta    2  254  255     // 
 50:                 meta    2  254  255     // 
 48:               call_n  130  254    2     //  // REWRITE
 51:               call_n  253  254  253     // 
 52:                 meta    2  254  255     // 
 53:                 meta    2  254  255     // 
 51:               call_n  130  254    2     //  // REWRITE
 54:             pre_incr  131  254          // tmp131 = ++n;
 37:             jmp_down    0   18          // goto 55; // REWRITE
 55:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
 56:         greater_than  133  132  254     // tmp133 = tmp132 > n;
 57:       is_true_jmp_up  133    0   19     // if (tmp133) goto 38;
 58:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 59:           assignment  254    6  130     // n = tmp130 : TYPEOF(tmp130);
 60:             jmp_down  253  253          // goto 65081;
 61:          prop_getter  130  254  254     // tmp130 = p[n];
 62:          prop_getter  131  254  254     // tmp131 = q[n];
 63:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 64:             addition  254  254  132     // u = u + tmp132;
 65:           assignment  133    6  254     // tmp133 = u : TYPEOF(u);
 66:          prop_getter  134  254  254     // tmp134 = q[n];
 67:          prop_getter  135  254  254     // tmp135 = q[n];
 68:       multiplication  136  134  135     // tmp136 = tmp134 * tmp135;
 69:             addition  254  254  136     // t = t + tmp136;
 70:           assignment  137    6  254     // tmp137 = t : TYPEOF(t);
 71:             pre_incr  138  254          // tmp138 = ++n;
 60:             jmp_down    0   12          // goto 72; // REWRITE
 72:           assignment  139    6  254     // tmp139 = n : TYPEOF(n);
 73:            less_than  140  139  254     // tmp140 = tmp139 < m;
 74:       is_true_jmp_up  140    0   13     // if (tmp140) goto 61;
 75:           assignment  130    6  254     // tmp130 = k : TYPEOF(k);
 76:           assignment  131    5  254     // tmp131 = 'sqrt': STRING;
 77:          prop_getter  132  254  131     // tmp132 = Math[tmp131];
 78:           assignment  133    6  254     // tmp133 = Math : TYPEOF(Math);
 79:               call_n  253  132  253     // 
 80:                 meta    1    1  133     // 
 81:           assignment  134    6  254     // tmp134 = u : TYPEOF(u);
 82:             division  135  134  254     // tmp135 = tmp134 / t;
 83:                 meta    2  135  255     // 
 79:               call_n  134  132    1     //  // REWRITE
 84:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
 85:           assignment  254    6  135     // g = tmp135 : TYPEOF(tmp135);
 86:           assignment  136    1    2     // tmp136 = 2: SMALLINT;
 87:       multiplication  254  254  136     // h = h * tmp136;
  6:             jmp_down    0   82          // goto 88; // REWRITE
 88:           assignment  137    1   48     // tmp137 = 48: SMALLINT;
 89: greater_or_equal_than  138  137  254     // tmp138 = tmp137 >= h;
 90:       is_true_jmp_up  138    0   83     // if (tmp138) goto 7;
// if(5.086694231303284!=g)throw"ERROR: bad result: expected 5.086694231303284 but got "+g;
 91:           assignment  130    3  254     // tmp130 = 5.086694231303284: NUMBER;
 92:      not_equal_value  131  130  254     // tmp131 = tmp130 != g;
 93:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65114;
 94:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected 5.086694231303284 but got ': STRING;
 95:             addition  131  130  254     // tmp131 = tmp130 + g;
 96:          throw_value  131               // throw tmp131;
// 
 93:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 97; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  140    0     // var tmp128 .. tmp140; // REWRITE
 97:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] a : STRING
0x8a54cc [  8] d : STRING
0x8a54d4 [  8] l : STRING
0x8a54dc [  8] b : STRING
0x8a54e4 [  4] length : MAGIC STRING [id=15] 
0x8a54e8 [  8] e : STRING
0x8a54f0 [  8] c : STRING
0x8a54f8 [  8] f : STRING
0x8a5504 [  4] g : MAGIC STRING [id=206] 
0x8a5508 [  8] h : STRING
0x8a5510 [  8] k : STRING
0x8a5518 [  4] m : MAGIC STRING [id=208] 
0x8a551c [  8] n : STRING
0x8a5524 [  8] p : STRING
0x8a552c [  8] q : STRING
0x8a5534 [  8] r : STRING
0x8a553c [  8] t : STRING
0x8a5548 [  8] u : STRING
0x8a5550 [  8] v : STRING
0x8a5558 [  8] w : STRING
0x8a5560 [  8] x : STRING
0x8a5568 [  8] y : STRING
0x8a5570 [  4] Math : MAGIC STRING [id=44] 
0x8a5574 [  4] sqrt : MAGIC STRING [id=100] 
0x8a5578 [ 12] 5.086694231303284 : NUMBER
0x8a5588 [ 60] ERROR: bad result: expected 5.086694231303284 but got  : STRING
0x8a55c8 [ 56]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  140    0     // var tmp128 .. tmp140;
  2:             var_decl    0               // var g;
  3:             var_decl    1               // var h;
  4:             var_decl    2               // var k;
  5:             var_decl    3               // var m;
  6:             var_decl    4               // var n;
  7:             var_decl    5               // var p;
  8:             var_decl    6               // var q;
  9:             var_decl    7               // var r;
 10:             var_decl    8               // var t;
 11:             var_decl    9               // var u;
 12:             var_decl   10               // var v;
 13:             var_decl   11               // var w;
 14:             var_decl   12               // var x;
 15:             var_decl   13               // var y;
 16:          func_decl_n   14    2          // 
 17:                 meta    2   15  255     // 
 18:                 meta    2   16  255     // function a (d, l);
 19:                 meta    7    0   44     // function end: 63;
 20:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 21:         reg_var_decl  128  154    3     // var tmp128 .. tmp154;
 22:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 23:           assignment  152    6  130     // tmp152 = tmp130 : TYPEOF(tmp130);
 24:             jmp_down    0   33          // goto 57;
 25:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 26:           assignment  153    6  130     // tmp153 = tmp130 : TYPEOF(tmp130);
 27:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 28:           assignment  154    6  131     // tmp154 = tmp131 : TYPEOF(tmp131);
 29:             jmp_down    0   20          // goto 49;
 30:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 31:           assignment  131    6  152     // tmp131 = tmp152 : TYPEOF(tmp152);
 32:             addition  132  131  154     // tmp132 = tmp131 + tmp154;
 33:           assignment  133    6  152     // tmp133 = tmp152 : TYPEOF(tmp152);
 34:             addition  134  133  154     // tmp134 = tmp133 + tmp154;
 35:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 36:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 37:       multiplication  137  132  136     // tmp137 = tmp132 * tmp136;
 38:           assignment  138    1    2     // tmp138 = 2: SMALLINT;
 39:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 40:             addition  140  139  152     // tmp140 = tmp139 + tmp152;
 41:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 42:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 43:             division  143  130  142     // tmp143 = tmp130 / tmp142;
 44:          prop_getter  144   15  154     // tmp144 = d[tmp154];
 45:       multiplication  145  143  144     // tmp145 = tmp143 * tmp144;
 46:             addition  153  153  145     // tmp153 = tmp153 + tmp145;
 47:           assignment  146    6  153     // tmp146 = tmp153 : TYPEOF(tmp153);
 48:             pre_incr  147  154          // tmp147 = ++tmp154;
 49:           assignment  148    6  154     // tmp148 = tmp154 : TYPEOF(tmp154);
 50:           assignment  149    5   17     // tmp149 = 'length': STRING;
 51:          prop_getter  150   15  149     // tmp150 = d[tmp149];
 52:            less_than  151  148  150     // tmp151 = tmp148 < tmp150;
 53:       is_true_jmp_up  151    0   23     // if (tmp151) goto 30;
 54:          prop_setter   16  152  153     // l[tmp152] = tmp153;
 55:           assignment  131    6  153     // tmp131 = tmp153 : TYPEOF(tmp153);
 56:             pre_incr  132  152          // tmp132 = ++tmp152;
 57:           assignment  133    6  152     // tmp133 = tmp152 : TYPEOF(tmp152);
 58:           assignment  134    5   17     // tmp134 = 'length': STRING;
 59:          prop_getter  135   15  134     // tmp135 = d[tmp134];
 60:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 61:       is_true_jmp_up  136    0   36     // if (tmp136) goto 25;
 62:                  ret                    // ret;
 63:          func_decl_n   18    2          // 
 64:                 meta    2    0  255     // 
 65:                 meta    2    1  255     // function f (d, l);
 66:                 meta    7    0   44     // function end: 110;
 67:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 68:         reg_var_decl  128  154    3     // var tmp128 .. tmp154;
 69:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 70:           assignment  152    6  130     // tmp152 = tmp130 : TYPEOF(tmp130);
 71:             jmp_down    0   33          // goto 104;
 72:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 73:           assignment  153    6  130     // tmp153 = tmp130 : TYPEOF(tmp130);
 74:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 75:           assignment  154    6  131     // tmp154 = tmp131 : TYPEOF(tmp131);
 76:             jmp_down    0   20          // goto 96;
 77:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 78:           assignment  131    6  154     // tmp131 = tmp154 : TYPEOF(tmp154);
 79:             addition  132  131  152     // tmp132 = tmp131 + tmp152;
 80:           assignment  133    6  154     // tmp133 = tmp154 : TYPEOF(tmp154);
 81:             addition  134  133  152     // tmp134 = tmp133 + tmp152;
 82:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 83:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 84:       multiplication  137  132  136     // tmp137 = tmp132 * tmp136;
 85:           assignment  138    1    2     // tmp138 = 2: SMALLINT;
 86:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 87:             addition  140  139  154     // tmp140 = tmp139 + tmp154;
 88:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 89:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 90:             division  143  130  142     // tmp143 = tmp130 / tmp142;
 91:          prop_getter  144    0  154     // tmp144 = d[tmp154];
 92:       multiplication  145  143  144     // tmp145 = tmp143 * tmp144;
 93:             addition  153  153  145     // tmp153 = tmp153 + tmp145;
 94:           assignment  146    6  153     // tmp146 = tmp153 : TYPEOF(tmp153);
 95:             pre_incr  147  154          // tmp147 = ++tmp154;
 96:           assignment  148    6  154     // tmp148 = tmp154 : TYPEOF(tmp154);
 97:           assignment  149    5    2     // tmp149 = 'length': STRING;
 98:          prop_getter  150    0  149     // tmp150 = d[tmp149];
 99:            less_than  151  148  150     // tmp151 = tmp148 < tmp150;
100:       is_true_jmp_up  151    0   23     // if (tmp151) goto 77;
101:          prop_setter    1  152  153     // l[tmp152] = tmp153;
102:           assignment  131    6  153     // tmp131 = tmp153 : TYPEOF(tmp153);
103:             pre_incr  132  152          // tmp132 = ++tmp152;
104:           assignment  133    6  152     // tmp133 = tmp152 : TYPEOF(tmp152);
105:           assignment  134    5    2     // tmp134 = 'length': STRING;
106:          prop_getter  135    0  134     // tmp135 = d[tmp134];
107:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
108:       is_true_jmp_up  136    0   36     // if (tmp136) goto 72;
109:                  ret                    // ret;
110:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
111:           assignment    3    6  130     // g = tmp130 : TYPEOF(tmp130);
112:           assignment  131    1    6     // tmp131 = 6: SMALLINT;
113:           assignment    4    6  131     // h = tmp131 : TYPEOF(tmp131);
114:             jmp_down    0   82          // goto 196;
115:           assignment    5    6    3     // k = g : TYPEOF(g);
116:           assignment    6    6    4     // m = h : TYPEOF(h);
117:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
118:           assignment  131    6  130     // tmp131 = tmp130 : TYPEOF(tmp130);
119:           assignment  131    0    1     // tmp131 = undefined: SIMPLE;
120:           assignment    7    6  131     // n = tmp131 : TYPEOF(tmp131);
121:           array_decl  132    0    0     // tmp132 = [];
122:           assignment    8    6  132     // p = tmp132 : TYPEOF(tmp132);
123:           array_decl  133    0    0     // tmp133 = [];
124:           assignment    9    6  133     // q = tmp133 : TYPEOF(tmp133);
125:           array_decl  134    0    0     // tmp134 = [];
126:           assignment   10    6  134     // r = tmp134 : TYPEOF(tmp134);
127:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
128:           assignment    0    6  135     // t = tmp135 : TYPEOF(tmp135);
129:           assignment  136    1    0     // tmp136 = 0: SMALLINT;
130:           assignment    1    6  136     // u = tmp136 : TYPEOF(tmp136);
131:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
132:           assignment    2    6  137     // n = tmp137 : TYPEOF(tmp137);
133:             jmp_down    0    7          // goto 140;
134:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
135:          prop_setter    3    2  131     // p[n] = tmp131;
136:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
137:          prop_setter    4    2  134     // r[n] = tmp134;
138:          prop_setter    5    2  134     // q[n] = tmp134;
139:             pre_incr  135    2          // tmp135 = ++n;
140:           assignment  136    6    2     // tmp136 = n : TYPEOF(n);
141:            less_than  137  136    6     // tmp137 = tmp136 < m;
142:       is_true_jmp_up  137    0    8     // if (tmp137) goto 134;
143:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
144:           assignment    2    6  130     // n = tmp130 : TYPEOF(tmp130);
145:             jmp_down    0   18          // goto 163;
146:           assignment    7    6    5     // v = q : TYPEOF(q);
147:           assignment    8    6    4     // w = r : TYPEOF(r);
148:               call_n  130    9    2     // 
149:                 meta    2    3  255     // 
150:                 meta    2    8  255     // tmp130 = a (p, w);
151:               call_n  130   10    2     // 
152:                 meta    2    8  255     // 
153:                 meta    2    7  255     // tmp130 = f (w, v);
154:           assignment   11    6    3     // x = p : TYPEOF(p);
155:           assignment   12    6    4     // y = r : TYPEOF(r);
156:               call_n  130    9    2     // 
157:                 meta    2    5  255     // 
158:                 meta    2   12  255     // tmp130 = a (q, y);
159:               call_n  130   10    2     // 
160:                 meta    2   12  255     // 
161:                 meta    2   11  255     // tmp130 = f (y, x);
162:             pre_incr  131    2          // tmp131 = ++n;
163:           assignment  132    1   10     // tmp132 = 10: SMALLINT;
164:         greater_than  133  132    2     // tmp133 = tmp132 > n;
165:       is_true_jmp_up  133    0   19     // if (tmp133) goto 146;
166:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
167:           assignment    2    6  130     // n = tmp130 : TYPEOF(tmp130);
168:             jmp_down    0   12          // goto 180;
169:          prop_getter  130    3    2     // tmp130 = p[n];
170:          prop_getter  131    5    2     // tmp131 = q[n];
171:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
172:             addition    1    1  132     // u = u + tmp132;
173:           assignment  133    6    1     // tmp133 = u : TYPEOF(u);
174:          prop_getter  134    5    2     // tmp134 = q[n];
175:          prop_getter  135    5    2     // tmp135 = q[n];
176:       multiplication  136  134  135     // tmp136 = tmp134 * tmp135;
177:             addition    0    0  136     // t = t + tmp136;
178:           assignment  137    6    0     // tmp137 = t : TYPEOF(t);
179:             pre_incr  138    2          // tmp138 = ++n;
180:           assignment  139    6    2     // tmp139 = n : TYPEOF(n);
181:            less_than  140  139    6     // tmp140 = tmp139 < m;
182:       is_true_jmp_up  140    0   13     // if (tmp140) goto 169;
183:           assignment  130    6   13     // tmp130 = k : TYPEOF(k);
184:           assignment  131    5   14     // tmp131 = 'sqrt': STRING;
185:          prop_getter  132   15  131     // tmp132 = Math[tmp131];
186:           assignment  133    6   15     // tmp133 = Math : TYPEOF(Math);
187:               call_n  134  132    1     // 
188:                 meta    1    1  133     // 
189:           assignment  134    6    1     // tmp134 = u : TYPEOF(u);
190:             division  135  134    0     // tmp135 = tmp134 / t;
191:                 meta    2  135  255     // tmp134 = tmp132 (this_arg = tmp133, tmp135);
192:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
193:           assignment    0    6  135     // g = tmp135 : TYPEOF(tmp135);
194:           assignment  136    1    2     // tmp136 = 2: SMALLINT;
195:       multiplication    1    1  136     // h = h * tmp136;
196:           assignment  137    1   48     // tmp137 = 48: SMALLINT;
197: greater_or_equal_than  138  137    1     // tmp138 = tmp137 >= h;
198:       is_true_jmp_up  138    0   83     // if (tmp138) goto 115;
199:           assignment  130    3    2     // tmp130 = 5.086694231303284: NUMBER;
200:      not_equal_value  131  130    0     // tmp131 = tmp130 != g;
201:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 205;
202:           assignment  130    5    3     // tmp130 = 'ERROR: bad result: expected 5.086694231303284 but got ': STRING;
203:             addition  131  130    0     // tmp131 = tmp130 + g;
204:          throw_value  131               // throw tmp131;
205:                  ret                    // ret;
