// var a=[],f=[],g=[],h=[],l={},m={},n={20:2889.0000000000045,40:2889.0000000000055,80:2889.000000000005,160:2889.0000000000055};function p(c,b){var d=Math.abs(b.b[0]-c.b[0]),e=Math.abs(b.b[1]-c.b[1]),k,q,r;d>=e?(k=d,q=d/2,r=e):(k=e,q=e/2,r=d,d=e);d=Math.round(a.f+d);for(e=a.f;e<d;e++)q+=r,q>=k&&(q-=k);a.f=d}function t(c,b,d){this.b=[c,b,d,1]}function u(c,b){for(var d=[[],[],[],[]],e=0,k=0;4>e;e++)for(k=0;4>k;k++)d[e][k]=c[e][0]*b[0][k]+c[e][1]*b[1][k]+c[e][2]*b[2][k]+c[e][3]*b[3][k];return d}
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           array_decl  253  253  255     // 
  2:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  3:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
  4:           array_decl  253  253  255     // 
  4:           array_decl  131    0    0     // tmp131 = []; // REWRITE
  5:           assignment  254    6  131     // f = tmp131 : TYPEOF(tmp131);
  6:           array_decl  253  253  255     // 
  6:           array_decl  132    0    0     // tmp132 = []; // REWRITE
  7:           assignment  254    6  132     // g = tmp132 : TYPEOF(tmp132);
  8:           array_decl  253  253  255     // 
  8:           array_decl  133    0    0     // tmp133 = []; // REWRITE
  9:           assignment  254    6  133     // h = tmp133 : TYPEOF(tmp133);
 10:             obj_decl  253  253  255     // 
 10:             obj_decl  134    0    0     // tmp134 = {}; // REWRITE
 11:           assignment  254    6  134     // l = tmp134 : TYPEOF(tmp134);
 12:             obj_decl  253  253  255     // 
 12:             obj_decl  135    0    0     // tmp135 = {}; // REWRITE
 13:           assignment  254    6  135     // m = tmp135 : TYPEOF(tmp135);
 14:             obj_decl  253  253  255     // 
 15:           assignment  136    3  254     // tmp136 = 2889.0000000000045: NUMBER;
 16:           assignment  137    3  254     // tmp137 = 20: NUMBER;
 17:                 meta    3  137  136     // 
 18:           assignment  136    3  254     // tmp136 = 2889.0000000000054: NUMBER;
 19:           assignment  137    3  254     // tmp137 = 40: NUMBER;
 20:                 meta    3  137  136     // 
 21:           assignment  136    3  254     // tmp136 = 2889.000000000005: NUMBER;
 22:           assignment  137    3  254     // tmp137 = 80: NUMBER;
 23:                 meta    3  137  136     // 
 24:           assignment  136    3  254     // tmp136 = 2889.0000000000054: NUMBER;
 25:           assignment  137    3  254     // tmp137 = 160: NUMBER;
 26:                 meta    3  137  136     // 
 14:             obj_decl  136    0    4     //  // REWRITE
 27:           assignment  254    6  136     // n = tmp136 : TYPEOF(tmp136);
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    5  254     // tmp130 = 'abs': STRING;
  7:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  8:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
  9:               call_n  253  131  253     // 
 10:                 meta    1    1  132     // 
 11:           assignment  133    5  254     // tmp133 = 'b': STRING;
 12:          prop_getter  134  254  133     // tmp134 = b[tmp133];
 13:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 14:          prop_getter  136  134  135     // tmp136 = tmp134[tmp135];
 15:           assignment  137    5  254     // tmp137 = 'b': STRING;
 16:          prop_getter  138  254  137     // tmp138 = c[tmp137];
 17:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 18:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
 19:         substraction  141  136  140     // tmp141 = tmp136 - tmp140;
 20:                 meta    2  141  255     // 
  9:               call_n  133  131    1     //  // REWRITE
 21:           assignment  254    6  133     // d = tmp133 : TYPEOF(tmp133);
 22:           assignment  134    5  254     // tmp134 = 'abs': STRING;
 23:          prop_getter  135  254  134     // tmp135 = Math[tmp134];
 24:           assignment  136    6  254     // tmp136 = Math : TYPEOF(Math);
 25:               call_n  253  135  253     // 
 26:                 meta    1    1  136     // 
 27:           assignment  137    5  254     // tmp137 = 'b': STRING;
 28:          prop_getter  138  254  137     // tmp138 = b[tmp137];
 29:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 30:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
 31:           assignment  141    5  254     // tmp141 = 'b': STRING;
 32:          prop_getter  142  254  141     // tmp142 = c[tmp141];
 33:           assignment  143    1    1     // tmp143 = 1: SMALLINT;
 34:          prop_getter  144  142  143     // tmp144 = tmp142[tmp143];
 35:         substraction  145  140  144     // tmp145 = tmp140 - tmp144;
 36:                 meta    2  145  255     // 
 25:               call_n  137  135    1     //  // REWRITE
 37:           assignment  254    6  137     // e = tmp137 : TYPEOF(tmp137);
 38:           assignment  130    6  254     // tmp130 = d : TYPEOF(d);
 39: greater_or_equal_than  131  130  254     // tmp131 = tmp130 >= e;
 40:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65061;
 41:           assignment  254    6  254     // k = d : TYPEOF(d);
 42:           assignment  132    6  254     // tmp132 = d : TYPEOF(d);
 43:           assignment  133    6  254     // tmp133 = d : TYPEOF(d);
 44:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 45:             division  135  133  134     // tmp135 = tmp133 / tmp134;
 46:           assignment  254    6  135     // q = tmp135 : TYPEOF(tmp135);
 47:           assignment  254    6  254     // r = e : TYPEOF(e);
 48:           assignment  136    6  254     // tmp136 = e : TYPEOF(e);
 49:             jmp_down  253  253          // goto 65070;
 40:    is_false_jmp_down  131    0   10     // if (tmp131 == false) goto 50; // REWRITE
 50:           assignment  254    6  254     // k = e : TYPEOF(e);
 51:           assignment  137    6  254     // tmp137 = e : TYPEOF(e);
 52:           assignment  138    6  254     // tmp138 = e : TYPEOF(e);
 53:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
 54:             division  140  138  139     // tmp140 = tmp138 / tmp139;
 55:           assignment  254    6  140     // q = tmp140 : TYPEOF(tmp140);
 56:           assignment  254    6  254     // r = d : TYPEOF(d);
 57:           assignment  141    6  254     // tmp141 = d : TYPEOF(d);
 58:           assignment  254    6  254     // d = e : TYPEOF(e);
 59:           assignment  136    6  254     // tmp136 = e : TYPEOF(e);
 49:             jmp_down    0   11          // goto 60; // REWRITE
 60:           assignment  130    5  254     // tmp130 = 'round': STRING;
 61:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 62:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 63:               call_n  253  131  253     // 
 64:                 meta    1    1  132     // 
 65:           assignment  133    5  254     // tmp133 = 'f': STRING;
 66:          prop_getter  134  254  133     // tmp134 = a[tmp133];
 67:             addition  135  134  254     // tmp135 = tmp134 + d;
 68:                 meta    2  135  255     // 
 63:               call_n  133  131    1     //  // REWRITE
 69:           assignment  254    6  133     // d = tmp133 : TYPEOF(tmp133);
 70:           assignment  130    5  254     // tmp130 = 'f': STRING;
 71:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 72:           assignment  254    6  131     // e = tmp131 : TYPEOF(tmp131);
 73:             jmp_down  253  253          // goto 65094;
 74:             addition  254  254  254     // q = q + r;
 75:           assignment  130    6  254     // tmp130 = q : TYPEOF(q);
 76:           assignment  131    6  254     // tmp131 = q : TYPEOF(q);
 77: greater_or_equal_than  132  131  254     // tmp132 = tmp131 >= k;
 78:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
 79:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65100;
 80:         substraction  254  254  254     // q = q - k;
 81:           assignment  133    6  254     // tmp133 = q : TYPEOF(q);
 79:    is_false_jmp_down  133    0    3     // if (tmp133 == false) goto 82; // REWRITE
 82:            post_incr  134  254          // tmp134 = e++;
 73:             jmp_down    0   10          // goto 83; // REWRITE
 83:           assignment  135    6  254     // tmp135 = e : TYPEOF(e);
 84:            less_than  136  135  254     // tmp136 = tmp135 < d;
 85:       is_true_jmp_up  136    0   11     // if (tmp136) goto 74;
 86:           assignment  130    5  254     // tmp130 = 'f': STRING;
 87:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 87:          prop_setter  254  130  254     // a[tmp130] = d;
 88:           assignment  132    6  254     // tmp132 = d : TYPEOF(d);
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  150    5     // var tmp128 .. tmp150; // REWRITE
 89:                  ret                    // ret;
  3:                 meta    7    0   87     // function end: 90; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:         this_binding  130               // tmp130 = this;
  8:           assignment  131    5  254     // tmp131 = 'b': STRING;
  9:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  9:           array_decl  253  253  255     // 
 10:                 meta    2  254  255     // 
 11:                 meta    2  254  255     // 
 12:                 meta    2  254  255     // 
 13:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 14:                 meta    2  133  255     // 
  9:           array_decl  133    0    4     //  // REWRITE
 15:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 16:                  ret                    // ret;
  4:                 meta    7    0   13     // function end: 17; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           array_decl  253  253  255     // 
  7:           array_decl  253  253  255     // 
  7:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  8:                 meta    2  130  255     // 
  9:           array_decl  253  253  255     // 
  9:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 10:                 meta    2  130  255     // 
 11:           array_decl  253  253  255     // 
 11:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 12:                 meta    2  130  255     // 
 13:           array_decl  253  253  255     // 
 13:           array_decl  130    0    0     // tmp130 = []; // REWRITE
 14:                 meta    2  130  255     // 
  6:           array_decl  130    0    4     //  // REWRITE
 15:           assignment  254    6  130     // d = tmp130 : TYPEOF(tmp130);
 16:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 17:           assignment  254    6  131     // e = tmp131 : TYPEOF(tmp131);
 18:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 19:           assignment  254    6  132     // k = tmp132 : TYPEOF(tmp132);
 20:             jmp_down  253  253          // goto 65041;
 21:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 22:           assignment  254    6  130     // k = tmp130 : TYPEOF(tmp130);
 23:             jmp_down  253  253          // goto 65044;
 24:          prop_getter  130  254  254     // tmp130 = d[e];
 25:          prop_getter  131  130  254     // tmp131 = tmp130[k];
 25:          prop_getter  132  254  254     // tmp132 = c[e];
 26:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 27:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 28:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 29:          prop_getter  136  254  135     // tmp136 = b[tmp135];
 30:          prop_getter  137  136  254     // tmp137 = tmp136[k];
 31:       multiplication  138  134  137     // tmp138 = tmp134 * tmp137;
 32:          prop_getter  139  254  254     // tmp139 = c[e];
 33:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 34:          prop_getter  141  139  140     // tmp141 = tmp139[tmp140];
 35:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
 36:          prop_getter  143  254  142     // tmp143 = b[tmp142];
 37:          prop_getter  144  143  254     // tmp144 = tmp143[k];
 38:       multiplication  145  141  144     // tmp145 = tmp141 * tmp144;
 39:             addition  146  138  145     // tmp146 = tmp138 + tmp145;
 40:          prop_getter  147  254  254     // tmp147 = c[e];
 41:           assignment  148    1    2     // tmp148 = 2: SMALLINT;
 42:          prop_getter  149  147  148     // tmp149 = tmp147[tmp148];
 43:           assignment  150    1    2     // tmp150 = 2: SMALLINT;
 44:          prop_getter  151  254  150     // tmp151 = b[tmp150];
 45:          prop_getter  152  151  254     // tmp152 = tmp151[k];
 46:       multiplication  153  149  152     // tmp153 = tmp149 * tmp152;
 47:             addition  154  146  153     // tmp154 = tmp146 + tmp153;
 48:          prop_getter  155  254  254     // tmp155 = c[e];
 49:           assignment  156    1    3     // tmp156 = 3: SMALLINT;
 50:          prop_getter  157  155  156     // tmp157 = tmp155[tmp156];
 51:           assignment  158    1    3     // tmp158 = 3: SMALLINT;
 52:          prop_getter  159  254  158     // tmp159 = b[tmp158];
 53:          prop_getter  160  159  254     // tmp160 = tmp159[k];
 54:       multiplication  161  157  160     // tmp161 = tmp157 * tmp160;
 55:             addition  162  154  161     // tmp162 = tmp154 + tmp161;
 56:          prop_setter  130  254  162     // tmp130[k] = tmp162;
 57:            post_incr  163  254          // tmp163 = k++;
 23:             jmp_down    0   35          // goto 58; // REWRITE
 58:           assignment  164    1    4     // tmp164 = 4: SMALLINT;
 59:         greater_than  165  164  254     // tmp165 = tmp164 > k;
 60:       is_true_jmp_up  165    0   36     // if (tmp165) goto 24;
 61:            post_incr  166  254          // tmp166 = e++;
 20:             jmp_down    0   42          // goto 62; // REWRITE
 62:           assignment  167    1    4     // tmp167 = 4: SMALLINT;
 63:         greater_than  168  167  254     // tmp168 = tmp167 > e;
 64:       is_true_jmp_up  168    0   43     // if (tmp168) goto 21;
 65:               retval  254               // return d;
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  171    3     // var tmp128 .. tmp171; // REWRITE
 66:                  ret                    // ret;
  3:                 meta    7    0   64     // function end: 67; // REWRITE
// function v(c){for(var b=f,d=[],e=0;4>e;e++)d[e]=b[e][0]*c[0]+b[e][1]*c[1]+b[e][2]*c[2]+b[e][3]*c[3];return d}function w(c,b,d,e){return u([[1,0,0,b],[0,1,0,d],[0,0,1,e],[0,0,0,1]],c)}
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  254    6  254     // b = f : TYPEOF(f);
  6:           array_decl  253  253  255     // 
  6:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  7:           assignment  254    6  130     // d = tmp130 : TYPEOF(tmp130);
  8:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
  9:           assignment  254    6  131     // e = tmp131 : TYPEOF(tmp131);
 10:             jmp_down  253  253          // goto 65031;
 11:          prop_getter  130  254  254     // tmp130 = d[e];
 11:          prop_getter  131  254  254     // tmp131 = b[e];
 12:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 13:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 14:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 15:          prop_getter  135  254  134     // tmp135 = c[tmp134];
 16:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 17:          prop_getter  137  254  254     // tmp137 = b[e];
 18:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
 19:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
 20:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 21:          prop_getter  141  254  140     // tmp141 = c[tmp140];
 22:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
 23:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
 24:          prop_getter  144  254  254     // tmp144 = b[e];
 25:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
 26:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
 27:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
 28:          prop_getter  148  254  147     // tmp148 = c[tmp147];
 29:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
 30:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
 31:          prop_getter  151  254  254     // tmp151 = b[e];
 32:           assignment  152    1    3     // tmp152 = 3: SMALLINT;
 33:          prop_getter  153  151  152     // tmp153 = tmp151[tmp152];
 34:           assignment  154    1    3     // tmp154 = 3: SMALLINT;
 35:          prop_getter  155  254  154     // tmp155 = c[tmp154];
 36:       multiplication  156  153  155     // tmp156 = tmp153 * tmp155;
 37:             addition  157  150  156     // tmp157 = tmp150 + tmp156;
 38:          prop_setter  254  254  157     // d[e] = tmp157;
 39:            post_incr  158  254          // tmp158 = e++;
 10:             jmp_down    0   30          // goto 40; // REWRITE
 40:           assignment  159    1    4     // tmp159 = 4: SMALLINT;
 41:         greater_than  160  159  254     // tmp160 = tmp159 > e;
 42:       is_true_jmp_up  160    0   31     // if (tmp160) goto 11;
 43:               retval  254               // return d;
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  163    3     // var tmp128 .. tmp163; // REWRITE
 44:                  ret                    // ret;
  2:                 meta    7    0   43     // function end: 45; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  4:                 meta    2  254  255     // 
  0:          func_decl_n  254    4          //  // REWRITE
  5:                 meta    7  253  253     // function end: 65026;
  6:                 meta   12  253  255     // [to be rewritten]
  7:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  8:               call_n  253  254  253     // 
  9:           array_decl  253  253  255     // 
 10:           array_decl  253  253  255     // 
 11:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 12:                 meta    2  130  255     // 
 13:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 14:                 meta    2  130  255     // 
 15:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 16:                 meta    2  130  255     // 
 17:                 meta    2  254  255     // 
 10:           array_decl  130    0    4     //  // REWRITE
 18:                 meta    2  130  255     // 
 19:           array_decl  253  253  255     // 
 20:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 21:                 meta    2  130  255     // 
 22:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 23:                 meta    2  130  255     // 
 24:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 25:                 meta    2  130  255     // 
 26:                 meta    2  254  255     // 
 19:           array_decl  130    0    4     //  // REWRITE
 27:                 meta    2  130  255     // 
 28:           array_decl  253  253  255     // 
 29:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 30:                 meta    2  130  255     // 
 31:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 32:                 meta    2  130  255     // 
 33:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 34:                 meta    2  130  255     // 
 35:                 meta    2  254  255     // 
 28:           array_decl  130    0    4     //  // REWRITE
 36:                 meta    2  130  255     // 
 37:           array_decl  253  253  255     // 
 38:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 39:                 meta    2  130  255     // 
 40:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 41:                 meta    2  130  255     // 
 42:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 43:                 meta    2  130  255     // 
 44:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 45:                 meta    2  130  255     // 
 37:           array_decl  130    0    4     //  // REWRITE
 46:                 meta    2  130  255     // 
  9:           array_decl  130    0    4     //  // REWRITE
 47:                 meta    2  130  255     // 
 48:                 meta    2  254  255     // 
  8:               call_n  130  254    2     //  // REWRITE
 49:               retval  130               // return tmp130;
  6:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  7:         reg_var_decl  128  130    0     // var tmp128 .. tmp130; // REWRITE
 50:                  ret                    // ret;
  5:                 meta    7    0   46     // function end: 51; // REWRITE
// function x(){var c=[],b=5;for(a.f=0;-1<b;b--){for(var d=b,e=a.h[b],k=g,q=[],r=0;3>r;r++)q[r]=k[r][0]*e[0]+k[r][1]*e[1]+k[r][2]*e[2];c[d]=q}0>c[0][2]&&(a.a[0]||(p(a[0],a[1]),a.a[0]=!0),a.a[1]||(p(a[1],a[2]),a.a[1]=!0),a.a[2]||(p(a[2],a[3]),a.a[2]=!0),a.a[3]||(p(a[3],a[0]),a.a[3]=!0));0>c[1][2]&&(a.a[2]||(p(a[3],a[2]),a.a[2]=!0),a.a[9]||(p(a[2],a[6]),a.a[9]=!0),a.a[6]||(p(a[6],a[7]),a.a[6]=!0),a.a[10]||(p(a[7],a[3]),a.a[10]=!0));0>c[2][2]&&(a.a[4]||(p(a[4],a[5]),a.a[4]=!0),a.a[5]||(p(a[5],a[6]),a.a[5]=
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function x (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           array_decl  253  253  255     // 
  4:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  5:           assignment  254    6  130     // c = tmp130 : TYPEOF(tmp130);
  6:           assignment  131    1    5     // tmp131 = 5: SMALLINT;
  7:           assignment  254    6  131     // b = tmp131 : TYPEOF(tmp131);
  8:           assignment  130    5  254     // tmp130 = 'f': STRING;
  9:          prop_getter  131  254  130     // tmp131 = a[tmp130];
  9:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 10:          prop_setter  254  130  132     // a[tmp130] = tmp132;
 11:             jmp_down  253  253          // goto 65032;
 12:           assignment  254    6  254     // d = b : TYPEOF(b);
 13:           assignment  130    5  254     // tmp130 = 'h': STRING;
 14:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 15:          prop_getter  132  131  254     // tmp132 = tmp131[b];
 16:           assignment  254    6  132     // e = tmp132 : TYPEOF(tmp132);
 17:           assignment  254    6  254     // k = g : TYPEOF(g);
 18:           array_decl  253  253  255     // 
 18:           array_decl  133    0    0     // tmp133 = []; // REWRITE
 19:           assignment  254    6  133     // q = tmp133 : TYPEOF(tmp133);
 20:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 21:           assignment  254    6  134     // r = tmp134 : TYPEOF(tmp134);
 22:             jmp_down  253  253          // goto 65043;
 23:          prop_getter  130  254  254     // tmp130 = q[r];
 23:          prop_getter  131  254  254     // tmp131 = k[r];
 24:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 25:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 26:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 27:          prop_getter  135  254  134     // tmp135 = e[tmp134];
 28:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
 29:          prop_getter  137  254  254     // tmp137 = k[r];
 30:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
 31:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
 32:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 33:          prop_getter  141  254  140     // tmp141 = e[tmp140];
 34:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
 35:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
 36:          prop_getter  144  254  254     // tmp144 = k[r];
 37:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
 38:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
 39:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
 40:          prop_getter  148  254  147     // tmp148 = e[tmp147];
 41:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
 42:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
 43:          prop_setter  254  254  150     // q[r] = tmp150;
 44:            post_incr  151  254          // tmp151 = r++;
 22:             jmp_down    0   23          // goto 45; // REWRITE
 45:           assignment  152    1    3     // tmp152 = 3: SMALLINT;
 46:         greater_than  153  152  254     // tmp153 = tmp152 > r;
 47:       is_true_jmp_up  153    0   24     // if (tmp153) goto 23;
 48:          prop_getter  130  254  254     // tmp130 = c[d];
 48:          prop_setter  254  254  254     // c[d] = q;
 49:           assignment  131    6  254     // tmp131 = q : TYPEOF(q);
 50:            post_decr  132  254          // tmp132 = b--;
 11:             jmp_down    0   40          // goto 51; // REWRITE
 51:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 52:          unary_minus  134  133          // tmp134 = -tmp133;
 53:            less_than  135  134  254     // tmp135 = tmp134 < b;
 54:       is_true_jmp_up  135    0   42     // if (tmp135) goto 12;
 55:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 56:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 57:          prop_getter  132  254  131     // tmp132 = c[tmp131];
 58:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
 59:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 60:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
 61:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 62:    is_false_jmp_down  136  253  253     // if (tmp136 == false) goto 65083;
 63:           assignment  137    5  254     // tmp137 = 'a': STRING;
 64:          prop_getter  138  254  137     // tmp138 = a[tmp137];
 65:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 66:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
 67:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
 68:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65089;
 69:               call_n  253  254  253     // 
 70:           assignment  142    1    0     // tmp142 = 0: SMALLINT;
 71:          prop_getter  143  254  142     // tmp143 = a[tmp142];
 72:                 meta    2  143  255     // 
 73:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
 74:          prop_getter  143  254  142     // tmp143 = a[tmp142];
 75:                 meta    2  143  255     // 
 69:               call_n  142  254    2     //  // REWRITE
 76:           assignment  143    5  254     // tmp143 = 'a': STRING;
 77:          prop_getter  144  254  143     // tmp144 = a[tmp143];
 78:           assignment  145    1    0     // tmp145 = 0: SMALLINT;
 79:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
 79:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
 80:          logical_not  148  147          // tmp148 = ! tmp147;
 81:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
 82:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
 68:     is_true_jmp_down  141    0   15     // if (tmp141) goto 83; // REWRITE
 83:           assignment  149    5  254     // tmp149 = 'a': STRING;
 84:          prop_getter  150  254  149     // tmp150 = a[tmp149];
 85:           assignment  151    1    1     // tmp151 = 1: SMALLINT;
 86:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
 87:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
 88:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65109;
 89:               call_n  253  254  253     // 
 90:           assignment  154    1    1     // tmp154 = 1: SMALLINT;
 91:          prop_getter  155  254  154     // tmp155 = a[tmp154];
 92:                 meta    2  155  255     // 
 93:           assignment  154    1    2     // tmp154 = 2: SMALLINT;
 94:          prop_getter  155  254  154     // tmp155 = a[tmp154];
 95:                 meta    2  155  255     // 
 89:               call_n  154  254    2     //  // REWRITE
 96:           assignment  155    5  254     // tmp155 = 'a': STRING;
 97:          prop_getter  156  254  155     // tmp156 = a[tmp155];
 98:           assignment  157    1    1     // tmp157 = 1: SMALLINT;
 99:          prop_getter  158  156  157     // tmp158 = tmp156[tmp157];
 99:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
100:          logical_not  160  159          // tmp160 = ! tmp159;
101:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
102:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
 88:     is_true_jmp_down  153    0   15     // if (tmp153) goto 103; // REWRITE
103:           assignment  161    5  254     // tmp161 = 'a': STRING;
104:          prop_getter  162  254  161     // tmp162 = a[tmp161];
105:           assignment  163    1    2     // tmp163 = 2: SMALLINT;
106:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
107:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
108:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65129;
109:               call_n  253  254  253     // 
110:           assignment  166    1    2     // tmp166 = 2: SMALLINT;
111:          prop_getter  167  254  166     // tmp167 = a[tmp166];
112:                 meta    2  167  255     // 
113:           assignment  166    1    3     // tmp166 = 3: SMALLINT;
114:          prop_getter  167  254  166     // tmp167 = a[tmp166];
115:                 meta    2  167  255     // 
109:               call_n  166  254    2     //  // REWRITE
116:           assignment  167    5  254     // tmp167 = 'a': STRING;
117:          prop_getter  168  254  167     // tmp168 = a[tmp167];
118:           assignment  169    1    2     // tmp169 = 2: SMALLINT;
119:          prop_getter  170  168  169     // tmp170 = tmp168[tmp169];
119:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
120:          logical_not  172  171          // tmp172 = ! tmp171;
121:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
122:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
108:     is_true_jmp_down  165    0   15     // if (tmp165) goto 123; // REWRITE
123:           assignment  173    5  254     // tmp173 = 'a': STRING;
124:          prop_getter  174  254  173     // tmp174 = a[tmp173];
125:           assignment  175    1    3     // tmp175 = 3: SMALLINT;
126:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
127:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
128:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65149;
129:               call_n  253  254  253     // 
130:           assignment  178    1    3     // tmp178 = 3: SMALLINT;
131:          prop_getter  179  254  178     // tmp179 = a[tmp178];
132:                 meta    2  179  255     // 
133:           assignment  178    1    0     // tmp178 = 0: SMALLINT;
134:          prop_getter  179  254  178     // tmp179 = a[tmp178];
135:                 meta    2  179  255     // 
129:               call_n  178  254    2     //  // REWRITE
136:           assignment  179    5  254     // tmp179 = 'a': STRING;
137:          prop_getter  180  254  179     // tmp180 = a[tmp179];
138:           assignment  181    1    3     // tmp181 = 3: SMALLINT;
139:          prop_getter  182  180  181     // tmp182 = tmp180[tmp181];
139:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
140:          logical_not  184  183          // tmp184 = ! tmp183;
141:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
142:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
128:     is_true_jmp_down  177    0   15     // if (tmp177) goto 143; // REWRITE
143:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
 62:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 144; // REWRITE
144:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
145:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
146:          prop_getter  132  254  131     // tmp132 = c[tmp131];
147:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
148:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
149:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
150:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
151:    is_false_jmp_down  136  253  253     // if (tmp136 == false) goto 65172;
152:           assignment  137    5  254     // tmp137 = 'a': STRING;
153:          prop_getter  138  254  137     // tmp138 = a[tmp137];
154:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
155:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
156:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
157:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65178;
158:               call_n  253  254  253     // 
159:           assignment  142    1    3     // tmp142 = 3: SMALLINT;
160:          prop_getter  143  254  142     // tmp143 = a[tmp142];
161:                 meta    2  143  255     // 
162:           assignment  142    1    2     // tmp142 = 2: SMALLINT;
163:          prop_getter  143  254  142     // tmp143 = a[tmp142];
164:                 meta    2  143  255     // 
158:               call_n  142  254    2     //  // REWRITE
165:           assignment  143    5  254     // tmp143 = 'a': STRING;
166:          prop_getter  144  254  143     // tmp144 = a[tmp143];
167:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
168:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
168:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
169:          logical_not  148  147          // tmp148 = ! tmp147;
170:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
171:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
157:     is_true_jmp_down  141    0   15     // if (tmp141) goto 172; // REWRITE
172:           assignment  149    5  254     // tmp149 = 'a': STRING;
173:          prop_getter  150  254  149     // tmp150 = a[tmp149];
174:           assignment  151    1    9     // tmp151 = 9: SMALLINT;
175:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
176:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
177:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65198;
178:               call_n  253  254  253     // 
179:           assignment  154    1    2     // tmp154 = 2: SMALLINT;
180:          prop_getter  155  254  154     // tmp155 = a[tmp154];
181:                 meta    2  155  255     // 
182:           assignment  154    1    6     // tmp154 = 6: SMALLINT;
183:          prop_getter  155  254  154     // tmp155 = a[tmp154];
184:                 meta    2  155  255     // 
178:               call_n  154  254    2     //  // REWRITE
185:           assignment  155    5  254     // tmp155 = 'a': STRING;
186:          prop_getter  156  254  155     // tmp156 = a[tmp155];
187:           assignment  157    1    9     // tmp157 = 9: SMALLINT;
188:          prop_getter  158  156  157     // tmp158 = tmp156[tmp157];
188:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
189:          logical_not  160  159          // tmp160 = ! tmp159;
190:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
191:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
177:     is_true_jmp_down  153    0   15     // if (tmp153) goto 192; // REWRITE
192:           assignment  161    5  254     // tmp161 = 'a': STRING;
193:          prop_getter  162  254  161     // tmp162 = a[tmp161];
194:           assignment  163    1    6     // tmp163 = 6: SMALLINT;
195:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
196:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
197:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65218;
198:               call_n  253  254  253     // 
199:           assignment  166    1    6     // tmp166 = 6: SMALLINT;
200:          prop_getter  167  254  166     // tmp167 = a[tmp166];
201:                 meta    2  167  255     // 
202:           assignment  166    1    7     // tmp166 = 7: SMALLINT;
203:          prop_getter  167  254  166     // tmp167 = a[tmp166];
204:                 meta    2  167  255     // 
198:               call_n  166  254    2     //  // REWRITE
205:           assignment  167    5  254     // tmp167 = 'a': STRING;
206:          prop_getter  168  254  167     // tmp168 = a[tmp167];
207:           assignment  169    1    6     // tmp169 = 6: SMALLINT;
208:          prop_getter  170  168  169     // tmp170 = tmp168[tmp169];
208:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
209:          logical_not  172  171          // tmp172 = ! tmp171;
210:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
211:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
197:     is_true_jmp_down  165    0   15     // if (tmp165) goto 212; // REWRITE
212:           assignment  173    5  254     // tmp173 = 'a': STRING;
213:          prop_getter  174  254  173     // tmp174 = a[tmp173];
214:           assignment  175    1   10     // tmp175 = 10: SMALLINT;
215:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
216:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
217:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65238;
218:               call_n  253  254  253     // 
219:           assignment  178    1    7     // tmp178 = 7: SMALLINT;
220:          prop_getter  179  254  178     // tmp179 = a[tmp178];
221:                 meta    2  179  255     // 
222:           assignment  178    1    3     // tmp178 = 3: SMALLINT;
223:          prop_getter  179  254  178     // tmp179 = a[tmp178];
224:                 meta    2  179  255     // 
218:               call_n  178  254    2     //  // REWRITE
225:           assignment  179    5  254     // tmp179 = 'a': STRING;
226:          prop_getter  180  254  179     // tmp180 = a[tmp179];
227:           assignment  181    1   10     // tmp181 = 10: SMALLINT;
228:          prop_getter  182  180  181     // tmp182 = tmp180[tmp181];
228:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
229:          logical_not  184  183          // tmp184 = ! tmp183;
230:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
231:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
217:     is_true_jmp_down  177    0   15     // if (tmp177) goto 232; // REWRITE
232:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
151:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 233; // REWRITE
233:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
234:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
235:          prop_getter  132  254  131     // tmp132 = c[tmp131];
236:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
237:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
238:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
239:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
240:    is_false_jmp_down  136  253  253     // if (tmp136 == false) goto 65261;
241:           assignment  137    5  254     // tmp137 = 'a': STRING;
242:          prop_getter  138  254  137     // tmp138 = a[tmp137];
243:           assignment  139    1    4     // tmp139 = 4: SMALLINT;
244:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
245:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
246:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65267;
247:               call_n  253  254  253     // 
248:           assignment  142    1    4     // tmp142 = 4: SMALLINT;
249:          prop_getter  143  254  142     // tmp143 = a[tmp142];
250:                 meta    2  143  255     // 
251:           assignment  142    1    5     // tmp142 = 5: SMALLINT;
252:          prop_getter  143  254  142     // tmp143 = a[tmp142];
253:                 meta    2  143  255     // 
247:               call_n  142  254    2     //  // REWRITE
254:           assignment  143    5  254     // tmp143 = 'a': STRING;
255:          prop_getter  144  254  143     // tmp144 = a[tmp143];
256:           assignment  145    1    4     // tmp145 = 4: SMALLINT;
257:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
257:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
258:          logical_not  148  147          // tmp148 = ! tmp147;
259:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
260:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
246:     is_true_jmp_down  141    0   15     // if (tmp141) goto 261; // REWRITE
261:           assignment  149    5  254     // tmp149 = 'a': STRING;
262:          prop_getter  150  254  149     // tmp150 = a[tmp149];
263:           assignment  151    1    5     // tmp151 = 5: SMALLINT;
264:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
265:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
266:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65287;
267:               call_n  253  254  253     // 
268:           assignment  154    1    5     // tmp154 = 5: SMALLINT;
269:          prop_getter  155  254  154     // tmp155 = a[tmp154];
270:                 meta    2  155  255     // 
271:           assignment  154    1    6     // tmp154 = 6: SMALLINT;
272:          prop_getter  155  254  154     // tmp155 = a[tmp154];
273:                 meta    2  155  255     // 
267:               call_n  154  254    2     //  // REWRITE
274:           assignment  155    5  254     // tmp155 = 'a': STRING;
275:          prop_getter  156  254  155     // tmp156 = a[tmp155];
276:           assignment  157    1    5     // tmp157 = 5: SMALLINT;
277:          prop_getter  158  156  157     // tmp158 = tmp156[tmp157];
// !0),a.a[6]||(p(a[6],a[7]),a.a[6]=!0),a.a[7]||(p(a[7],a[4]),a.a[7]=!0));0>c[3][2]&&(a.a[4]||(p(a[4],a[5]),a.a[4]=!0),a.a[8]||(p(a[5],a[1]),a.a[8]=!0),a.a[0]||(p(a[1],a[0]),a.a[0]=!0),a.a[11]||(p(a[0],a[4]),a.a[11]=!0));0>c[4][2]&&(a.a[11]||(p(a[4],a[0]),a.a[11]=!0),a.a[3]||(p(a[0],a[3]),a.a[3]=!0),a.a[10]||(p(a[3],a[7]),a.a[10]=!0),a.a[7]||(p(a[7],a[4]),a.a[7]=!0));0>c[5][2]&&(a.a[8]||(p(a[1],a[5]),a.a[8]=!0),a.a[5]||(p(a[5],a[6]),a.a[5]=!0),a.a[9]||(p(a[6],a[2]),a.a[9]=!0),a.a[1]||(p(a[2],a[1]),a.a[1]=
277:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
278:          logical_not  160  159          // tmp160 = ! tmp159;
279:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
280:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
266:     is_true_jmp_down  153    0   15     // if (tmp153) goto 281; // REWRITE
281:           assignment  161    5  254     // tmp161 = 'a': STRING;
282:          prop_getter  162  254  161     // tmp162 = a[tmp161];
283:           assignment  163    1    6     // tmp163 = 6: SMALLINT;
284:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
285:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
286:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65307;
287:               call_n  253  254  253     // 
288:           assignment  166    1    6     // tmp166 = 6: SMALLINT;
289:          prop_getter  167  254  166     // tmp167 = a[tmp166];
290:                 meta    2  167  255     // 
291:           assignment  166    1    7     // tmp166 = 7: SMALLINT;
292:          prop_getter  167  254  166     // tmp167 = a[tmp166];
293:                 meta    2  167  255     // 
287:               call_n  166  254    2     //  // REWRITE
294:           assignment  167    5  254     // tmp167 = 'a': STRING;
295:          prop_getter  168  254  167     // tmp168 = a[tmp167];
296:           assignment  169    1    6     // tmp169 = 6: SMALLINT;
297:          prop_getter  170  168  169     // tmp170 = tmp168[tmp169];
297:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
298:          logical_not  172  171          // tmp172 = ! tmp171;
299:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
300:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
286:     is_true_jmp_down  165    0   15     // if (tmp165) goto 301; // REWRITE
301:           assignment  173    5  254     // tmp173 = 'a': STRING;
302:          prop_getter  174  254  173     // tmp174 = a[tmp173];
303:           assignment  175    1    7     // tmp175 = 7: SMALLINT;
304:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
305:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
306:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65327;
307:               call_n  253  254  253     // 
308:           assignment  178    1    7     // tmp178 = 7: SMALLINT;
309:          prop_getter  179  254  178     // tmp179 = a[tmp178];
310:                 meta    2  179  255     // 
311:           assignment  178    1    4     // tmp178 = 4: SMALLINT;
312:          prop_getter  179  254  178     // tmp179 = a[tmp178];
313:                 meta    2  179  255     // 
307:               call_n  178  254    2     //  // REWRITE
314:           assignment  179    5  254     // tmp179 = 'a': STRING;
315:          prop_getter  180  254  179     // tmp180 = a[tmp179];
316:           assignment  181    1    7     // tmp181 = 7: SMALLINT;
317:          prop_getter  182  180  181     // tmp182 = tmp180[tmp181];
317:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
318:          logical_not  184  183          // tmp184 = ! tmp183;
319:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
320:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
306:     is_true_jmp_down  177    0   15     // if (tmp177) goto 321; // REWRITE
321:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
240:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 322; // REWRITE
322:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
323:           assignment  131    1    3     // tmp131 = 3: SMALLINT;
324:          prop_getter  132  254  131     // tmp132 = c[tmp131];
325:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
326:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
327:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
328:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
329:    is_false_jmp_down  136  253  253     // if (tmp136 == false) goto 65350;
330:           assignment  137    5  254     // tmp137 = 'a': STRING;
331:          prop_getter  138  254  137     // tmp138 = a[tmp137];
332:           assignment  139    1    4     // tmp139 = 4: SMALLINT;
333:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
334:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
335:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65356;
336:               call_n  253  254  253     // 
337:           assignment  142    1    4     // tmp142 = 4: SMALLINT;
338:          prop_getter  143  254  142     // tmp143 = a[tmp142];
339:                 meta    2  143  255     // 
340:           assignment  142    1    5     // tmp142 = 5: SMALLINT;
341:          prop_getter  143  254  142     // tmp143 = a[tmp142];
342:                 meta    2  143  255     // 
336:               call_n  142  254    2     //  // REWRITE
343:           assignment  143    5  254     // tmp143 = 'a': STRING;
344:          prop_getter  144  254  143     // tmp144 = a[tmp143];
345:           assignment  145    1    4     // tmp145 = 4: SMALLINT;
346:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
346:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
347:          logical_not  148  147          // tmp148 = ! tmp147;
348:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
349:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
335:     is_true_jmp_down  141    0   15     // if (tmp141) goto 350; // REWRITE
350:           assignment  149    5  254     // tmp149 = 'a': STRING;
351:          prop_getter  150  254  149     // tmp150 = a[tmp149];
352:           assignment  151    1    8     // tmp151 = 8: SMALLINT;
353:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
354:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
355:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65376;
356:               call_n  253  254  253     // 
357:           assignment  154    1    5     // tmp154 = 5: SMALLINT;
358:          prop_getter  155  254  154     // tmp155 = a[tmp154];
359:                 meta    2  155  255     // 
360:           assignment  154    1    1     // tmp154 = 1: SMALLINT;
361:          prop_getter  155  254  154     // tmp155 = a[tmp154];
362:                 meta    2  155  255     // 
356:               call_n  154  254    2     //  // REWRITE
363:           assignment  155    5  254     // tmp155 = 'a': STRING;
364:          prop_getter  156  254  155     // tmp156 = a[tmp155];
365:           assignment  157    1    8     // tmp157 = 8: SMALLINT;
366:          prop_getter  158  156  157     // tmp158 = tmp156[tmp157];
366:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
367:          logical_not  160  159          // tmp160 = ! tmp159;
368:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
369:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
355:     is_true_jmp_down  153    0   15     // if (tmp153) goto 370; // REWRITE
370:           assignment  161    5  254     // tmp161 = 'a': STRING;
371:          prop_getter  162  254  161     // tmp162 = a[tmp161];
372:           assignment  163    1    0     // tmp163 = 0: SMALLINT;
373:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
374:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
375:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65396;
376:               call_n  253  254  253     // 
377:           assignment  166    1    1     // tmp166 = 1: SMALLINT;
378:          prop_getter  167  254  166     // tmp167 = a[tmp166];
379:                 meta    2  167  255     // 
380:           assignment  166    1    0     // tmp166 = 0: SMALLINT;
381:          prop_getter  167  254  166     // tmp167 = a[tmp166];
382:                 meta    2  167  255     // 
376:               call_n  166  254    2     //  // REWRITE
383:           assignment  167    5  254     // tmp167 = 'a': STRING;
384:          prop_getter  168  254  167     // tmp168 = a[tmp167];
385:           assignment  169    1    0     // tmp169 = 0: SMALLINT;
386:          prop_getter  170  168  169     // tmp170 = tmp168[tmp169];
386:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
387:          logical_not  172  171          // tmp172 = ! tmp171;
388:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
389:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
375:     is_true_jmp_down  165    0   15     // if (tmp165) goto 390; // REWRITE
390:           assignment  173    5  254     // tmp173 = 'a': STRING;
391:          prop_getter  174  254  173     // tmp174 = a[tmp173];
392:           assignment  175    1   11     // tmp175 = 11: SMALLINT;
393:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
394:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
395:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65416;
396:               call_n  253  254  253     // 
397:           assignment  178    1    0     // tmp178 = 0: SMALLINT;
398:          prop_getter  179  254  178     // tmp179 = a[tmp178];
399:                 meta    2  179  255     // 
400:           assignment  178    1    4     // tmp178 = 4: SMALLINT;
401:          prop_getter  179  254  178     // tmp179 = a[tmp178];
402:                 meta    2  179  255     // 
396:               call_n  178  254    2     //  // REWRITE
403:           assignment  179    5  254     // tmp179 = 'a': STRING;
404:          prop_getter  180  254  179     // tmp180 = a[tmp179];
405:           assignment  181    1   11     // tmp181 = 11: SMALLINT;
406:          prop_getter  182  180  181     // tmp182 = tmp180[tmp181];
406:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
407:          logical_not  184  183          // tmp184 = ! tmp183;
408:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
409:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
395:     is_true_jmp_down  177    0   15     // if (tmp177) goto 410; // REWRITE
410:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
329:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 411; // REWRITE
411:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
412:           assignment  131    1    4     // tmp131 = 4: SMALLINT;
413:          prop_getter  132  254  131     // tmp132 = c[tmp131];
414:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
415:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
416:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
417:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
418:    is_false_jmp_down  136  253  253     // if (tmp136 == false) goto 65439;
419:           assignment  137    5  254     // tmp137 = 'a': STRING;
420:          prop_getter  138  254  137     // tmp138 = a[tmp137];
421:           assignment  139    1   11     // tmp139 = 11: SMALLINT;
422:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
423:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
424:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65445;
425:               call_n  253  254  253     // 
426:           assignment  142    1    4     // tmp142 = 4: SMALLINT;
427:          prop_getter  143  254  142     // tmp143 = a[tmp142];
428:                 meta    2  143  255     // 
429:           assignment  142    1    0     // tmp142 = 0: SMALLINT;
430:          prop_getter  143  254  142     // tmp143 = a[tmp142];
431:                 meta    2  143  255     // 
425:               call_n  142  254    2     //  // REWRITE
432:           assignment  143    5  254     // tmp143 = 'a': STRING;
433:          prop_getter  144  254  143     // tmp144 = a[tmp143];
434:           assignment  145    1   11     // tmp145 = 11: SMALLINT;
435:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
435:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
436:          logical_not  148  147          // tmp148 = ! tmp147;
437:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
438:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
424:     is_true_jmp_down  141    0   15     // if (tmp141) goto 439; // REWRITE
439:           assignment  149    5  254     // tmp149 = 'a': STRING;
440:          prop_getter  150  254  149     // tmp150 = a[tmp149];
441:           assignment  151    1    3     // tmp151 = 3: SMALLINT;
442:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
443:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
444:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65465;
445:               call_n  253  254  253     // 
446:           assignment  154    1    0     // tmp154 = 0: SMALLINT;
447:          prop_getter  155  254  154     // tmp155 = a[tmp154];
448:                 meta    2  155  255     // 
449:           assignment  154    1    3     // tmp154 = 3: SMALLINT;
450:          prop_getter  155  254  154     // tmp155 = a[tmp154];
451:                 meta    2  155  255     // 
445:               call_n  154  254    2     //  // REWRITE
452:           assignment  155    5  254     // tmp155 = 'a': STRING;
453:          prop_getter  156  254  155     // tmp156 = a[tmp155];
454:           assignment  157    1    3     // tmp157 = 3: SMALLINT;
455:          prop_getter  158  156  157     // tmp158 = tmp156[tmp157];
455:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
456:          logical_not  160  159          // tmp160 = ! tmp159;
457:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
458:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
444:     is_true_jmp_down  153    0   15     // if (tmp153) goto 459; // REWRITE
459:           assignment  161    5  254     // tmp161 = 'a': STRING;
460:          prop_getter  162  254  161     // tmp162 = a[tmp161];
461:           assignment  163    1   10     // tmp163 = 10: SMALLINT;
462:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
463:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
464:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65485;
465:               call_n  253  254  253     // 
466:           assignment  166    1    3     // tmp166 = 3: SMALLINT;
467:          prop_getter  167  254  166     // tmp167 = a[tmp166];
468:                 meta    2  167  255     // 
469:           assignment  166    1    7     // tmp166 = 7: SMALLINT;
470:          prop_getter  167  254  166     // tmp167 = a[tmp166];
471:                 meta    2  167  255     // 
465:               call_n  166  254    2     //  // REWRITE
472:           assignment  167    5  254     // tmp167 = 'a': STRING;
473:          prop_getter  168  254  167     // tmp168 = a[tmp167];
474:           assignment  169    1   10     // tmp169 = 10: SMALLINT;
475:          prop_getter  170  168  169     // tmp170 = tmp168[tmp169];
475:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
476:          logical_not  172  171          // tmp172 = ! tmp171;
477:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
478:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
464:     is_true_jmp_down  165    0   15     // if (tmp165) goto 479; // REWRITE
479:           assignment  173    5  254     // tmp173 = 'a': STRING;
480:          prop_getter  174  254  173     // tmp174 = a[tmp173];
481:           assignment  175    1    7     // tmp175 = 7: SMALLINT;
482:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
483:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
484:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65505;
485:               call_n  253  254  253     // 
486:           assignment  178    1    7     // tmp178 = 7: SMALLINT;
487:          prop_getter  179  254  178     // tmp179 = a[tmp178];
488:                 meta    2  179  255     // 
489:           assignment  178    1    4     // tmp178 = 4: SMALLINT;
490:          prop_getter  179  254  178     // tmp179 = a[tmp178];
491:                 meta    2  179  255     // 
485:               call_n  178  254    2     //  // REWRITE
492:           assignment  179    5  254     // tmp179 = 'a': STRING;
493:          prop_getter  180  254  179     // tmp180 = a[tmp179];
494:           assignment  181    1    7     // tmp181 = 7: SMALLINT;
495:          prop_getter  182  180  181     // tmp182 = tmp180[tmp181];
495:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
496:          logical_not  184  183          // tmp184 = ! tmp183;
497:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
498:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
484:     is_true_jmp_down  177    0   15     // if (tmp177) goto 499; // REWRITE
499:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
418:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 500; // REWRITE
500:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
501:           assignment  131    1    5     // tmp131 = 5: SMALLINT;
502:          prop_getter  132  254  131     // tmp132 = c[tmp131];
503:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
504:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
505:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
506:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
507:    is_false_jmp_down  136  253  253     // if (tmp136 == false) goto 65528;
508:           assignment  137    5  254     // tmp137 = 'a': STRING;
509:          prop_getter  138  254  137     // tmp138 = a[tmp137];
510:           assignment  139    1    8     // tmp139 = 8: SMALLINT;
511:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
512:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
513:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65534;
514:               call_n  253  254  253     // 
515:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
516:          prop_getter  143  254  142     // tmp143 = a[tmp142];
517:                 meta    2  143  255     // 
518:           assignment  142    1    5     // tmp142 = 5: SMALLINT;
519:          prop_getter  143  254  142     // tmp143 = a[tmp142];
520:                 meta    2  143  255     // 
514:               call_n  142  254    2     //  // REWRITE
521:           assignment  143    5  254     // tmp143 = 'a': STRING;
522:          prop_getter  144  254  143     // tmp144 = a[tmp143];
523:           assignment  145    1    8     // tmp145 = 8: SMALLINT;
524:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
524:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
525:          logical_not  148  147          // tmp148 = ! tmp147;
526:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
527:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
513:     is_true_jmp_down  141    0   15     // if (tmp141) goto 528; // REWRITE
528:           assignment  149    5  254     // tmp149 = 'a': STRING;
529:          prop_getter  150  254  149     // tmp150 = a[tmp149];
530:           assignment  151    1    5     // tmp151 = 5: SMALLINT;
531:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
532:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
533:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65554;
534:               call_n  253  254  253     // 
535:           assignment  154    1    5     // tmp154 = 5: SMALLINT;
536:          prop_getter  155  254  154     // tmp155 = a[tmp154];
537:                 meta    2  155  255     // 
538:           assignment  154    1    6     // tmp154 = 6: SMALLINT;
539:          prop_getter  155  254  154     // tmp155 = a[tmp154];
540:                 meta    2  155  255     // 
534:               call_n  154  254    2     //  // REWRITE
541:           assignment  155    5  254     // tmp155 = 'a': STRING;
542:          prop_getter  156  254  155     // tmp156 = a[tmp155];
543:           assignment  157    1    5     // tmp157 = 5: SMALLINT;
544:          prop_getter  158  156  157     // tmp158 = tmp156[tmp157];
544:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
545:          logical_not  160  159          // tmp160 = ! tmp159;
546:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
547:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
533:     is_true_jmp_down  153    0   15     // if (tmp153) goto 548; // REWRITE
548:           assignment  161    5  254     // tmp161 = 'a': STRING;
549:          prop_getter  162  254  161     // tmp162 = a[tmp161];
550:           assignment  163    1    9     // tmp163 = 9: SMALLINT;
551:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
552:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
553:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65574;
554:               call_n  253  254  253     // 
555:           assignment  166    1    6     // tmp166 = 6: SMALLINT;
556:          prop_getter  167  254  166     // tmp167 = a[tmp166];
557:                 meta    2  167  255     // 
558:           assignment  166    1    2     // tmp166 = 2: SMALLINT;
559:          prop_getter  167  254  166     // tmp167 = a[tmp166];
560:                 meta    2  167  255     // 
554:               call_n  166  254    2     //  // REWRITE
561:           assignment  167    5  254     // tmp167 = 'a': STRING;
562:          prop_getter  168  254  167     // tmp168 = a[tmp167];
563:           assignment  169    1    9     // tmp169 = 9: SMALLINT;
564:          prop_getter  170  168  169     // tmp170 = tmp168[tmp169];
564:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
565:          logical_not  172  171          // tmp172 = ! tmp171;
566:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
567:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
553:     is_true_jmp_down  165    0   15     // if (tmp165) goto 568; // REWRITE
568:           assignment  173    5  254     // tmp173 = 'a': STRING;
569:          prop_getter  174  254  173     // tmp174 = a[tmp173];
570:           assignment  175    1    1     // tmp175 = 1: SMALLINT;
571:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
572:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
573:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65594;
574:               call_n  253  254  253     // 
575:           assignment  178    1    2     // tmp178 = 2: SMALLINT;
576:          prop_getter  179  254  178     // tmp179 = a[tmp178];
577:                 meta    2  179  255     // 
578:           assignment  178    1    1     // tmp178 = 1: SMALLINT;
579:          prop_getter  179  254  178     // tmp179 = a[tmp178];
580:                 meta    2  179  255     // 
574:               call_n  178  254    2     //  // REWRITE
581:           assignment  179    5  254     // tmp179 = 'a': STRING;
582:          prop_getter  180  254  179     // tmp180 = a[tmp179];
583:           assignment  181    1    1     // tmp181 = 1: SMALLINT;
584:          prop_getter  182  180  181     // tmp182 = tmp180[tmp181];
// !0));a.a=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1];a.f=0}
584:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
585:          logical_not  184  183          // tmp184 = ! tmp183;
586:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
587:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
573:     is_true_jmp_down  177    0   15     // if (tmp177) goto 588; // REWRITE
588:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
507:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 589; // REWRITE
589:           assignment  130    5  254     // tmp130 = 'a': STRING;
590:          prop_getter  131  254  130     // tmp131 = a[tmp130];
590:           array_decl  253  253  255     // 
591:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
592:          logical_not  133  132          // tmp133 = ! tmp132;
593:                 meta    2  133  255     // 
594:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
595:          logical_not  133  132          // tmp133 = ! tmp132;
596:                 meta    2  133  255     // 
597:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
598:          logical_not  133  132          // tmp133 = ! tmp132;
599:                 meta    2  133  255     // 
600:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
601:          logical_not  133  132          // tmp133 = ! tmp132;
602:                 meta    2  133  255     // 
603:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
604:          logical_not  133  132          // tmp133 = ! tmp132;
605:                 meta    2  133  255     // 
606:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
607:          logical_not  133  132          // tmp133 = ! tmp132;
608:                 meta    2  133  255     // 
609:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
610:          logical_not  133  132          // tmp133 = ! tmp132;
611:                 meta    2  133  255     // 
612:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
613:          logical_not  133  132          // tmp133 = ! tmp132;
614:                 meta    2  133  255     // 
615:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
616:          logical_not  133  132          // tmp133 = ! tmp132;
617:                 meta    2  133  255     // 
618:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
619:          logical_not  133  132          // tmp133 = ! tmp132;
620:                 meta    2  133  255     // 
621:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
622:          logical_not  133  132          // tmp133 = ! tmp132;
623:                 meta    2  133  255     // 
624:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
625:          logical_not  133  132          // tmp133 = ! tmp132;
626:                 meta    2  133  255     // 
590:           array_decl  132    0   12     //  // REWRITE
627:          prop_setter  254  130  132     // a[tmp130] = tmp132;
628:           assignment  130    5  254     // tmp130 = 'f': STRING;
629:          prop_getter  131  254  130     // tmp131 = a[tmp130];
629:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
630:          prop_setter  254  130  132     // a[tmp130] = tmp132;
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  191    7     // var tmp128 .. tmp191; // REWRITE
631:                  ret                    // ret;
  1:                 meta    7    2  119     // function end: 632; // REWRITE
// function y(){if(!(m.g>m.j)){for(var c=String(m.g);3>c.length;)c="0"+c;var c=f=w(h,-a[8].b[0],-a[8].b[1],-a[8].b[2]),b;b=Math.PI/180*1;var d=Math.cos(b);b=Math.sin(b);c=f=u([[1,0,0,0],[0,d,-b,0],[0,b,d,0],[0,0,0,1]],c);b=Math.PI/180*3;d=Math.cos(b);b=Math.sin(b);c=f=u([[d,0,b,0],[0,1,0,0],[-b,0,d,0],[0,0,0,1]],c);b=Math.PI/180*5;d=Math.cos(b);b=Math.sin(b);f=u([[d,-b,0,0],[b,d,0,0],[0,0,1,0],[0,0,0,1]],c);f=w(f,a[8].b[0],a[8].b[1],a[8].b[2]);g=u(f,g);for(c=8;-1<c;c--)a[c].b=v(a[c].b);x();m.g++;y()}}
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function y (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'g': STRING;
  5:          prop_getter  131  254  130     // tmp131 = m[tmp130];
  6:           assignment  132    5  254     // tmp132 = 'j': STRING;
  7:          prop_getter  133  254  132     // tmp133 = m[tmp132];
  8:         greater_than  134  131  133     // tmp134 = tmp131 > tmp133;
  9:          logical_not  135  134          // tmp135 = ! tmp134;
 10:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65031;
 11:               call_n  253  254  253     // 
 12:           assignment  130    5  254     // tmp130 = 'g': STRING;
 13:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 14:                 meta    2  131  255     // 
 11:               call_n  130  254    1     //  // REWRITE
 15:           assignment  254    6  130     // c = tmp130 : TYPEOF(tmp130);
 16:             jmp_down  253  253          // goto 65037;
 17:           assignment  130    5  254     // tmp130 = '0': STRING;
 18:             addition  131  130  254     // tmp131 = tmp130 + c;
 19:           assignment  254    6  131     // c = tmp131 : TYPEOF(tmp131);
 16:             jmp_down    0    4          // goto 20; // REWRITE
 20:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
 21:           assignment  133    5  254     // tmp133 = 'length': STRING;
 22:          prop_getter  134  254  133     // tmp134 = c[tmp133];
 23:         greater_than  135  132  134     // tmp135 = tmp132 > tmp134;
 24:       is_true_jmp_up  135    0    7     // if (tmp135) goto 17;
 25:               call_n  253  254  253     // 
 26:                 meta    2  254  255     // 
 27:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 28:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 29:           assignment  132    5  254     // tmp132 = 'b': STRING;
 30:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 31:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 32:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 33:          unary_minus  136  135          // tmp136 = -tmp135;
 34:                 meta    2  136  255     // 
 35:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 36:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 37:           assignment  132    5  254     // tmp132 = 'b': STRING;
 38:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 39:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 40:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 41:          unary_minus  136  135          // tmp136 = -tmp135;
 42:                 meta    2  136  255     // 
 43:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 44:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 45:           assignment  132    5  254     // tmp132 = 'b': STRING;
 46:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 47:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 48:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 49:          unary_minus  136  135          // tmp136 = -tmp135;
 50:                 meta    2  136  255     // 
 25:               call_n  130  254    4     //  // REWRITE
 51:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
 52:           assignment  254    6  130     // c = tmp130 : TYPEOF(tmp130);
 53:           assignment  130    5  254     // tmp130 = 'PI': STRING;
 54:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 55:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
 56:             division  133  131  132     // tmp133 = tmp131 / tmp132;
 57:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 58:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
 59:           assignment  254    6  135     // b = tmp135 : TYPEOF(tmp135);
 60:           assignment  130    5  254     // tmp130 = 'cos': STRING;
 61:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 62:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 63:               call_n  253  131  253     // 
 64:                 meta    1    1  132     // 
 65:                 meta    2  254  255     // 
 63:               call_n  133  131    1     //  // REWRITE
 66:           assignment  254    6  133     // d = tmp133 : TYPEOF(tmp133);
 67:           assignment  130    5  254     // tmp130 = 'sin': STRING;
 68:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 69:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 70:               call_n  253  131  253     // 
 71:                 meta    1    1  132     // 
 72:                 meta    2  254  255     // 
 70:               call_n  133  131    1     //  // REWRITE
 73:           assignment  254    6  133     // b = tmp133 : TYPEOF(tmp133);
 74:               call_n  253  254  253     // 
 75:           array_decl  253  253  255     // 
 76:           array_decl  253  253  255     // 
 77:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 78:                 meta    2  130  255     // 
 79:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 80:                 meta    2  130  255     // 
 81:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 82:                 meta    2  130  255     // 
 83:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 84:                 meta    2  130  255     // 
 76:           array_decl  130    0    4     //  // REWRITE
 85:                 meta    2  130  255     // 
 86:           array_decl  253  253  255     // 
 87:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 88:                 meta    2  130  255     // 
 89:                 meta    2  254  255     // 
 90:          unary_minus  130  254          // tmp130 = -b;
 91:                 meta    2  130  255     // 
 92:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 93:                 meta    2  130  255     // 
 86:           array_decl  130    0    4     //  // REWRITE
 94:                 meta    2  130  255     // 
 95:           array_decl  253  253  255     // 
 96:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 97:                 meta    2  130  255     // 
 98:                 meta    2  254  255     // 
 99:                 meta    2  254  255     // 
100:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
101:                 meta    2  130  255     // 
 95:           array_decl  130    0    4     //  // REWRITE
102:                 meta    2  130  255     // 
103:           array_decl  253  253  255     // 
104:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
105:                 meta    2  130  255     // 
106:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
107:                 meta    2  130  255     // 
108:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
109:                 meta    2  130  255     // 
110:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
111:                 meta    2  130  255     // 
103:           array_decl  130    0    4     //  // REWRITE
112:                 meta    2  130  255     // 
 75:           array_decl  130    0    4     //  // REWRITE
113:                 meta    2  130  255     // 
114:                 meta    2  254  255     // 
 74:               call_n  130  254    2     //  // REWRITE
115:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
116:           assignment  254    6  130     // c = tmp130 : TYPEOF(tmp130);
117:           assignment  130    5  254     // tmp130 = 'PI': STRING;
118:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
119:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
120:             division  133  131  132     // tmp133 = tmp131 / tmp132;
121:           assignment  134    1    3     // tmp134 = 3: SMALLINT;
122:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
123:           assignment  254    6  135     // b = tmp135 : TYPEOF(tmp135);
124:           assignment  130    5  254     // tmp130 = 'cos': STRING;
125:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
126:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
127:               call_n  253  131  253     // 
128:                 meta    1    1  132     // 
129:                 meta    2  254  255     // 
127:               call_n  133  131    1     //  // REWRITE
130:           assignment  254    6  133     // d = tmp133 : TYPEOF(tmp133);
131:           assignment  130    5  254     // tmp130 = 'sin': STRING;
132:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
133:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
134:               call_n  253  131  253     // 
135:                 meta    1    1  132     // 
136:                 meta    2  254  255     // 
134:               call_n  133  131    1     //  // REWRITE
137:           assignment  254    6  133     // b = tmp133 : TYPEOF(tmp133);
138:               call_n  253  254  253     // 
139:           array_decl  253  253  255     // 
140:           array_decl  253  253  255     // 
141:                 meta    2  254  255     // 
142:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
143:                 meta    2  130  255     // 
144:                 meta    2  254  255     // 
145:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
146:                 meta    2  130  255     // 
140:           array_decl  130    0    4     //  // REWRITE
147:                 meta    2  130  255     // 
148:           array_decl  253  253  255     // 
149:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
150:                 meta    2  130  255     // 
151:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
152:                 meta    2  130  255     // 
153:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
154:                 meta    2  130  255     // 
155:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
156:                 meta    2  130  255     // 
148:           array_decl  130    0    4     //  // REWRITE
157:                 meta    2  130  255     // 
158:           array_decl  253  253  255     // 
159:          unary_minus  130  254          // tmp130 = -b;
160:                 meta    2  130  255     // 
161:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
162:                 meta    2  130  255     // 
163:                 meta    2  254  255     // 
164:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
165:                 meta    2  130  255     // 
158:           array_decl  130    0    4     //  // REWRITE
166:                 meta    2  130  255     // 
167:           array_decl  253  253  255     // 
168:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
169:                 meta    2  130  255     // 
170:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
171:                 meta    2  130  255     // 
172:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
173:                 meta    2  130  255     // 
174:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
175:                 meta    2  130  255     // 
167:           array_decl  130    0    4     //  // REWRITE
176:                 meta    2  130  255     // 
139:           array_decl  130    0    4     //  // REWRITE
177:                 meta    2  130  255     // 
178:                 meta    2  254  255     // 
138:               call_n  130  254    2     //  // REWRITE
179:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
180:           assignment  254    6  130     // c = tmp130 : TYPEOF(tmp130);
181:           assignment  130    5  254     // tmp130 = 'PI': STRING;
182:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
183:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
184:             division  133  131  132     // tmp133 = tmp131 / tmp132;
185:           assignment  134    1    5     // tmp134 = 5: SMALLINT;
186:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
187:           assignment  254    6  135     // b = tmp135 : TYPEOF(tmp135);
188:           assignment  130    5  254     // tmp130 = 'cos': STRING;
189:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
190:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
191:               call_n  253  131  253     // 
192:                 meta    1    1  132     // 
193:                 meta    2  254  255     // 
191:               call_n  133  131    1     //  // REWRITE
194:           assignment  254    6  133     // d = tmp133 : TYPEOF(tmp133);
195:           assignment  130    5  254     // tmp130 = 'sin': STRING;
196:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
197:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
198:               call_n  253  131  253     // 
199:                 meta    1    1  132     // 
200:                 meta    2  254  255     // 
198:               call_n  133  131    1     //  // REWRITE
201:           assignment  254    6  133     // b = tmp133 : TYPEOF(tmp133);
202:               call_n  253  254  253     // 
203:           array_decl  253  253  255     // 
204:           array_decl  253  253  255     // 
205:                 meta    2  254  255     // 
206:          unary_minus  130  254          // tmp130 = -b;
207:                 meta    2  130  255     // 
208:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
209:                 meta    2  130  255     // 
210:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
211:                 meta    2  130  255     // 
204:           array_decl  130    0    4     //  // REWRITE
212:                 meta    2  130  255     // 
213:           array_decl  253  253  255     // 
214:                 meta    2  254  255     // 
215:                 meta    2  254  255     // 
216:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
217:                 meta    2  130  255     // 
218:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
219:                 meta    2  130  255     // 
213:           array_decl  130    0    4     //  // REWRITE
220:                 meta    2  130  255     // 
221:           array_decl  253  253  255     // 
222:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
223:                 meta    2  130  255     // 
224:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
225:                 meta    2  130  255     // 
226:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
227:                 meta    2  130  255     // 
228:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
229:                 meta    2  130  255     // 
221:           array_decl  130    0    4     //  // REWRITE
230:                 meta    2  130  255     // 
231:           array_decl  253  253  255     // 
232:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
233:                 meta    2  130  255     // 
234:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
235:                 meta    2  130  255     // 
236:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
237:                 meta    2  130  255     // 
238:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
239:                 meta    2  130  255     // 
231:           array_decl  130    0    4     //  // REWRITE
240:                 meta    2  130  255     // 
203:           array_decl  130    0    4     //  // REWRITE
241:                 meta    2  130  255     // 
242:                 meta    2  254  255     // 
202:               call_n  130  254    2     //  // REWRITE
243:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
244:               call_n  253  254  253     // 
245:                 meta    2  254  255     // 
246:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
247:          prop_getter  131  254  130     // tmp131 = a[tmp130];
248:           assignment  132    5  254     // tmp132 = 'b': STRING;
249:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
250:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
251:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
252:                 meta    2  135  255     // 
253:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
254:          prop_getter  131  254  130     // tmp131 = a[tmp130];
255:           assignment  132    5  254     // tmp132 = 'b': STRING;
256:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
257:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
258:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
259:                 meta    2  135  255     // 
260:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
261:          prop_getter  131  254  130     // tmp131 = a[tmp130];
262:           assignment  132    5  254     // tmp132 = 'b': STRING;
263:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
264:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
265:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
266:                 meta    2  135  255     // 
244:               call_n  130  254    4     //  // REWRITE
267:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
268:               call_n  253  254  253     // 
269:                 meta    2  254  255     // 
270:                 meta    2  254  255     // 
268:               call_n  130  254    2     //  // REWRITE
271:           assignment  254    6  130     // g = tmp130 : TYPEOF(tmp130);
272:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
273:           assignment  254    6  130     // c = tmp130 : TYPEOF(tmp130);
274:             jmp_down  253  253          // goto 65295;
275:          prop_getter  130  254  254     // tmp130 = a[c];
276:           assignment  131    5  254     // tmp131 = 'b': STRING;
277:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
277:               call_n  253  254  253     // 
278:          prop_getter  133  254  254     // tmp133 = a[c];
279:           assignment  134    5  254     // tmp134 = 'b': STRING;
280:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
281:                 meta    2  135  255     // 
277:               call_n  133  254    1     //  // REWRITE
282:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
283:            post_decr  134  254          // tmp134 = c--;
274:             jmp_down    0   10          // goto 284; // REWRITE
284:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
285:          unary_minus  136  135          // tmp136 = -tmp135;
286:            less_than  137  136  254     // tmp137 = tmp136 < c;
287:       is_true_jmp_up  137    0   12     // if (tmp137) goto 275;
288:               call_n  253  254  253     // 
288:               call_n  130  254    0     //  // REWRITE
289:           assignment  130    5  254     // tmp130 = 'g': STRING;
290:          prop_getter  131  254  130     // tmp131 = m[tmp130];
291:            post_incr  132  131          // tmp132 = tmp131++;
292:          prop_setter  254  130  131     // m[tmp130] = tmp131;
293:               call_n  253  254  253     // 
293:               call_n  130  254    0     //  // REWRITE
 10:    is_false_jmp_down  135    1   28     // if (tmp135 == false) goto 294; // REWRITE
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  140    3     // var tmp128 .. tmp140; // REWRITE
294:                  ret                    // ret;
  1:                 meta    7    1   38     // function end: 295; // REWRITE
// for(var z=20;160>=z;z*=2){var A=z;l.b=[150,150,20,1];m.g=0;m.j=50;m.o=0;m.m=0;m.s=0;m.u=0;m.v=0;m.i=!1;f=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];g=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];h=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];a[0]=new t(-A,-A,A);a[1]=new t(-A,A,A);a[2]=new t(A,A,A);a[3]=new t(A,-A,A);a[4]=new t(-A,-A,-A);a[5]=new t(-A,A,-A);a[6]=new t(A,A,-A);a[7]=new t(A,-A,-A);a[8]=new t(0,0,0);a.c=[[0,1,2],[3,2,6],[7,6,5],[4,5,1],[4,0,3],[1,5,6]];a.h=[];for(var B=0;B<a.c.length;B++){for(var C=
 28:           assignment  130    1   20     // tmp130 = 20: SMALLINT;
 29:           assignment  254    6  130     // z = tmp130 : TYPEOF(tmp130);
 30:             jmp_down  253  253          // goto 65051;
 31:           assignment  254    6  254     // A = z : TYPEOF(z);
 32:           assignment  130    5  254     // tmp130 = 'b': STRING;
 33:          prop_getter  131  254  130     // tmp131 = l[tmp130];
 33:           array_decl  253  253  255     // 
 34:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
 35:                 meta    2  132  255     // 
 36:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
 37:                 meta    2  132  255     // 
 38:           assignment  132    1   20     // tmp132 = 20: SMALLINT;
 39:                 meta    2  132  255     // 
 40:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 41:                 meta    2  132  255     // 
 33:           array_decl  132    0    4     //  // REWRITE
 42:          prop_setter  254  130  132     // l[tmp130] = tmp132;
 43:           assignment  130    5  254     // tmp130 = 'g': STRING;
 44:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 44:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 45:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 46:           assignment  130    5  254     // tmp130 = 'j': STRING;
 47:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 47:           assignment  132    1   50     // tmp132 = 50: SMALLINT;
 48:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 49:           assignment  130    5  254     // tmp130 = 'o': STRING;
 50:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 50:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 51:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 52:           assignment  130    5  254     // tmp130 = 'm': STRING;
 53:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 53:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 54:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 55:           assignment  130    5  254     // tmp130 = 's': STRING;
 56:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 56:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 57:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 58:           assignment  130    5  254     // tmp130 = 'u': STRING;
 59:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 59:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 60:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 61:           assignment  130    5  254     // tmp130 = 'v': STRING;
 62:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 62:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 63:          prop_setter  254  130  132     // m[tmp130] = tmp132;
 64:           assignment  130    5  254     // tmp130 = 'i': STRING;
 65:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 65:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 66:          logical_not  133  132          // tmp133 = ! tmp132;
 67:          prop_setter  254  130  133     // m[tmp130] = tmp133;
 68:           array_decl  253  253  255     // 
 69:           array_decl  253  253  255     // 
 70:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 71:                 meta    2  130  255     // 
 72:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 73:                 meta    2  130  255     // 
 74:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 75:                 meta    2  130  255     // 
 76:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 77:                 meta    2  130  255     // 
 69:           array_decl  130    0    4     //  // REWRITE
 78:                 meta    2  130  255     // 
 79:           array_decl  253  253  255     // 
 80:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 81:                 meta    2  130  255     // 
 82:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 83:                 meta    2  130  255     // 
 84:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 85:                 meta    2  130  255     // 
 86:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 87:                 meta    2  130  255     // 
 79:           array_decl  130    0    4     //  // REWRITE
 88:                 meta    2  130  255     // 
 89:           array_decl  253  253  255     // 
 90:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 91:                 meta    2  130  255     // 
 92:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 93:                 meta    2  130  255     // 
 94:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 95:                 meta    2  130  255     // 
 96:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 97:                 meta    2  130  255     // 
 89:           array_decl  130    0    4     //  // REWRITE
 98:                 meta    2  130  255     // 
 99:           array_decl  253  253  255     // 
100:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
101:                 meta    2  130  255     // 
102:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
103:                 meta    2  130  255     // 
104:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
105:                 meta    2  130  255     // 
106:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
107:                 meta    2  130  255     // 
 99:           array_decl  130    0    4     //  // REWRITE
108:                 meta    2  130  255     // 
 68:           array_decl  130    0    4     //  // REWRITE
109:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
110:           array_decl  253  253  255     // 
111:           array_decl  253  253  255     // 
112:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
113:                 meta    2  130  255     // 
114:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
115:                 meta    2  130  255     // 
116:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
117:                 meta    2  130  255     // 
118:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
119:                 meta    2  130  255     // 
111:           array_decl  130    0    4     //  // REWRITE
120:                 meta    2  130  255     // 
121:           array_decl  253  253  255     // 
122:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
123:                 meta    2  130  255     // 
124:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
125:                 meta    2  130  255     // 
126:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
127:                 meta    2  130  255     // 
128:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
129:                 meta    2  130  255     // 
121:           array_decl  130    0    4     //  // REWRITE
130:                 meta    2  130  255     // 
131:           array_decl  253  253  255     // 
132:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
133:                 meta    2  130  255     // 
134:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
135:                 meta    2  130  255     // 
136:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
137:                 meta    2  130  255     // 
138:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
139:                 meta    2  130  255     // 
131:           array_decl  130    0    4     //  // REWRITE
140:                 meta    2  130  255     // 
141:           array_decl  253  253  255     // 
142:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
143:                 meta    2  130  255     // 
144:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
145:                 meta    2  130  255     // 
146:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
147:                 meta    2  130  255     // 
148:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
149:                 meta    2  130  255     // 
141:           array_decl  130    0    4     //  // REWRITE
150:                 meta    2  130  255     // 
110:           array_decl  130    0    4     //  // REWRITE
151:           assignment  254    6  130     // g = tmp130 : TYPEOF(tmp130);
152:           array_decl  253  253  255     // 
153:           array_decl  253  253  255     // 
154:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
155:                 meta    2  130  255     // 
156:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
157:                 meta    2  130  255     // 
158:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
159:                 meta    2  130  255     // 
160:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
161:                 meta    2  130  255     // 
153:           array_decl  130    0    4     //  // REWRITE
162:                 meta    2  130  255     // 
163:           array_decl  253  253  255     // 
164:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
165:                 meta    2  130  255     // 
166:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
167:                 meta    2  130  255     // 
168:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
169:                 meta    2  130  255     // 
170:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
171:                 meta    2  130  255     // 
163:           array_decl  130    0    4     //  // REWRITE
172:                 meta    2  130  255     // 
173:           array_decl  253  253  255     // 
174:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
175:                 meta    2  130  255     // 
176:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
177:                 meta    2  130  255     // 
178:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
179:                 meta    2  130  255     // 
180:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
181:                 meta    2  130  255     // 
173:           array_decl  130    0    4     //  // REWRITE
182:                 meta    2  130  255     // 
183:           array_decl  253  253  255     // 
184:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
185:                 meta    2  130  255     // 
186:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
187:                 meta    2  130  255     // 
188:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
189:                 meta    2  130  255     // 
190:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
191:                 meta    2  130  255     // 
183:           array_decl  130    0    4     //  // REWRITE
192:                 meta    2  130  255     // 
152:           array_decl  130    0    4     //  // REWRITE
193:           assignment  254    6  130     // h = tmp130 : TYPEOF(tmp130);
194:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
195:          prop_getter  131  254  130     // tmp131 = a[tmp130];
195:          construct_n  253  254  253     // 
196:          unary_minus  132  254          // tmp132 = -A;
197:                 meta    2  132  255     // 
198:          unary_minus  132  254          // tmp132 = -A;
199:                 meta    2  132  255     // 
200:                 meta    2  254  255     // 
195:          construct_n  132  254    3     //  // REWRITE
201:          prop_setter  254  130  132     // a[tmp130] = tmp132;
202:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
203:          prop_getter  131  254  130     // tmp131 = a[tmp130];
203:          construct_n  253  254  253     // 
204:          unary_minus  132  254          // tmp132 = -A;
205:                 meta    2  132  255     // 
206:                 meta    2  254  255     // 
207:                 meta    2  254  255     // 
203:          construct_n  132  254    3     //  // REWRITE
208:          prop_setter  254  130  132     // a[tmp130] = tmp132;
209:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
210:          prop_getter  131  254  130     // tmp131 = a[tmp130];
210:          construct_n  253  254  253     // 
211:                 meta    2  254  255     // 
212:                 meta    2  254  255     // 
213:                 meta    2  254  255     // 
210:          construct_n  132  254    3     //  // REWRITE
214:          prop_setter  254  130  132     // a[tmp130] = tmp132;
215:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
216:          prop_getter  131  254  130     // tmp131 = a[tmp130];
216:          construct_n  253  254  253     // 
217:                 meta    2  254  255     // 
218:          unary_minus  132  254          // tmp132 = -A;
219:                 meta    2  132  255     // 
220:                 meta    2  254  255     // 
216:          construct_n  132  254    3     //  // REWRITE
221:          prop_setter  254  130  132     // a[tmp130] = tmp132;
222:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
223:          prop_getter  131  254  130     // tmp131 = a[tmp130];
223:          construct_n  253  254  253     // 
224:          unary_minus  132  254          // tmp132 = -A;
225:                 meta    2  132  255     // 
226:          unary_minus  132  254          // tmp132 = -A;
227:                 meta    2  132  255     // 
228:          unary_minus  132  254          // tmp132 = -A;
229:                 meta    2  132  255     // 
223:          construct_n  132  254    3     //  // REWRITE
230:          prop_setter  254  130  132     // a[tmp130] = tmp132;
231:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
232:          prop_getter  131  254  130     // tmp131 = a[tmp130];
232:          construct_n  253  254  253     // 
233:          unary_minus  132  254          // tmp132 = -A;
234:                 meta    2  132  255     // 
235:                 meta    2  254  255     // 
236:          unary_minus  132  254          // tmp132 = -A;
237:                 meta    2  132  255     // 
232:          construct_n  132  254    3     //  // REWRITE
238:          prop_setter  254  130  132     // a[tmp130] = tmp132;
239:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
240:          prop_getter  131  254  130     // tmp131 = a[tmp130];
240:          construct_n  253  254  253     // 
241:                 meta    2  254  255     // 
242:                 meta    2  254  255     // 
243:          unary_minus  132  254          // tmp132 = -A;
244:                 meta    2  132  255     // 
240:          construct_n  132  254    3     //  // REWRITE
245:          prop_setter  254  130  132     // a[tmp130] = tmp132;
246:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
247:          prop_getter  131  254  130     // tmp131 = a[tmp130];
247:          construct_n  253  254  253     // 
248:                 meta    2  254  255     // 
249:          unary_minus  132  254          // tmp132 = -A;
250:                 meta    2  132  255     // 
251:          unary_minus  132  254          // tmp132 = -A;
252:                 meta    2  132  255     // 
247:          construct_n  132  254    3     //  // REWRITE
253:          prop_setter  254  130  132     // a[tmp130] = tmp132;
254:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
255:          prop_getter  131  254  130     // tmp131 = a[tmp130];
255:          construct_n  253  254  253     // 
256:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
257:                 meta    2  132  255     // 
258:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
259:                 meta    2  132  255     // 
260:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
261:                 meta    2  132  255     // 
255:          construct_n  132  254    3     //  // REWRITE
262:          prop_setter  254  130  132     // a[tmp130] = tmp132;
263:           assignment  130    5  254     // tmp130 = 'c': STRING;
264:          prop_getter  131  254  130     // tmp131 = a[tmp130];
264:           array_decl  253  253  255     // 
265:           array_decl  253  253  255     // 
266:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
267:                 meta    2  132  255     // 
268:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
269:                 meta    2  132  255     // 
270:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
271:                 meta    2  132  255     // 
265:           array_decl  132    0    3     //  // REWRITE
272:                 meta    2  132  255     // 
273:           array_decl  253  253  255     // 
274:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
275:                 meta    2  132  255     // 
276:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
277:                 meta    2  132  255     // 
278:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
279:                 meta    2  132  255     // 
273:           array_decl  132    0    3     //  // REWRITE
280:                 meta    2  132  255     // 
281:           array_decl  253  253  255     // 
282:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
283:                 meta    2  132  255     // 
284:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
285:                 meta    2  132  255     // 
286:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
287:                 meta    2  132  255     // 
281:           array_decl  132    0    3     //  // REWRITE
288:                 meta    2  132  255     // 
289:           array_decl  253  253  255     // 
290:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
291:                 meta    2  132  255     // 
292:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
293:                 meta    2  132  255     // 
294:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
295:                 meta    2  132  255     // 
289:           array_decl  132    0    3     //  // REWRITE
296:                 meta    2  132  255     // 
297:           array_decl  253  253  255     // 
298:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
299:                 meta    2  132  255     // 
300:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
301:                 meta    2  132  255     // 
302:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
303:                 meta    2  132  255     // 
297:           array_decl  132    0    3     //  // REWRITE
304:                 meta    2  132  255     // 
305:           array_decl  253  253  255     // 
306:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
307:                 meta    2  132  255     // 
308:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
309:                 meta    2  132  255     // 
310:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
311:                 meta    2  132  255     // 
305:           array_decl  132    0    3     //  // REWRITE
312:                 meta    2  132  255     // 
264:           array_decl  132    0    6     //  // REWRITE
313:          prop_setter  254  130  132     // a[tmp130] = tmp132;
314:           assignment  130    5  254     // tmp130 = 'h': STRING;
315:          prop_getter  131  254  130     // tmp131 = a[tmp130];
315:           array_decl  253  253  255     // 
315:           array_decl  132    0    0     // tmp132 = []; // REWRITE
316:          prop_setter  254  130  132     // a[tmp130] = tmp132;
317:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
318:           assignment  254    6  130     // B = tmp130 : TYPEOF(tmp130);
319:             jmp_down  253  253          // goto 65340;
// a.h,D=B,E=a[a.c[B][0]].b,F=a[a.c[B][1]].b,G=a[a.c[B][2]].b,H=[],I=[],J=0;3>J;J++)H[J]=E[J]-F[J],I[J]=G[J]-F[J];var K=H,L=I,M=[];M[0]=K[1]*L[2]-K[2]*L[1];M[1]=K[2]*L[0]-K[0]*L[2];M[2]=K[0]*L[1]-K[1]*L[0];for(var H=M,N=Math.sqrt(H[0]*H[0]+H[1]*H[1]+H[2]*H[2]),J=0;3>J;J++)H[J]/=N;H[3]=1;C[D]=H}a.a=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1];a.l=18*A;for(B=0;B<a.l;B++)t(0,0,0);f=w(f,l.b[0],l.b[1],l.b[2]);g=u(f,g);for(B=0;9>B;B++)a[B].b=v(a[B].b);x();m.i=!0;y();for(var O=0,B=0;B<a.length;++B)for(var P=a[B].b,
// a.h,D=B,E=a[a.c[B][0]].b,F=a[a.c[B][1]].b,G=a[a.c[B][2]].b,H=[],I=[],J=0;3>J;J++)H[J]=E[J]-F[J],I[J]=G[J]-F[J];var K=H,L=I,M=[];M[0]=K[1]*L[2]-K[2]*L[1];M[1]=K[2]*L[0]-K[0]*L[2];M[2]=K[0]*L[1]-K[1]*L[0];for(var H=M,N=Math.sqrt(H[0]*H[0]+H[1]*H[1]+H[2]*H[2]),J=0;3>J;J++)H[J]/=N;H[3]=1;C[D]=H}a.a=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1];a.l=18*A;for(B=0;B<a.l;B++)t(0,0,0);f=w(f,l.b[0],l.b[1],l.b[2]);g=u(f,g);for(B=0;9>B;B++)a[B].b=v(a[B].b);x();m.i=!0;y();for(var O=0,B=0;B<a.length;++B)for(var P=a[B].b,
// a.h,D=B,E=a[a.c[B][0]].b,F=a[a.c[B][1]].b,G=a[a.c[B][2]].b,H=[],I=[],J=0;3>J;J++)H[J]=E[J]-F[J],I[J]=G[J]-F[J];var K=H,L=I,M=[];M[0]=K[1]*L[2]-K[2]*L[1];M[1]=K[2]*L[0]-K[0]*L[2];M[2]=K[0]*L[1]-K[1]*L[0];for(var H=M,N=Math.sqrt(H[0]*H[0]+H[1]*H[1]+H[2]*H[2]),J=0;3>J;J++)H[J]/=N;H[3]=1;C[D]=H}a.a=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1];a.l=18*A;for(B=0;B<a.l;B++)t(0,0,0);f=w(f,l.b[0],l.b[1],l.b[2]);g=u(f,g);for(B=0;9>B;B++)a[B].b=v(a[B].b);x();m.i=!0;y();for(var O=0,B=0;B<a.length;++B)for(var P=a[B].b,
320:           assignment  130    5  254     // tmp130 = 'h': STRING;
321:          prop_getter  131  254  130     // tmp131 = a[tmp130];
322:           assignment  254    6  131     // C = tmp131 : TYPEOF(tmp131);
323:           assignment  254    6  254     // D = B : TYPEOF(B);
324:           assignment  132    5  254     // tmp132 = 'c': STRING;
325:          prop_getter  133  254  132     // tmp133 = a[tmp132];
326:          prop_getter  134  133  254     // tmp134 = tmp133[B];
327:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
328:          prop_getter  136  134  135     // tmp136 = tmp134[tmp135];
329:          prop_getter  137  254  136     // tmp137 = a[tmp136];
330:           assignment  138    5  254     // tmp138 = 'b': STRING;
331:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
332:           assignment  254    6  139     // E = tmp139 : TYPEOF(tmp139);
333:           assignment  140    5  254     // tmp140 = 'c': STRING;
334:          prop_getter  141  254  140     // tmp141 = a[tmp140];
335:          prop_getter  142  141  254     // tmp142 = tmp141[B];
336:           assignment  143    1    1     // tmp143 = 1: SMALLINT;
337:          prop_getter  144  142  143     // tmp144 = tmp142[tmp143];
338:          prop_getter  145  254  144     // tmp145 = a[tmp144];
339:           assignment  146    5  254     // tmp146 = 'b': STRING;
340:          prop_getter  147  145  146     // tmp147 = tmp145[tmp146];
341:           assignment  254    6  147     // F = tmp147 : TYPEOF(tmp147);
342:           assignment  148    5  254     // tmp148 = 'c': STRING;
343:          prop_getter  149  254  148     // tmp149 = a[tmp148];
344:          prop_getter  150  149  254     // tmp150 = tmp149[B];
345:           assignment  151    1    2     // tmp151 = 2: SMALLINT;
346:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
347:          prop_getter  153  254  152     // tmp153 = a[tmp152];
348:           assignment  154    5  254     // tmp154 = 'b': STRING;
349:          prop_getter  155  153  154     // tmp155 = tmp153[tmp154];
350:           assignment  254    6  155     // G = tmp155 : TYPEOF(tmp155);
351:           array_decl  253  253  255     // 
351:           array_decl  156    0    0     // tmp156 = []; // REWRITE
352:           assignment  254    6  156     // H = tmp156 : TYPEOF(tmp156);
353:           array_decl  253  253  255     // 
353:           array_decl  157    0    0     // tmp157 = []; // REWRITE
354:           assignment  254    6  157     // I = tmp157 : TYPEOF(tmp157);
355:           assignment  158    1    0     // tmp158 = 0: SMALLINT;
356:           assignment  254    6  158     // J = tmp158 : TYPEOF(tmp158);
357:             jmp_down  253  253          // goto 65378;
358:          prop_getter  130  254  254     // tmp130 = H[J];
358:          prop_getter  131  254  254     // tmp131 = E[J];
359:          prop_getter  132  254  254     // tmp132 = F[J];
360:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
361:          prop_setter  254  254  133     // H[J] = tmp133;
362:          prop_getter  134  254  254     // tmp134 = I[J];
362:          prop_getter  135  254  254     // tmp135 = G[J];
363:          prop_getter  136  254  254     // tmp136 = F[J];
364:         substraction  137  135  136     // tmp137 = tmp135 - tmp136;
365:          prop_setter  254  254  137     // I[J] = tmp137;
366:            post_incr  138  254          // tmp138 = J++;
357:             jmp_down    0   10          // goto 367; // REWRITE
367:           assignment  139    1    3     // tmp139 = 3: SMALLINT;
368:         greater_than  140  139  254     // tmp140 = tmp139 > J;
369:       is_true_jmp_up  140    0   11     // if (tmp140) goto 358;
370:           assignment  254    6  254     // K = H : TYPEOF(H);
371:           assignment  254    6  254     // L = I : TYPEOF(I);
372:           array_decl  253  253  255     // 
372:           array_decl  130    0    0     // tmp130 = []; // REWRITE
373:           assignment  254    6  130     // M = tmp130 : TYPEOF(tmp130);
374:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
375:          prop_getter  131  254  130     // tmp131 = M[tmp130];
375:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
376:          prop_getter  133  254  132     // tmp133 = K[tmp132];
377:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
378:          prop_getter  135  254  134     // tmp135 = L[tmp134];
379:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
380:           assignment  137    1    2     // tmp137 = 2: SMALLINT;
381:          prop_getter  138  254  137     // tmp138 = K[tmp137];
382:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
383:          prop_getter  140  254  139     // tmp140 = L[tmp139];
384:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
385:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
386:          prop_setter  254  130  142     // M[tmp130] = tmp142;
387:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
388:          prop_getter  131  254  130     // tmp131 = M[tmp130];
388:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
389:          prop_getter  133  254  132     // tmp133 = K[tmp132];
390:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
391:          prop_getter  135  254  134     // tmp135 = L[tmp134];
392:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
393:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
394:          prop_getter  138  254  137     // tmp138 = K[tmp137];
395:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
396:          prop_getter  140  254  139     // tmp140 = L[tmp139];
397:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
398:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
399:          prop_setter  254  130  142     // M[tmp130] = tmp142;
400:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
401:          prop_getter  131  254  130     // tmp131 = M[tmp130];
401:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
402:          prop_getter  133  254  132     // tmp133 = K[tmp132];
403:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
404:          prop_getter  135  254  134     // tmp135 = L[tmp134];
405:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
406:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
407:          prop_getter  138  254  137     // tmp138 = K[tmp137];
408:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
409:          prop_getter  140  254  139     // tmp140 = L[tmp139];
410:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
411:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
412:          prop_setter  254  130  142     // M[tmp130] = tmp142;
413:           assignment  254    6  254     // H = M : TYPEOF(M);
414:           assignment  130    5  254     // tmp130 = 'sqrt': STRING;
415:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
416:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
417:               call_n  253  131  253     // 
418:                 meta    1    1  132     // 
419:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
420:          prop_getter  134  254  133     // tmp134 = H[tmp133];
421:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
422:          prop_getter  136  254  135     // tmp136 = H[tmp135];
423:       multiplication  137  134  136     // tmp137 = tmp134 * tmp136;
424:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
425:          prop_getter  139  254  138     // tmp139 = H[tmp138];
426:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
427:          prop_getter  141  254  140     // tmp141 = H[tmp140];
428:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
429:             addition  143  137  142     // tmp143 = tmp137 + tmp142;
430:           assignment  144    1    2     // tmp144 = 2: SMALLINT;
431:          prop_getter  145  254  144     // tmp145 = H[tmp144];
432:           assignment  146    1    2     // tmp146 = 2: SMALLINT;
433:          prop_getter  147  254  146     // tmp147 = H[tmp146];
434:       multiplication  148  145  147     // tmp148 = tmp145 * tmp147;
435:             addition  149  143  148     // tmp149 = tmp143 + tmp148;
436:                 meta    2  149  255     // 
417:               call_n  133  131    1     //  // REWRITE
437:           assignment  254    6  133     // N = tmp133 : TYPEOF(tmp133);
438:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
439:           assignment  254    6  134     // J = tmp134 : TYPEOF(tmp134);
440:             jmp_down  253  253          // goto 65461;
441:          prop_getter  130  254  254     // tmp130 = H[J];
441:          prop_getter  131  254  254     // tmp131 = H[J];
442:             division  131  131  254     // tmp131 = tmp131 / N;
443:          prop_setter  254  254  131     // H[J] = tmp131;
444:            post_incr  132  254          // tmp132 = J++;
440:             jmp_down    0    5          // goto 445; // REWRITE
445:           assignment  133    1    3     // tmp133 = 3: SMALLINT;
446:         greater_than  134  133  254     // tmp134 = tmp133 > J;
447:       is_true_jmp_up  134    0    6     // if (tmp134) goto 441;
448:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
449:          prop_getter  131  254  130     // tmp131 = H[tmp130];
449:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
450:          prop_setter  254  130  132     // H[tmp130] = tmp132;
451:          prop_getter  130  254  254     // tmp130 = C[D];
451:          prop_setter  254  254  254     // C[D] = H;
452:           assignment  131    6  254     // tmp131 = H : TYPEOF(H);
453:            post_incr  132  254          // tmp132 = B++;
319:             jmp_down    0  135          // goto 454; // REWRITE
454:           assignment  133    6  254     // tmp133 = B : TYPEOF(B);
455:           assignment  134    5  254     // tmp134 = 'c': STRING;
456:          prop_getter  135  254  134     // tmp135 = a[tmp134];
457:           assignment  136    5  254     // tmp136 = 'length': STRING;
458:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
459:            less_than  138  133  137     // tmp138 = tmp133 < tmp137;
460:       is_true_jmp_up  138    0  140     // if (tmp138) goto 320;
461:           assignment  130    5  254     // tmp130 = 'a': STRING;
462:          prop_getter  131  254  130     // tmp131 = a[tmp130];
462:           array_decl  253  253  255     // 
463:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
464:          logical_not  133  132          // tmp133 = ! tmp132;
465:                 meta    2  133  255     // 
466:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
467:          logical_not  133  132          // tmp133 = ! tmp132;
468:                 meta    2  133  255     // 
469:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
470:          logical_not  133  132          // tmp133 = ! tmp132;
471:                 meta    2  133  255     // 
472:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
473:          logical_not  133  132          // tmp133 = ! tmp132;
474:                 meta    2  133  255     // 
475:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
476:          logical_not  133  132          // tmp133 = ! tmp132;
477:                 meta    2  133  255     // 
478:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
479:          logical_not  133  132          // tmp133 = ! tmp132;
480:                 meta    2  133  255     // 
481:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
482:          logical_not  133  132          // tmp133 = ! tmp132;
483:                 meta    2  133  255     // 
484:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
485:          logical_not  133  132          // tmp133 = ! tmp132;
486:                 meta    2  133  255     // 
487:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
488:          logical_not  133  132          // tmp133 = ! tmp132;
489:                 meta    2  133  255     // 
490:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
491:          logical_not  133  132          // tmp133 = ! tmp132;
492:                 meta    2  133  255     // 
493:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
494:          logical_not  133  132          // tmp133 = ! tmp132;
495:                 meta    2  133  255     // 
496:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
497:          logical_not  133  132          // tmp133 = ! tmp132;
498:                 meta    2  133  255     // 
462:           array_decl  132    0   12     //  // REWRITE
499:          prop_setter  254  130  132     // a[tmp130] = tmp132;
500:           assignment  130    5  254     // tmp130 = 'l': STRING;
501:          prop_getter  131  254  130     // tmp131 = a[tmp130];
501:           assignment  132    1   18     // tmp132 = 18: SMALLINT;
502:       multiplication  133  132  254     // tmp133 = tmp132 * A;
503:          prop_setter  254  130  133     // a[tmp130] = tmp133;
504:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
505:           assignment  254    6  130     // B = tmp130 : TYPEOF(tmp130);
506:             jmp_down  253  253          // goto 65527;
507:               call_n  253  254  253     // 
508:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
509:                 meta    2  130  255     // 
510:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
511:                 meta    2  130  255     // 
512:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
513:                 meta    2  130  255     // 
507:               call_n  130  254    3     //  // REWRITE
514:            post_incr  131  254          // tmp131 = B++;
506:             jmp_down    0    9          // goto 515; // REWRITE
515:           assignment  132    6  254     // tmp132 = B : TYPEOF(B);
516:           assignment  133    5  254     // tmp133 = 'l': STRING;
517:          prop_getter  134  254  133     // tmp134 = a[tmp133];
518:            less_than  135  132  134     // tmp135 = tmp132 < tmp134;
519:       is_true_jmp_up  135    0   12     // if (tmp135) goto 507;
520:               call_n  253  254  253     // 
521:                 meta    2  254  255     // 
522:           assignment  130    5  254     // tmp130 = 'b': STRING;
523:          prop_getter  131  254  130     // tmp131 = l[tmp130];
524:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
525:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
526:                 meta    2  133  255     // 
527:           assignment  130    5  254     // tmp130 = 'b': STRING;
528:          prop_getter  131  254  130     // tmp131 = l[tmp130];
529:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
530:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
531:                 meta    2  133  255     // 
532:           assignment  130    5  254     // tmp130 = 'b': STRING;
533:          prop_getter  131  254  130     // tmp131 = l[tmp130];
534:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
535:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
536:                 meta    2  133  255     // 
520:               call_n  130  254    4     //  // REWRITE
537:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
538:               call_n  253  254  253     // 
539:                 meta    2  254  255     // 
540:                 meta    2  254  255     // 
538:               call_n  130  254    2     //  // REWRITE
541:           assignment  254    6  130     // g = tmp130 : TYPEOF(tmp130);
542:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
543:           assignment  254    6  130     // B = tmp130 : TYPEOF(tmp130);
544:             jmp_down  253  253          // goto 65565;
545:          prop_getter  130  254  254     // tmp130 = a[B];
546:           assignment  131    5  254     // tmp131 = 'b': STRING;
547:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
547:               call_n  253  254  253     // 
548:          prop_getter  133  254  254     // tmp133 = a[B];
549:           assignment  134    5  254     // tmp134 = 'b': STRING;
550:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
551:                 meta    2  135  255     // 
547:               call_n  133  254    1     //  // REWRITE
552:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
553:            post_incr  134  254          // tmp134 = B++;
544:             jmp_down    0   10          // goto 554; // REWRITE
554:           assignment  135    1    9     // tmp135 = 9: SMALLINT;
555:         greater_than  136  135  254     // tmp136 = tmp135 > B;
556:       is_true_jmp_up  136    0   11     // if (tmp136) goto 545;
557:               call_n  253  254  253     // 
557:               call_n  130  254    0     //  // REWRITE
558:           assignment  130    5  254     // tmp130 = 'i': STRING;
559:          prop_getter  131  254  130     // tmp131 = m[tmp130];
559:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
560:          logical_not  133  132          // tmp133 = ! tmp132;
561:          prop_setter  254  130  133     // m[tmp130] = tmp133;
562:               call_n  253  254  253     // 
562:               call_n  130  254    0     //  // REWRITE
563:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
564:           assignment  254    6  130     // O = tmp130 : TYPEOF(tmp130);
565:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
566:           assignment  254    6  131     // B = tmp131 : TYPEOF(tmp131);
567:             jmp_down  253  253          // goto 65588;
// Q=0;Q<P.length;++Q)O+=P[Q];if(O!=n[A])throw"Error: bad vector sum for CubeSize = "+A+"; expected "+n[A]+" but got "+O;}LoopTime=m=l=h=g=f=a=null;
// Q=0;Q<P.length;++Q)O+=P[Q];if(O!=n[A])throw"Error: bad vector sum for CubeSize = "+A+"; expected "+n[A]+" but got "+O;}LoopTime=m=l=h=g=f=a=null;
568:          prop_getter  130  254  254     // tmp130 = a[B];
569:           assignment  131    5  254     // tmp131 = 'b': STRING;
570:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
571:           assignment  254    6  132     // P = tmp132 : TYPEOF(tmp132);
// Q=0;Q<P.length;++Q)O+=P[Q];if(O!=n[A])throw"Error: bad vector sum for CubeSize = "+A+"; expected "+n[A]+" but got "+O;}LoopTime=m=l=h=g=f=a=null;
572:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
573:           assignment  254    6  133     // Q = tmp133 : TYPEOF(tmp133);
574:             jmp_down  253  253          // goto 65595;
575:          prop_getter  130  254  254     // tmp130 = P[Q];
576:             addition  254  254  130     // O = O + tmp130;
577:           assignment  131    6  254     // tmp131 = O : TYPEOF(O);
578:             pre_incr  132  254          // tmp132 = ++Q;
574:             jmp_down    0    5          // goto 579; // REWRITE
579:           assignment  133    6  254     // tmp133 = Q : TYPEOF(Q);
580:           assignment  134    5  254     // tmp134 = 'length': STRING;
581:          prop_getter  135  254  134     // tmp135 = P[tmp134];
582:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
583:       is_true_jmp_up  136    0    8     // if (tmp136) goto 575;
584:             pre_incr  137  254          // tmp137 = ++B;
567:             jmp_down    0   18          // goto 585; // REWRITE
585:           assignment  138    6  254     // tmp138 = B : TYPEOF(B);
586:           assignment  139    5  254     // tmp139 = 'length': STRING;
587:          prop_getter  140  254  139     // tmp140 = a[tmp139];
588:            less_than  141  138  140     // tmp141 = tmp138 < tmp140;
589:       is_true_jmp_up  141    0   21     // if (tmp141) goto 568;
590:           assignment  130    6  254     // tmp130 = O : TYPEOF(O);
591:          prop_getter  131  254  254     // tmp131 = n[A];
592:      not_equal_value  132  130  131     // tmp132 = tmp130 != tmp131;
593:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65614;
594:           assignment  130    5  254     // tmp130 = 'Error: bad vector sum for CubeSize = ': STRING;
595:             addition  131  130  254     // tmp131 = tmp130 + A;
596:           assignment  132    5  254     // tmp132 = '; expected ': STRING;
597:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
598:          prop_getter  134  254  254     // tmp134 = n[A];
599:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
600:           assignment  136    5  254     // tmp136 = ' but got ': STRING;
601:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
602:             addition  138  137  254     // tmp138 = tmp137 + O;
603:          throw_value  138               // throw tmp138;
593:    is_false_jmp_down  132    0   11     // if (tmp132 == false) goto 604; // REWRITE
604:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
605:       multiplication  254  254  139     // z = z * tmp139;
 30:             jmp_down    2   64          // goto 606; // REWRITE
606:           assignment  140    1  160     // tmp140 = 160: SMALLINT;
607: greater_or_equal_than  141  140  254     // tmp141 = tmp140 >= z;
608:       is_true_jmp_up  141    2   65     // if (tmp141) goto 31;
609:           assignment  130    0    2     // tmp130 = null: SIMPLE;
610:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
611:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
612:           assignment  254    6  130     // g = tmp130 : TYPEOF(tmp130);
613:           assignment  254    6  130     // h = tmp130 : TYPEOF(tmp130);
614:           assignment  254    6  130     // l = tmp130 : TYPEOF(tmp130);
615:           assignment  254    6  130     // m = tmp130 : TYPEOF(tmp130);
616:           assignment  254    6  130     // LoopTime = tmp130 : TYPEOF(tmp130);
// 
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  158    0     // var tmp128 .. tmp158; // REWRITE
617:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] a : STRING
0x8a54cc [  8] f : STRING
0x8a54d4 [  4] g : MAGIC STRING [id=206] 
0x8a54d8 [  8] h : STRING
0x8a54e0 [  8] l : STRING
0x8a54e8 [  4] m : MAGIC STRING [id=208] 
0x8a54ec [  8] n : STRING
0x8a54f4 [ 12] 20 : NUMBER
0x8a5504 [ 12] 2889.0000000000045 : NUMBER
0x8a5510 [ 12] 40 : NUMBER
0x8a551c [ 12] 2889.0000000000054 : NUMBER
0x8a5528 [ 12] 80 : NUMBER
0x8a5534 [ 12] 2889.000000000005 : NUMBER
0x8a5544 [ 12] 160 : NUMBER
0x8a5550 [  8] p : STRING
0x8a5558 [  8] c : STRING
0x8a5560 [  8] b : STRING
0x8a5568 [  8] d : STRING
0x8a5570 [  4] Math : MAGIC STRING [id=44] 
0x8a5574 [  4] abs : MAGIC STRING [id=84] 
0x8a5578 [  8] e : STRING
0x8a5584 [  8] k : STRING
0x8a558c [  8] q : STRING
0x8a5594 [  8] r : STRING
0x8a559c [  4] round : MAGIC STRING [id=98] 
0x8a55a0 [  8] t : STRING
0x8a55a8 [  8] u : STRING
0x8a55b0 [  8] v : STRING
0x8a55b8 [  8] w : STRING
0x8a55c4 [  8] x : STRING
0x8a55cc [  8] y : STRING
0x8a55d4 [  8] j : STRING
0x8a55dc [  4] String : MAGIC STRING [id=31] 
0x8a55e0 [  4] length : MAGIC STRING [id=15] 
0x8a55e4 [  8] 0 : STRING
0x8a55ec [  4] PI : MAGIC STRING [id=81] 
0x8a55f0 [  4] cos : MAGIC STRING [id=90] 
0x8a55f4 [  4] sin : MAGIC STRING [id=99] 
0x8a55f8 [  8] z : STRING
0x8a5604 [  8] A : STRING
0x8a560c [  8] o : STRING
0x8a5614 [  8] s : STRING
0x8a561c [  4] i : MAGIC STRING [id=207] 
0x8a5620 [  8] B : STRING
0x8a5628 [  8] C : STRING
0x8a5630 [  8] D : STRING
0x8a5638 [  4] E : MAGIC STRING [id=76] 
0x8a563c [  8] F : STRING
0x8a5648 [  8] G : STRING
0x8a5650 [  8] H : STRING
0x8a5658 [  8] I : STRING
0x8a5660 [  8] J : STRING
0x8a5668 [  8] K : STRING
0x8a5670 [  8] L : STRING
0x8a5678 [  8] M : STRING
0x8a5684 [  8] N : STRING
0x8a568c [  4] sqrt : MAGIC STRING [id=100] 
0x8a5690 [  8] O : STRING
0x8a5698 [  8] P : STRING
0x8a56a0 [  8] Q : STRING
0x8a56a8 [ 44] Error: bad vector sum for CubeSize =  : STRING
0x8a56d8 [ 20] ; expected  : STRING
0x8a56ec [ 16]  but got  : STRING
0x8a56fc [ 16] LoopTime : STRING
0x8a5710 [ 48]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  158    0     // var tmp128 .. tmp158;
  2:             var_decl    0               // var a;
  3:             var_decl    1               // var f;
  4:             var_decl    2               // var g;
  5:             var_decl    3               // var h;
  6:             var_decl    4               // var l;
  7:             var_decl    5               // var m;
  8:             var_decl    6               // var n;
  9:             var_decl    7               // var z;
 10:             var_decl    8               // var A;
 11:             var_decl    9               // var B;
 12:             var_decl   10               // var C;
 13:             var_decl   11               // var D;
 14:             var_decl   12               // var E;
 15:             var_decl   13               // var F;
 16:             var_decl   14               // var G;
 17:             var_decl   15               // var H;
 18:             var_decl   16               // var I;
 19:             var_decl   17               // var J;
 20:             var_decl   18               // var K;
 21:             var_decl   19               // var L;
 22:             var_decl   20               // var M;
 23:             var_decl   21               // var N;
 24:             var_decl   22               // var O;
 25:             var_decl   23               // var P;
 26:             var_decl   24               // var Q;
 27:          func_decl_n   25    2          // 
 28:                 meta    2   26  255     // 
 29:                 meta    2   27  255     // function p (c, b);
 30:                 meta    7    0   87     // function end: 117;
 31:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 32:         reg_var_decl  128  150    5     // var tmp128 .. tmp150;
 33:           assignment  130    5   28     // tmp130 = 'abs': STRING;
 34:          prop_getter  131   29  130     // tmp131 = Math[tmp130];
 35:           assignment  132    6   29     // tmp132 = Math : TYPEOF(Math);
 36:               call_n  133  131    1     // 
 37:                 meta    1    1  132     // 
 38:           assignment  133    5   27     // tmp133 = 'b': STRING;
 39:          prop_getter  134   27  133     // tmp134 = b[tmp133];
 40:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
 41:          prop_getter  136  134  135     // tmp136 = tmp134[tmp135];
 42:           assignment  137    5   27     // tmp137 = 'b': STRING;
 43:          prop_getter  138   26  137     // tmp138 = c[tmp137];
 44:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 45:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
 46:         substraction  141  136  140     // tmp141 = tmp136 - tmp140;
 47:                 meta    2  141  255     // tmp133 = tmp131 (this_arg = tmp132, tmp141);
 48:           assignment  146    6  133     // tmp146 = tmp133 : TYPEOF(tmp133);
 49:           assignment  134    5   28     // tmp134 = 'abs': STRING;
 50:          prop_getter  135   29  134     // tmp135 = Math[tmp134];
 51:           assignment  136    6   29     // tmp136 = Math : TYPEOF(Math);
 52:               call_n  137  135    1     // 
 53:                 meta    1    1  136     // 
 54:           assignment  137    5   27     // tmp137 = 'b': STRING;
 55:          prop_getter  138   27  137     // tmp138 = b[tmp137];
 56:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 57:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
 58:           assignment  141    5   27     // tmp141 = 'b': STRING;
 59:          prop_getter  142   26  141     // tmp142 = c[tmp141];
 60:           assignment  143    1    1     // tmp143 = 1: SMALLINT;
 61:          prop_getter  144  142  143     // tmp144 = tmp142[tmp143];
 62:         substraction  145  140  144     // tmp145 = tmp140 - tmp144;
 63:                 meta    2  145  255     // tmp137 = tmp135 (this_arg = tmp136, tmp145);
 64:           assignment  147    6  137     // tmp147 = tmp137 : TYPEOF(tmp137);
 65:           assignment  130    6  146     // tmp130 = tmp146 : TYPEOF(tmp146);
 66: greater_or_equal_than  131  130  147     // tmp131 = tmp130 >= tmp147;
 67:    is_false_jmp_down  131    0   10     // if (tmp131 == false) goto 77;
 68:           assignment  148    6  146     // tmp148 = tmp146 : TYPEOF(tmp146);
 69:           assignment  132    6  146     // tmp132 = tmp146 : TYPEOF(tmp146);
 70:           assignment  133    6  146     // tmp133 = tmp146 : TYPEOF(tmp146);
 71:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 72:             division  135  133  134     // tmp135 = tmp133 / tmp134;
 73:           assignment  149    6  135     // tmp149 = tmp135 : TYPEOF(tmp135);
 74:           assignment  150    6  147     // tmp150 = tmp147 : TYPEOF(tmp147);
 75:           assignment  136    6  147     // tmp136 = tmp147 : TYPEOF(tmp147);
 76:             jmp_down    0   11          // goto 87;
 77:           assignment  148    6  147     // tmp148 = tmp147 : TYPEOF(tmp147);
 78:           assignment  137    6  147     // tmp137 = tmp147 : TYPEOF(tmp147);
 79:           assignment  138    6  147     // tmp138 = tmp147 : TYPEOF(tmp147);
 80:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
 81:             division  140  138  139     // tmp140 = tmp138 / tmp139;
 82:           assignment  149    6  140     // tmp149 = tmp140 : TYPEOF(tmp140);
 83:           assignment  150    6  146     // tmp150 = tmp146 : TYPEOF(tmp146);
 84:           assignment  141    6  146     // tmp141 = tmp146 : TYPEOF(tmp146);
 85:           assignment  146    6  147     // tmp146 = tmp147 : TYPEOF(tmp147);
 86:           assignment  136    6  147     // tmp136 = tmp147 : TYPEOF(tmp147);
 87:           assignment  130    5    0     // tmp130 = 'round': STRING;
 88:          prop_getter  131    1  130     // tmp131 = Math[tmp130];
 89:           assignment  132    6    1     // tmp132 = Math : TYPEOF(Math);
 90:               call_n  133  131    1     // 
 91:                 meta    1    1  132     // 
 92:           assignment  133    5    2     // tmp133 = 'f': STRING;
 93:          prop_getter  134    3  133     // tmp134 = a[tmp133];
 94:             addition  135  134  146     // tmp135 = tmp134 + tmp146;
 95:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
 96:           assignment  146    6  133     // tmp146 = tmp133 : TYPEOF(tmp133);
 97:           assignment  130    5    2     // tmp130 = 'f': STRING;
 98:          prop_getter  131    3  130     // tmp131 = a[tmp130];
 99:           assignment  147    6  131     // tmp147 = tmp131 : TYPEOF(tmp131);
100:             jmp_down    0   10          // goto 110;
101:             addition  149  149  150     // tmp149 = tmp149 + tmp150;
102:           assignment  130    6  149     // tmp130 = tmp149 : TYPEOF(tmp149);
103:           assignment  131    6  149     // tmp131 = tmp149 : TYPEOF(tmp149);
104: greater_or_equal_than  132  131  148     // tmp132 = tmp131 >= tmp148;
105:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
106:    is_false_jmp_down  133    0    3     // if (tmp133 == false) goto 109;
107:         substraction  149  149  148     // tmp149 = tmp149 - tmp148;
108:           assignment  133    6  149     // tmp133 = tmp149 : TYPEOF(tmp149);
109:            post_incr  134  147          // tmp134 = tmp147++;
110:           assignment  135    6  147     // tmp135 = tmp147 : TYPEOF(tmp147);
111:            less_than  136  135  146     // tmp136 = tmp135 < tmp146;
112:       is_true_jmp_up  136    0   11     // if (tmp136) goto 101;
113:           assignment  130    5    2     // tmp130 = 'f': STRING;
114:          prop_setter    3  130  146     // a[tmp130] = tmp146;
115:           assignment  132    6  146     // tmp132 = tmp146 : TYPEOF(tmp146);
116:                  ret                    // ret;
117:          func_decl_n    4    3          // 
118:                 meta    2    5  255     // 
119:                 meta    2    6  255     // 
120:                 meta    2    7  255     // function t (c, b, d);
121:                 meta    7    0   13     // function end: 134;
122:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
123:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
124:         this_binding  130               // tmp130 = this;
125:           assignment  131    5    6     // tmp131 = 'b': STRING;
126:           array_decl  133    0    4     // 
127:                 meta    2    5  255     // 
128:                 meta    2    0  255     // 
129:                 meta    2    1  255     // 
130:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
131:                 meta    2  133  255     // tmp133 = [c, b, d, tmp133];
132:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
133:                  ret                    // ret;
134:          func_decl_n    2    2          // 
135:                 meta    2    3  255     // 
136:                 meta    2    0  255     // function u (c, b);
137:                 meta    7    0   64     // function end: 201;
138:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
139:         reg_var_decl  128  171    3     // var tmp128 .. tmp171;
140:           array_decl  130    0    4     // 
141:           array_decl  130    0    0     // tmp130 = [];
142:                 meta    2  130  255     // 
143:           array_decl  130    0    0     // tmp130 = [];
144:                 meta    2  130  255     // 
145:           array_decl  130    0    0     // tmp130 = [];
146:                 meta    2  130  255     // 
147:           array_decl  130    0    0     // tmp130 = [];
148:                 meta    2  130  255     // tmp130 = [tmp130];
149:           assignment  169    6  130     // tmp169 = tmp130 : TYPEOF(tmp130);
150:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
151:           assignment  170    6  131     // tmp170 = tmp131 : TYPEOF(tmp131);
152:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
153:           assignment  171    6  132     // tmp171 = tmp132 : TYPEOF(tmp132);
154:             jmp_down    0   42          // goto 196;
155:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
156:           assignment  171    6  130     // tmp171 = tmp130 : TYPEOF(tmp130);
157:             jmp_down    0   35          // goto 192;
158:          prop_getter  130  169  170     // tmp130 = tmp169[tmp170];
159:          prop_getter  132    3  170     // tmp132 = c[tmp170];
160:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
161:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
162:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
163:          prop_getter  136    0  135     // tmp136 = b[tmp135];
164:          prop_getter  137  136  171     // tmp137 = tmp136[tmp171];
165:       multiplication  138  134  137     // tmp138 = tmp134 * tmp137;
166:          prop_getter  139    3  170     // tmp139 = c[tmp170];
167:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
168:          prop_getter  141  139  140     // tmp141 = tmp139[tmp140];
169:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
170:          prop_getter  143    0  142     // tmp143 = b[tmp142];
171:          prop_getter  144  143  171     // tmp144 = tmp143[tmp171];
172:       multiplication  145  141  144     // tmp145 = tmp141 * tmp144;
173:             addition  146  138  145     // tmp146 = tmp138 + tmp145;
174:          prop_getter  147    3  170     // tmp147 = c[tmp170];
175:           assignment  148    1    2     // tmp148 = 2: SMALLINT;
176:          prop_getter  149  147  148     // tmp149 = tmp147[tmp148];
177:           assignment  150    1    2     // tmp150 = 2: SMALLINT;
178:          prop_getter  151    0  150     // tmp151 = b[tmp150];
179:          prop_getter  152  151  171     // tmp152 = tmp151[tmp171];
180:       multiplication  153  149  152     // tmp153 = tmp149 * tmp152;
181:             addition  154  146  153     // tmp154 = tmp146 + tmp153;
182:          prop_getter  155    3  170     // tmp155 = c[tmp170];
183:           assignment  156    1    3     // tmp156 = 3: SMALLINT;
184:          prop_getter  157  155  156     // tmp157 = tmp155[tmp156];
185:           assignment  158    1    3     // tmp158 = 3: SMALLINT;
186:          prop_getter  159    0  158     // tmp159 = b[tmp158];
187:          prop_getter  160  159  171     // tmp160 = tmp159[tmp171];
188:       multiplication  161  157  160     // tmp161 = tmp157 * tmp160;
189:             addition  162  154  161     // tmp162 = tmp154 + tmp161;
190:          prop_setter  130  171  162     // tmp130[tmp171] = tmp162;
191:            post_incr  163  171          // tmp163 = tmp171++;
192:           assignment  164    1    4     // tmp164 = 4: SMALLINT;
193:         greater_than  165  164  171     // tmp165 = tmp164 > tmp171;
194:       is_true_jmp_up  165    0   36     // if (tmp165) goto 158;
195:            post_incr  166  170          // tmp166 = tmp170++;
196:           assignment  167    1    4     // tmp167 = 4: SMALLINT;
197:         greater_than  168  167  170     // tmp168 = tmp167 > tmp170;
198:       is_true_jmp_up  168    0   43     // if (tmp168) goto 155;
199:               retval  169               // return tmp169;
200:                  ret                    // ret;
201:          func_decl_n    0    1          // 
202:                 meta    2    1  255     // function v (c);
203:                 meta    7    0   43     // function end: 246;
204:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
205:         reg_var_decl  128  163    3     // var tmp128 .. tmp163;
206:           assignment  161    6    2     // tmp161 = f : TYPEOF(f);
207:           array_decl  130    0    0     // tmp130 = [];
208:           assignment  162    6  130     // tmp162 = tmp130 : TYPEOF(tmp130);
209:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
210:           assignment  163    6  131     // tmp163 = tmp131 : TYPEOF(tmp131);
211:             jmp_down    0   30          // goto 241;
212:          prop_getter  131  161  163     // tmp131 = tmp161[tmp163];
213:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
214:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
215:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
216:          prop_getter  135    1  134     // tmp135 = c[tmp134];
217:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
218:          prop_getter  137  161  163     // tmp137 = tmp161[tmp163];
219:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
220:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
221:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
222:          prop_getter  141    1  140     // tmp141 = c[tmp140];
223:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
224:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
225:          prop_getter  144  161  163     // tmp144 = tmp161[tmp163];
226:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
227:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
228:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
229:          prop_getter  148    1  147     // tmp148 = c[tmp147];
230:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
231:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
232:          prop_getter  151  161  163     // tmp151 = tmp161[tmp163];
233:           assignment  152    1    3     // tmp152 = 3: SMALLINT;
234:          prop_getter  153  151  152     // tmp153 = tmp151[tmp152];
235:           assignment  154    1    3     // tmp154 = 3: SMALLINT;
236:          prop_getter  155    1  154     // tmp155 = c[tmp154];
237:       multiplication  156  153  155     // tmp156 = tmp153 * tmp155;
238:             addition  157  150  156     // tmp157 = tmp150 + tmp156;
239:          prop_setter  162  163  157     // tmp162[tmp163] = tmp157;
240:            post_incr  158  163          // tmp158 = tmp163++;
241:           assignment  159    1    4     // tmp159 = 4: SMALLINT;
242:         greater_than  160  159  163     // tmp160 = tmp159 > tmp163;
243:       is_true_jmp_up  160    0   31     // if (tmp160) goto 212;
244:               retval  162               // return tmp162;
245:                  ret                    // ret;
246:          func_decl_n    3    4          // 
247:                 meta    2    1  255     // 
248:                 meta    2    4  255     // 
249:                 meta    2    5  255     // 
250:                 meta    2    6  255     // function w (c, b, d, e);
251:                 meta    7    0   46     // function end: 297;
252:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
253:         reg_var_decl  128  130    0     // var tmp128 .. tmp130;
254:               call_n  130    7    2     // 
255:           array_decl  130    0    4     // 
256:           array_decl  130    0    4     // 
257:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
258:                 meta    2  130  255     // 
259:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
260:                 meta    2  130  255     // 
261:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
262:                 meta    2  130  255     // 
263:                 meta    2    0  255     // tmp130 = [tmp130, tmp130, tmp130, b];
264:                 meta    2  130  255     // 
265:           array_decl  130    0    4     // 
266:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
267:                 meta    2  130  255     // 
268:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
269:                 meta    2  130  255     // 
270:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
271:                 meta    2  130  255     // 
272:                 meta    2    1  255     // tmp130 = [tmp130, tmp130, tmp130, d];
273:                 meta    2  130  255     // 
274:           array_decl  130    0    4     // 
275:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
276:                 meta    2  130  255     // 
277:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
278:                 meta    2  130  255     // 
279:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
280:                 meta    2  130  255     // 
281:                 meta    2    2  255     // tmp130 = [tmp130, tmp130, tmp130, e];
282:                 meta    2  130  255     // 
283:           array_decl  130    0    4     // 
284:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
285:                 meta    2  130  255     // 
286:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
287:                 meta    2  130  255     // 
288:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
289:                 meta    2  130  255     // 
290:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
291:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
292:                 meta    2  130  255     // 
293:                 meta    2  130  255     // 
294:                 meta    2    3  255     // 
295:               retval  130               // return tmp130;
296:                  ret                    // ret;
297:          func_decl_n    4    0          // function x ();
298:                 meta    7    2  119     // function end: 929;
299:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
300:         reg_var_decl  128  191    7     // var tmp128 .. tmp191;
301:           array_decl  130    0    0     // tmp130 = [];
302:           assignment  185    6  130     // tmp185 = tmp130 : TYPEOF(tmp130);
303:           assignment  131    1    5     // tmp131 = 5: SMALLINT;
304:           assignment  186    6  131     // tmp186 = tmp131 : TYPEOF(tmp131);
305:           assignment  130    5    5     // tmp130 = 'f': STRING;
306:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
307:          prop_setter    6  130  132     // a[tmp130] = tmp132;
308:             jmp_down    0   40          // goto 348;
309:           assignment  187    6  186     // tmp187 = tmp186 : TYPEOF(tmp186);
310:           assignment  130    5    7     // tmp130 = 'h': STRING;
311:          prop_getter  131    6  130     // tmp131 = a[tmp130];
312:          prop_getter  132  131  186     // tmp132 = tmp131[tmp186];
313:           assignment  188    6  132     // tmp188 = tmp132 : TYPEOF(tmp132);
314:           assignment  189    6    8     // tmp189 = g : TYPEOF(g);
315:           array_decl  133    0    0     // tmp133 = [];
316:           assignment  190    6  133     // tmp190 = tmp133 : TYPEOF(tmp133);
317:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
318:           assignment  191    6  134     // tmp191 = tmp134 : TYPEOF(tmp134);
319:             jmp_down    0   23          // goto 342;
320:          prop_getter  131  189  191     // tmp131 = tmp189[tmp191];
321:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
322:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
323:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
324:          prop_getter  135  188  134     // tmp135 = tmp188[tmp134];
325:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
326:          prop_getter  137  189  191     // tmp137 = tmp189[tmp191];
327:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
328:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
329:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
330:          prop_getter  141  188  140     // tmp141 = tmp188[tmp140];
331:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
332:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
333:          prop_getter  144  189  191     // tmp144 = tmp189[tmp191];
334:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
335:          prop_getter  146  144  145     // tmp146 = tmp144[tmp145];
336:           assignment  147    1    2     // tmp147 = 2: SMALLINT;
337:          prop_getter  148  188  147     // tmp148 = tmp188[tmp147];
338:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
339:             addition  150  143  149     // tmp150 = tmp143 + tmp149;
340:          prop_setter  190  191  150     // tmp190[tmp191] = tmp150;
341:            post_incr  151  191          // tmp151 = tmp191++;
342:           assignment  152    1    3     // tmp152 = 3: SMALLINT;
343:         greater_than  153  152  191     // tmp153 = tmp152 > tmp191;
344:       is_true_jmp_up  153    0   24     // if (tmp153) goto 320;
345:          prop_setter  185  187  190     // tmp185[tmp187] = tmp190;
346:           assignment  131    6  190     // tmp131 = tmp190 : TYPEOF(tmp190);
347:            post_decr  132  186          // tmp132 = tmp186--;
348:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
349:          unary_minus  134  133          // tmp134 = -tmp133;
350:            less_than  135  134  186     // tmp135 = tmp134 < tmp186;
351:       is_true_jmp_up  135    0   42     // if (tmp135) goto 309;
352:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
353:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
354:          prop_getter  132  185  131     // tmp132 = tmp185[tmp131];
355:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
356:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
357:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
358:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
359:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 441;
360:           assignment  137    5    0     // tmp137 = 'a': STRING;
361:          prop_getter  138    0  137     // tmp138 = a[tmp137];
362:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
363:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
364:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
365:     is_true_jmp_down  141    0   15     // if (tmp141) goto 380;
366:               call_n  142    1    2     // 
367:           assignment  142    1    0     // tmp142 = 0: SMALLINT;
368:          prop_getter  143    0  142     // tmp143 = a[tmp142];
369:                 meta    2  143  255     // 
370:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
371:          prop_getter  143    0  142     // tmp143 = a[tmp142];
372:                 meta    2  143  255     // tmp142 = p (tmp143, tmp143);
373:           assignment  143    5    0     // tmp143 = 'a': STRING;
374:          prop_getter  144    0  143     // tmp144 = a[tmp143];
375:           assignment  145    1    0     // tmp145 = 0: SMALLINT;
376:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
377:          logical_not  148  147          // tmp148 = ! tmp147;
378:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
379:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
380:           assignment  149    5    0     // tmp149 = 'a': STRING;
381:          prop_getter  150    0  149     // tmp150 = a[tmp149];
382:           assignment  151    1    1     // tmp151 = 1: SMALLINT;
383:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
384:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
385:     is_true_jmp_down  153    0   15     // if (tmp153) goto 400;
386:               call_n  154    0    2     // 
387:           assignment  154    1    1     // tmp154 = 1: SMALLINT;
388:          prop_getter  155    1  154     // tmp155 = a[tmp154];
389:                 meta    2  155  255     // 
390:           assignment  154    1    2     // tmp154 = 2: SMALLINT;
391:          prop_getter  155    1  154     // tmp155 = a[tmp154];
392:                 meta    2  155  255     // tmp154 = p (tmp155, tmp155);
393:           assignment  155    5    1     // tmp155 = 'a': STRING;
394:          prop_getter  156    1  155     // tmp156 = a[tmp155];
395:           assignment  157    1    1     // tmp157 = 1: SMALLINT;
396:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
397:          logical_not  160  159          // tmp160 = ! tmp159;
398:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
399:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
400:           assignment  161    5    1     // tmp161 = 'a': STRING;
401:          prop_getter  162    1  161     // tmp162 = a[tmp161];
402:           assignment  163    1    2     // tmp163 = 2: SMALLINT;
403:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
404:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
405:     is_true_jmp_down  165    0   15     // if (tmp165) goto 420;
406:               call_n  166    0    2     // 
407:           assignment  166    1    2     // tmp166 = 2: SMALLINT;
408:          prop_getter  167    1  166     // tmp167 = a[tmp166];
409:                 meta    2  167  255     // 
410:           assignment  166    1    3     // tmp166 = 3: SMALLINT;
411:          prop_getter  167    1  166     // tmp167 = a[tmp166];
412:                 meta    2  167  255     // tmp166 = p (tmp167, tmp167);
413:           assignment  167    5    1     // tmp167 = 'a': STRING;
414:          prop_getter  168    1  167     // tmp168 = a[tmp167];
415:           assignment  169    1    2     // tmp169 = 2: SMALLINT;
416:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
417:          logical_not  172  171          // tmp172 = ! tmp171;
418:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
419:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
420:           assignment  173    5    1     // tmp173 = 'a': STRING;
421:          prop_getter  174    1  173     // tmp174 = a[tmp173];
422:           assignment  175    1    3     // tmp175 = 3: SMALLINT;
423:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
424:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
425:     is_true_jmp_down  177    0   15     // if (tmp177) goto 440;
426:               call_n  178    0    2     // 
427:           assignment  178    1    3     // tmp178 = 3: SMALLINT;
428:          prop_getter  179    1  178     // tmp179 = a[tmp178];
429:                 meta    2  179  255     // 
430:           assignment  178    1    0     // tmp178 = 0: SMALLINT;
431:          prop_getter  179    1  178     // tmp179 = a[tmp178];
432:                 meta    2  179  255     // tmp178 = p (tmp179, tmp179);
433:           assignment  179    5    1     // tmp179 = 'a': STRING;
434:          prop_getter  180    1  179     // tmp180 = a[tmp179];
435:           assignment  181    1    3     // tmp181 = 3: SMALLINT;
436:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
437:          logical_not  184  183          // tmp184 = ! tmp183;
438:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
439:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
440:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
441:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
442:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
443:          prop_getter  132  185  131     // tmp132 = tmp185[tmp131];
444:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
445:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
446:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
447:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
448:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 530;
449:           assignment  137    5    0     // tmp137 = 'a': STRING;
450:          prop_getter  138    0  137     // tmp138 = a[tmp137];
451:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
452:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
453:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
454:     is_true_jmp_down  141    0   15     // if (tmp141) goto 469;
455:               call_n  142    1    2     // 
456:           assignment  142    1    3     // tmp142 = 3: SMALLINT;
457:          prop_getter  143    0  142     // tmp143 = a[tmp142];
458:                 meta    2  143  255     // 
459:           assignment  142    1    2     // tmp142 = 2: SMALLINT;
460:          prop_getter  143    0  142     // tmp143 = a[tmp142];
461:                 meta    2  143  255     // tmp142 = p (tmp143, tmp143);
462:           assignment  143    5    0     // tmp143 = 'a': STRING;
463:          prop_getter  144    0  143     // tmp144 = a[tmp143];
464:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
465:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
466:          logical_not  148  147          // tmp148 = ! tmp147;
467:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
468:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
469:           assignment  149    5    0     // tmp149 = 'a': STRING;
470:          prop_getter  150    0  149     // tmp150 = a[tmp149];
471:           assignment  151    1    9     // tmp151 = 9: SMALLINT;
472:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
473:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
474:     is_true_jmp_down  153    0   15     // if (tmp153) goto 489;
475:               call_n  154    1    2     // 
476:           assignment  154    1    2     // tmp154 = 2: SMALLINT;
477:          prop_getter  155    0  154     // tmp155 = a[tmp154];
478:                 meta    2  155  255     // 
479:           assignment  154    1    6     // tmp154 = 6: SMALLINT;
480:          prop_getter  155    0  154     // tmp155 = a[tmp154];
481:                 meta    2  155  255     // tmp154 = p (tmp155, tmp155);
482:           assignment  155    5    0     // tmp155 = 'a': STRING;
483:          prop_getter  156    0  155     // tmp156 = a[tmp155];
484:           assignment  157    1    9     // tmp157 = 9: SMALLINT;
485:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
486:          logical_not  160  159          // tmp160 = ! tmp159;
487:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
488:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
489:           assignment  161    5    0     // tmp161 = 'a': STRING;
490:          prop_getter  162    0  161     // tmp162 = a[tmp161];
491:           assignment  163    1    6     // tmp163 = 6: SMALLINT;
492:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
493:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
494:     is_true_jmp_down  165    0   15     // if (tmp165) goto 509;
495:               call_n  166    1    2     // 
496:           assignment  166    1    6     // tmp166 = 6: SMALLINT;
497:          prop_getter  167    0  166     // tmp167 = a[tmp166];
498:                 meta    2  167  255     // 
499:           assignment  166    1    7     // tmp166 = 7: SMALLINT;
500:          prop_getter  167    0  166     // tmp167 = a[tmp166];
501:                 meta    2  167  255     // tmp166 = p (tmp167, tmp167);
502:           assignment  167    5    0     // tmp167 = 'a': STRING;
503:          prop_getter  168    0  167     // tmp168 = a[tmp167];
504:           assignment  169    1    6     // tmp169 = 6: SMALLINT;
505:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
506:          logical_not  172  171          // tmp172 = ! tmp171;
507:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
508:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
509:           assignment  173    5    0     // tmp173 = 'a': STRING;
510:          prop_getter  174    0  173     // tmp174 = a[tmp173];
511:           assignment  175    1   10     // tmp175 = 10: SMALLINT;
512:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
513:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
514:     is_true_jmp_down  177    0   15     // if (tmp177) goto 529;
515:               call_n  178    0    2     // 
516:           assignment  178    1    7     // tmp178 = 7: SMALLINT;
517:          prop_getter  179    1  178     // tmp179 = a[tmp178];
518:                 meta    2  179  255     // 
519:           assignment  178    1    3     // tmp178 = 3: SMALLINT;
520:          prop_getter  179    1  178     // tmp179 = a[tmp178];
521:                 meta    2  179  255     // tmp178 = p (tmp179, tmp179);
522:           assignment  179    5    1     // tmp179 = 'a': STRING;
523:          prop_getter  180    1  179     // tmp180 = a[tmp179];
524:           assignment  181    1   10     // tmp181 = 10: SMALLINT;
525:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
526:          logical_not  184  183          // tmp184 = ! tmp183;
527:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
528:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
529:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
530:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
531:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
532:          prop_getter  132  185  131     // tmp132 = tmp185[tmp131];
533:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
534:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
535:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
536:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
537:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 619;
538:           assignment  137    5    1     // tmp137 = 'a': STRING;
539:          prop_getter  138    1  137     // tmp138 = a[tmp137];
540:           assignment  139    1    4     // tmp139 = 4: SMALLINT;
541:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
542:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
543:     is_true_jmp_down  141    0   15     // if (tmp141) goto 558;
544:               call_n  142    0    2     // 
545:           assignment  142    1    4     // tmp142 = 4: SMALLINT;
546:          prop_getter  143    1  142     // tmp143 = a[tmp142];
547:                 meta    2  143  255     // 
548:           assignment  142    1    5     // tmp142 = 5: SMALLINT;
549:          prop_getter  143    1  142     // tmp143 = a[tmp142];
550:                 meta    2  143  255     // tmp142 = p (tmp143, tmp143);
551:           assignment  143    5    1     // tmp143 = 'a': STRING;
552:          prop_getter  144    1  143     // tmp144 = a[tmp143];
553:           assignment  145    1    4     // tmp145 = 4: SMALLINT;
554:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
555:          logical_not  148  147          // tmp148 = ! tmp147;
556:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
557:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
558:           assignment  149    5    1     // tmp149 = 'a': STRING;
559:          prop_getter  150    1  149     // tmp150 = a[tmp149];
560:           assignment  151    1    5     // tmp151 = 5: SMALLINT;
561:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
562:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
563:     is_true_jmp_down  153    0   15     // if (tmp153) goto 578;
564:               call_n  154    0    2     // 
565:           assignment  154    1    5     // tmp154 = 5: SMALLINT;
566:          prop_getter  155    1  154     // tmp155 = a[tmp154];
567:                 meta    2  155  255     // 
568:           assignment  154    1    6     // tmp154 = 6: SMALLINT;
569:          prop_getter  155    1  154     // tmp155 = a[tmp154];
570:                 meta    2  155  255     // tmp154 = p (tmp155, tmp155);
571:           assignment  155    5    1     // tmp155 = 'a': STRING;
572:          prop_getter  156    1  155     // tmp156 = a[tmp155];
573:           assignment  157    1    5     // tmp157 = 5: SMALLINT;
574:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
575:          logical_not  160  159          // tmp160 = ! tmp159;
576:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
577:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
578:           assignment  161    5    0     // tmp161 = 'a': STRING;
579:          prop_getter  162    0  161     // tmp162 = a[tmp161];
580:           assignment  163    1    6     // tmp163 = 6: SMALLINT;
581:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
582:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
583:     is_true_jmp_down  165    0   15     // if (tmp165) goto 598;
584:               call_n  166    1    2     // 
585:           assignment  166    1    6     // tmp166 = 6: SMALLINT;
586:          prop_getter  167    0  166     // tmp167 = a[tmp166];
587:                 meta    2  167  255     // 
588:           assignment  166    1    7     // tmp166 = 7: SMALLINT;
589:          prop_getter  167    0  166     // tmp167 = a[tmp166];
590:                 meta    2  167  255     // tmp166 = p (tmp167, tmp167);
591:           assignment  167    5    0     // tmp167 = 'a': STRING;
592:          prop_getter  168    0  167     // tmp168 = a[tmp167];
593:           assignment  169    1    6     // tmp169 = 6: SMALLINT;
594:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
595:          logical_not  172  171          // tmp172 = ! tmp171;
596:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
597:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
598:           assignment  173    5    0     // tmp173 = 'a': STRING;
599:          prop_getter  174    0  173     // tmp174 = a[tmp173];
600:           assignment  175    1    7     // tmp175 = 7: SMALLINT;
601:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
602:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
603:     is_true_jmp_down  177    0   15     // if (tmp177) goto 618;
604:               call_n  178    1    2     // 
605:           assignment  178    1    7     // tmp178 = 7: SMALLINT;
606:          prop_getter  179    0  178     // tmp179 = a[tmp178];
607:                 meta    2  179  255     // 
608:           assignment  178    1    4     // tmp178 = 4: SMALLINT;
609:          prop_getter  179    0  178     // tmp179 = a[tmp178];
610:                 meta    2  179  255     // tmp178 = p (tmp179, tmp179);
611:           assignment  179    5    0     // tmp179 = 'a': STRING;
612:          prop_getter  180    0  179     // tmp180 = a[tmp179];
613:           assignment  181    1    7     // tmp181 = 7: SMALLINT;
614:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
615:          logical_not  184  183          // tmp184 = ! tmp183;
616:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
617:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
618:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
619:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
620:           assignment  131    1    3     // tmp131 = 3: SMALLINT;
621:          prop_getter  132  185  131     // tmp132 = tmp185[tmp131];
622:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
623:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
624:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
625:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
626:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 708;
627:           assignment  137    5    0     // tmp137 = 'a': STRING;
628:          prop_getter  138    0  137     // tmp138 = a[tmp137];
629:           assignment  139    1    4     // tmp139 = 4: SMALLINT;
630:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
631:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
632:     is_true_jmp_down  141    0   15     // if (tmp141) goto 647;
633:               call_n  142    1    2     // 
634:           assignment  142    1    4     // tmp142 = 4: SMALLINT;
635:          prop_getter  143    0  142     // tmp143 = a[tmp142];
636:                 meta    2  143  255     // 
637:           assignment  142    1    5     // tmp142 = 5: SMALLINT;
638:          prop_getter  143    0  142     // tmp143 = a[tmp142];
639:                 meta    2  143  255     // tmp142 = p (tmp143, tmp143);
640:           assignment  143    5    0     // tmp143 = 'a': STRING;
641:          prop_getter  144    0  143     // tmp144 = a[tmp143];
642:           assignment  145    1    4     // tmp145 = 4: SMALLINT;
643:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
644:          logical_not  148  147          // tmp148 = ! tmp147;
645:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
646:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
647:           assignment  149    5    0     // tmp149 = 'a': STRING;
648:          prop_getter  150    0  149     // tmp150 = a[tmp149];
649:           assignment  151    1    8     // tmp151 = 8: SMALLINT;
650:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
651:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
652:     is_true_jmp_down  153    0   15     // if (tmp153) goto 667;
653:               call_n  154    1    2     // 
654:           assignment  154    1    5     // tmp154 = 5: SMALLINT;
655:          prop_getter  155    0  154     // tmp155 = a[tmp154];
656:                 meta    2  155  255     // 
657:           assignment  154    1    1     // tmp154 = 1: SMALLINT;
658:          prop_getter  155    0  154     // tmp155 = a[tmp154];
659:                 meta    2  155  255     // tmp154 = p (tmp155, tmp155);
660:           assignment  155    5    0     // tmp155 = 'a': STRING;
661:          prop_getter  156    0  155     // tmp156 = a[tmp155];
662:           assignment  157    1    8     // tmp157 = 8: SMALLINT;
663:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
664:          logical_not  160  159          // tmp160 = ! tmp159;
665:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
666:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
667:           assignment  161    5    0     // tmp161 = 'a': STRING;
668:          prop_getter  162    0  161     // tmp162 = a[tmp161];
669:           assignment  163    1    0     // tmp163 = 0: SMALLINT;
670:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
671:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
672:     is_true_jmp_down  165    0   15     // if (tmp165) goto 687;
673:               call_n  166    1    2     // 
674:           assignment  166    1    1     // tmp166 = 1: SMALLINT;
675:          prop_getter  167    0  166     // tmp167 = a[tmp166];
676:                 meta    2  167  255     // 
677:           assignment  166    1    0     // tmp166 = 0: SMALLINT;
678:          prop_getter  167    0  166     // tmp167 = a[tmp166];
679:                 meta    2  167  255     // tmp166 = p (tmp167, tmp167);
680:           assignment  167    5    0     // tmp167 = 'a': STRING;
681:          prop_getter  168    0  167     // tmp168 = a[tmp167];
682:           assignment  169    1    0     // tmp169 = 0: SMALLINT;
683:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
684:          logical_not  172  171          // tmp172 = ! tmp171;
685:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
686:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
687:           assignment  173    5    0     // tmp173 = 'a': STRING;
688:          prop_getter  174    0  173     // tmp174 = a[tmp173];
689:           assignment  175    1   11     // tmp175 = 11: SMALLINT;
690:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
691:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
692:     is_true_jmp_down  177    0   15     // if (tmp177) goto 707;
693:               call_n  178    1    2     // 
694:           assignment  178    1    0     // tmp178 = 0: SMALLINT;
695:          prop_getter  179    0  178     // tmp179 = a[tmp178];
696:                 meta    2  179  255     // 
697:           assignment  178    1    4     // tmp178 = 4: SMALLINT;
698:          prop_getter  179    0  178     // tmp179 = a[tmp178];
699:                 meta    2  179  255     // tmp178 = p (tmp179, tmp179);
700:           assignment  179    5    0     // tmp179 = 'a': STRING;
701:          prop_getter  180    0  179     // tmp180 = a[tmp179];
702:           assignment  181    1   11     // tmp181 = 11: SMALLINT;
703:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
704:          logical_not  184  183          // tmp184 = ! tmp183;
705:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
706:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
707:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
708:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
709:           assignment  131    1    4     // tmp131 = 4: SMALLINT;
710:          prop_getter  132  185  131     // tmp132 = tmp185[tmp131];
711:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
712:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
713:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
714:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
715:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 797;
716:           assignment  137    5    0     // tmp137 = 'a': STRING;
717:          prop_getter  138    0  137     // tmp138 = a[tmp137];
718:           assignment  139    1   11     // tmp139 = 11: SMALLINT;
719:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
720:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
721:     is_true_jmp_down  141    0   15     // if (tmp141) goto 736;
722:               call_n  142    1    2     // 
723:           assignment  142    1    4     // tmp142 = 4: SMALLINT;
724:          prop_getter  143    0  142     // tmp143 = a[tmp142];
725:                 meta    2  143  255     // 
726:           assignment  142    1    0     // tmp142 = 0: SMALLINT;
727:          prop_getter  143    0  142     // tmp143 = a[tmp142];
728:                 meta    2  143  255     // tmp142 = p (tmp143, tmp143);
729:           assignment  143    5    0     // tmp143 = 'a': STRING;
730:          prop_getter  144    0  143     // tmp144 = a[tmp143];
731:           assignment  145    1   11     // tmp145 = 11: SMALLINT;
732:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
733:          logical_not  148  147          // tmp148 = ! tmp147;
734:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
735:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
736:           assignment  149    5    0     // tmp149 = 'a': STRING;
737:          prop_getter  150    0  149     // tmp150 = a[tmp149];
738:           assignment  151    1    3     // tmp151 = 3: SMALLINT;
739:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
740:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
741:     is_true_jmp_down  153    0   15     // if (tmp153) goto 756;
742:               call_n  154    1    2     // 
743:           assignment  154    1    0     // tmp154 = 0: SMALLINT;
744:          prop_getter  155    0  154     // tmp155 = a[tmp154];
745:                 meta    2  155  255     // 
746:           assignment  154    1    3     // tmp154 = 3: SMALLINT;
747:          prop_getter  155    0  154     // tmp155 = a[tmp154];
748:                 meta    2  155  255     // tmp154 = p (tmp155, tmp155);
749:           assignment  155    5    0     // tmp155 = 'a': STRING;
750:          prop_getter  156    0  155     // tmp156 = a[tmp155];
751:           assignment  157    1    3     // tmp157 = 3: SMALLINT;
752:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
753:          logical_not  160  159          // tmp160 = ! tmp159;
754:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
755:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
756:           assignment  161    5    0     // tmp161 = 'a': STRING;
757:          prop_getter  162    0  161     // tmp162 = a[tmp161];
758:           assignment  163    1   10     // tmp163 = 10: SMALLINT;
759:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
760:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
761:     is_true_jmp_down  165    0   15     // if (tmp165) goto 776;
762:               call_n  166    1    2     // 
763:           assignment  166    1    3     // tmp166 = 3: SMALLINT;
764:          prop_getter  167    0  166     // tmp167 = a[tmp166];
765:                 meta    2  167  255     // 
766:           assignment  166    1    7     // tmp166 = 7: SMALLINT;
767:          prop_getter  167    0  166     // tmp167 = a[tmp166];
768:                 meta    2  167  255     // tmp166 = p (tmp167, tmp167);
769:           assignment  167    5    0     // tmp167 = 'a': STRING;
770:          prop_getter  168    0  167     // tmp168 = a[tmp167];
771:           assignment  169    1   10     // tmp169 = 10: SMALLINT;
772:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
773:          logical_not  172  171          // tmp172 = ! tmp171;
774:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
775:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
776:           assignment  173    5    0     // tmp173 = 'a': STRING;
777:          prop_getter  174    0  173     // tmp174 = a[tmp173];
778:           assignment  175    1    7     // tmp175 = 7: SMALLINT;
779:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
780:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
781:     is_true_jmp_down  177    0   15     // if (tmp177) goto 796;
782:               call_n  178    1    2     // 
783:           assignment  178    1    7     // tmp178 = 7: SMALLINT;
784:          prop_getter  179    0  178     // tmp179 = a[tmp178];
785:                 meta    2  179  255     // 
786:           assignment  178    1    4     // tmp178 = 4: SMALLINT;
787:          prop_getter  179    0  178     // tmp179 = a[tmp178];
788:                 meta    2  179  255     // tmp178 = p (tmp179, tmp179);
789:           assignment  179    5    0     // tmp179 = 'a': STRING;
790:          prop_getter  180    0  179     // tmp180 = a[tmp179];
791:           assignment  181    1    7     // tmp181 = 7: SMALLINT;
792:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
793:          logical_not  184  183          // tmp184 = ! tmp183;
794:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
795:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
796:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
797:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
798:           assignment  131    1    5     // tmp131 = 5: SMALLINT;
799:          prop_getter  132  185  131     // tmp132 = tmp185[tmp131];
800:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
801:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
802:         greater_than  135  130  134     // tmp135 = tmp130 > tmp134;
803:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
804:    is_false_jmp_down  136    0   82     // if (tmp136 == false) goto 886;
805:           assignment  137    5    0     // tmp137 = 'a': STRING;
806:          prop_getter  138    0  137     // tmp138 = a[tmp137];
807:           assignment  139    1    8     // tmp139 = 8: SMALLINT;
808:          prop_getter  140  138  139     // tmp140 = tmp138[tmp139];
809:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
810:     is_true_jmp_down  141    0   15     // if (tmp141) goto 825;
811:               call_n  142    1    2     // 
812:           assignment  142    1    1     // tmp142 = 1: SMALLINT;
813:          prop_getter  143    0  142     // tmp143 = a[tmp142];
814:                 meta    2  143  255     // 
815:           assignment  142    1    5     // tmp142 = 5: SMALLINT;
816:          prop_getter  143    0  142     // tmp143 = a[tmp142];
817:                 meta    2  143  255     // tmp142 = p (tmp143, tmp143);
818:           assignment  143    5    0     // tmp143 = 'a': STRING;
819:          prop_getter  144    0  143     // tmp144 = a[tmp143];
820:           assignment  145    1    8     // tmp145 = 8: SMALLINT;
821:           assignment  147    1    0     // tmp147 = 0: SMALLINT;
822:          logical_not  148  147          // tmp148 = ! tmp147;
823:          prop_setter  144  145  148     // tmp144[tmp145] = tmp148;
824:           assignment  141    6  148     // tmp141 = tmp148 : TYPEOF(tmp148);
825:           assignment  149    5    0     // tmp149 = 'a': STRING;
826:          prop_getter  150    0  149     // tmp150 = a[tmp149];
827:           assignment  151    1    5     // tmp151 = 5: SMALLINT;
828:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
829:           assignment  153    6  152     // tmp153 = tmp152 : TYPEOF(tmp152);
830:     is_true_jmp_down  153    0   15     // if (tmp153) goto 845;
831:               call_n  154    1    2     // 
832:           assignment  154    1    5     // tmp154 = 5: SMALLINT;
833:          prop_getter  155    0  154     // tmp155 = a[tmp154];
834:                 meta    2  155  255     // 
835:           assignment  154    1    6     // tmp154 = 6: SMALLINT;
836:          prop_getter  155    0  154     // tmp155 = a[tmp154];
837:                 meta    2  155  255     // tmp154 = p (tmp155, tmp155);
838:           assignment  155    5    0     // tmp155 = 'a': STRING;
839:          prop_getter  156    0  155     // tmp156 = a[tmp155];
840:           assignment  157    1    5     // tmp157 = 5: SMALLINT;
841:           assignment  159    1    0     // tmp159 = 0: SMALLINT;
842:          logical_not  160  159          // tmp160 = ! tmp159;
843:          prop_setter  156  157  160     // tmp156[tmp157] = tmp160;
844:           assignment  153    6  160     // tmp153 = tmp160 : TYPEOF(tmp160);
845:           assignment  161    5    0     // tmp161 = 'a': STRING;
846:          prop_getter  162    0  161     // tmp162 = a[tmp161];
847:           assignment  163    1    9     // tmp163 = 9: SMALLINT;
848:          prop_getter  164  162  163     // tmp164 = tmp162[tmp163];
849:           assignment  165    6  164     // tmp165 = tmp164 : TYPEOF(tmp164);
850:     is_true_jmp_down  165    0   15     // if (tmp165) goto 865;
851:               call_n  166    1    2     // 
852:           assignment  166    1    6     // tmp166 = 6: SMALLINT;
853:          prop_getter  167    0  166     // tmp167 = a[tmp166];
854:                 meta    2  167  255     // 
855:           assignment  166    1    2     // tmp166 = 2: SMALLINT;
856:          prop_getter  167    0  166     // tmp167 = a[tmp166];
857:                 meta    2  167  255     // tmp166 = p (tmp167, tmp167);
858:           assignment  167    5    0     // tmp167 = 'a': STRING;
859:          prop_getter  168    0  167     // tmp168 = a[tmp167];
860:           assignment  169    1    9     // tmp169 = 9: SMALLINT;
861:           assignment  171    1    0     // tmp171 = 0: SMALLINT;
862:          logical_not  172  171          // tmp172 = ! tmp171;
863:          prop_setter  168  169  172     // tmp168[tmp169] = tmp172;
864:           assignment  165    6  172     // tmp165 = tmp172 : TYPEOF(tmp172);
865:           assignment  173    5    0     // tmp173 = 'a': STRING;
866:          prop_getter  174    0  173     // tmp174 = a[tmp173];
867:           assignment  175    1    1     // tmp175 = 1: SMALLINT;
868:          prop_getter  176  174  175     // tmp176 = tmp174[tmp175];
869:           assignment  177    6  176     // tmp177 = tmp176 : TYPEOF(tmp176);
870:     is_true_jmp_down  177    0   15     // if (tmp177) goto 885;
871:               call_n  178    1    2     // 
872:           assignment  178    1    2     // tmp178 = 2: SMALLINT;
873:          prop_getter  179    0  178     // tmp179 = a[tmp178];
874:                 meta    2  179  255     // 
875:           assignment  178    1    1     // tmp178 = 1: SMALLINT;
876:          prop_getter  179    0  178     // tmp179 = a[tmp178];
877:                 meta    2  179  255     // tmp178 = p (tmp179, tmp179);
878:           assignment  179    5    0     // tmp179 = 'a': STRING;
879:          prop_getter  180    0  179     // tmp180 = a[tmp179];
880:           assignment  181    1    1     // tmp181 = 1: SMALLINT;
881:           assignment  183    1    0     // tmp183 = 0: SMALLINT;
882:          logical_not  184  183          // tmp184 = ! tmp183;
883:          prop_setter  180  181  184     // tmp180[tmp181] = tmp184;
884:           assignment  177    6  184     // tmp177 = tmp184 : TYPEOF(tmp184);
885:           assignment  136    6  177     // tmp136 = tmp177 : TYPEOF(tmp177);
886:           assignment  130    5    0     // tmp130 = 'a': STRING;
887:           array_decl  132    0   12     // 
888:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
889:          logical_not  133  132          // tmp133 = ! tmp132;
890:                 meta    2  133  255     // 
891:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
892:          logical_not  133  132          // tmp133 = ! tmp132;
893:                 meta    2  133  255     // 
894:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
895:          logical_not  133  132          // tmp133 = ! tmp132;
896:                 meta    2  133  255     // 
897:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
898:          logical_not  133  132          // tmp133 = ! tmp132;
899:                 meta    2  133  255     // 
900:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
901:          logical_not  133  132          // tmp133 = ! tmp132;
902:                 meta    2  133  255     // 
903:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
904:          logical_not  133  132          // tmp133 = ! tmp132;
905:                 meta    2  133  255     // 
906:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
907:          logical_not  133  132          // tmp133 = ! tmp132;
908:                 meta    2  133  255     // 
909:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
910:          logical_not  133  132          // tmp133 = ! tmp132;
911:                 meta    2  133  255     // 
912:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
913:          logical_not  133  132          // tmp133 = ! tmp132;
914:                 meta    2  133  255     // 
915:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
916:          logical_not  133  132          // tmp133 = ! tmp132;
917:                 meta    2  133  255     // 
918:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
919:          logical_not  133  132          // tmp133 = ! tmp132;
920:                 meta    2  133  255     // 
921:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
922:          logical_not  133  132          // tmp133 = ! tmp132;
923:                 meta    2  133  255     // tmp132 = [tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133];
924:          prop_setter    0  130  132     // a[tmp130] = tmp132;
925:           assignment  130    5    1     // tmp130 = 'f': STRING;
926:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
927:          prop_setter    0  130  132     // a[tmp130] = tmp132;
928:                  ret                    // ret;
929:          func_decl_n    2    0          // function y ();
930:                 meta    7    1   38     // function end: 1224;
931:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
932:         reg_var_decl  128  140    3     // var tmp128 .. tmp140;
933:           assignment  130    5    3     // tmp130 = 'g': STRING;
934:          prop_getter  131    4  130     // tmp131 = m[tmp130];
935:           assignment  132    5    5     // tmp132 = 'j': STRING;
936:          prop_getter  133    4  132     // tmp133 = m[tmp132];
937:         greater_than  134  131  133     // tmp134 = tmp131 > tmp133;
938:          logical_not  135  134          // tmp135 = ! tmp134;
939:    is_false_jmp_down  135    1   28     // if (tmp135 == false) goto 1223;
940:               call_n  130    6    1     // 
941:           assignment  130    5    3     // tmp130 = 'g': STRING;
942:          prop_getter  131    4  130     // tmp131 = m[tmp130];
943:                 meta    2  131  255     // tmp130 = String (tmp131);
944:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
945:             jmp_down    0    4          // goto 949;
946:           assignment  130    5    7     // tmp130 = '0': STRING;
947:             addition  131  130  138     // tmp131 = tmp130 + tmp138;
948:           assignment  138    6  131     // tmp138 = tmp131 : TYPEOF(tmp131);
949:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
950:           assignment  133    5    8     // tmp133 = 'length': STRING;
951:          prop_getter  134  138  133     // tmp134 = tmp138[tmp133];
952:         greater_than  135  132  134     // tmp135 = tmp132 > tmp134;
953:       is_true_jmp_up  135    0    7     // if (tmp135) goto 946;
954:               call_n  130    9    4     // 
955:                 meta    2   10  255     // 
956:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
957:          prop_getter  131    0  130     // tmp131 = a[tmp130];
958:           assignment  132    5   11     // tmp132 = 'b': STRING;
959:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
960:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
961:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
962:          unary_minus  136  135          // tmp136 = -tmp135;
963:                 meta    2  136  255     // 
964:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
965:          prop_getter  131    0  130     // tmp131 = a[tmp130];
966:           assignment  132    5    1     // tmp132 = 'b': STRING;
967:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
968:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
969:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
970:          unary_minus  136  135          // tmp136 = -tmp135;
971:                 meta    2  136  255     // 
972:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
973:          prop_getter  131    0  130     // tmp131 = a[tmp130];
974:           assignment  132    5    1     // tmp132 = 'b': STRING;
975:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
976:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
977:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
978:          unary_minus  136  135          // tmp136 = -tmp135;
979:                 meta    2  136  255     // tmp130 = w (h, tmp136, tmp136, tmp136);
980:           assignment    2    6  130     // f = tmp130 : TYPEOF(tmp130);
981:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
982:           assignment  130    5    3     // tmp130 = 'PI': STRING;
983:          prop_getter  131    4  130     // tmp131 = Math[tmp130];
984:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
985:             division  133  131  132     // tmp133 = tmp131 / tmp132;
986:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
987:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
988:           assignment  139    6  135     // tmp139 = tmp135 : TYPEOF(tmp135);
989:           assignment  130    5    5     // tmp130 = 'cos': STRING;
990:          prop_getter  131    4  130     // tmp131 = Math[tmp130];
991:           assignment  132    6    4     // tmp132 = Math : TYPEOF(Math);
992:               call_n  133  131    1     // 
993:                 meta    1    1  132     // 
994:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
995:           assignment  140    6  133     // tmp140 = tmp133 : TYPEOF(tmp133);
996:           assignment  130    5    6     // tmp130 = 'sin': STRING;
997:          prop_getter  131    4  130     // tmp131 = Math[tmp130];
998:           assignment  132    6    4     // tmp132 = Math : TYPEOF(Math);
999:               call_n  133  131    1     // 
1000:                 meta    1    1  132     // 
1001:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
1002:           assignment  139    6  133     // tmp139 = tmp133 : TYPEOF(tmp133);
1003:               call_n  130    7    2     // 
1004:           array_decl  130    0    4     // 
1005:           array_decl  130    0    4     // 
1006:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1007:                 meta    2  130  255     // 
1008:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1009:                 meta    2  130  255     // 
1010:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1011:                 meta    2  130  255     // 
1012:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1013:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1014:                 meta    2  130  255     // 
1015:           array_decl  130    0    4     // 
1016:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1017:                 meta    2  130  255     // 
1018:                 meta    2  140  255     // 
1019:          unary_minus  130  139          // tmp130 = -tmp139;
1020:                 meta    2  130  255     // 
1021:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1022:                 meta    2  130  255     // tmp130 = [tmp130, tmp140, tmp130, tmp130];
1023:                 meta    2  130  255     // 
1024:           array_decl  130    0    4     // 
1025:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1026:                 meta    2  130  255     // 
1027:                 meta    2  139  255     // 
1028:                 meta    2  140  255     // 
1029:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1030:                 meta    2  130  255     // tmp130 = [tmp130, tmp139, tmp140, tmp130];
1031:                 meta    2  130  255     // 
1032:           array_decl  130    0    4     // 
1033:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1034:                 meta    2  130  255     // 
1035:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1036:                 meta    2  130  255     // 
1037:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1038:                 meta    2  130  255     // 
1039:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1040:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1041:                 meta    2  130  255     // 
1042:                 meta    2  130  255     // 
1043:                 meta    2  138  255     // 
1044:           assignment    0    6  130     // f = tmp130 : TYPEOF(tmp130);
1045:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
1046:           assignment  130    5    1     // tmp130 = 'PI': STRING;
1047:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
1048:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
1049:             division  133  131  132     // tmp133 = tmp131 / tmp132;
1050:           assignment  134    1    3     // tmp134 = 3: SMALLINT;
1051:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
1052:           assignment  139    6  135     // tmp139 = tmp135 : TYPEOF(tmp135);
1053:           assignment  130    5    3     // tmp130 = 'cos': STRING;
1054:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
1055:           assignment  132    6    2     // tmp132 = Math : TYPEOF(Math);
1056:               call_n  133  131    1     // 
1057:                 meta    1    1  132     // 
1058:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
1059:           assignment  140    6  133     // tmp140 = tmp133 : TYPEOF(tmp133);
1060:           assignment  130    5    4     // tmp130 = 'sin': STRING;
1061:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
1062:           assignment  132    6    2     // tmp132 = Math : TYPEOF(Math);
1063:               call_n  133  131    1     // 
1064:                 meta    1    1  132     // 
1065:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
1066:           assignment  139    6  133     // tmp139 = tmp133 : TYPEOF(tmp133);
1067:               call_n  130    5    2     // 
1068:           array_decl  130    0    4     // 
1069:           array_decl  130    0    4     // 
1070:                 meta    2  140  255     // 
1071:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1072:                 meta    2  130  255     // 
1073:                 meta    2  139  255     // 
1074:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1075:                 meta    2  130  255     // tmp130 = [tmp140, tmp130, tmp139, tmp130];
1076:                 meta    2  130  255     // 
1077:           array_decl  130    0    4     // 
1078:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1079:                 meta    2  130  255     // 
1080:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1081:                 meta    2  130  255     // 
1082:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1083:                 meta    2  130  255     // 
1084:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1085:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1086:                 meta    2  130  255     // 
1087:           array_decl  130    0    4     // 
1088:          unary_minus  130  139          // tmp130 = -tmp139;
1089:                 meta    2  130  255     // 
1090:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1091:                 meta    2  130  255     // 
1092:                 meta    2  140  255     // 
1093:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1094:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp140, tmp130];
1095:                 meta    2  130  255     // 
1096:           array_decl  130    0    4     // 
1097:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1098:                 meta    2  130  255     // 
1099:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1100:                 meta    2  130  255     // 
1101:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1102:                 meta    2  130  255     // 
1103:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1104:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1105:                 meta    2  130  255     // 
1106:                 meta    2  130  255     // 
1107:                 meta    2  138  255     // 
1108:           assignment    0    6  130     // f = tmp130 : TYPEOF(tmp130);
1109:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
1110:           assignment  130    5    1     // tmp130 = 'PI': STRING;
1111:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
1112:           assignment  132    1  180     // tmp132 = 180: SMALLINT;
1113:             division  133  131  132     // tmp133 = tmp131 / tmp132;
1114:           assignment  134    1    5     // tmp134 = 5: SMALLINT;
1115:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
1116:           assignment  139    6  135     // tmp139 = tmp135 : TYPEOF(tmp135);
1117:           assignment  130    5    3     // tmp130 = 'cos': STRING;
1118:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
1119:           assignment  132    6    2     // tmp132 = Math : TYPEOF(Math);
1120:               call_n  133  131    1     // 
1121:                 meta    1    1  132     // 
1122:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
1123:           assignment  140    6  133     // tmp140 = tmp133 : TYPEOF(tmp133);
1124:           assignment  130    5    4     // tmp130 = 'sin': STRING;
1125:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
1126:           assignment  132    6    2     // tmp132 = Math : TYPEOF(Math);
1127:               call_n  133  131    1     // 
1128:                 meta    1    1  132     // 
1129:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
1130:           assignment  139    6  133     // tmp139 = tmp133 : TYPEOF(tmp133);
1131:               call_n  130    5    2     // 
1132:           array_decl  130    0    4     // 
1133:           array_decl  130    0    4     // 
1134:                 meta    2  140  255     // 
1135:          unary_minus  130  139          // tmp130 = -tmp139;
1136:                 meta    2  130  255     // 
1137:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1138:                 meta    2  130  255     // 
1139:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1140:                 meta    2  130  255     // tmp130 = [tmp140, tmp130, tmp130, tmp130];
1141:                 meta    2  130  255     // 
1142:           array_decl  130    0    4     // 
1143:                 meta    2  139  255     // 
1144:                 meta    2  140  255     // 
1145:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1146:                 meta    2  130  255     // 
1147:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1148:                 meta    2  130  255     // tmp130 = [tmp139, tmp140, tmp130, tmp130];
1149:                 meta    2  130  255     // 
1150:           array_decl  130    0    4     // 
1151:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1152:                 meta    2  130  255     // 
1153:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1154:                 meta    2  130  255     // 
1155:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1156:                 meta    2  130  255     // 
1157:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1158:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1159:                 meta    2  130  255     // 
1160:           array_decl  130    0    4     // 
1161:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1162:                 meta    2  130  255     // 
1163:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1164:                 meta    2  130  255     // 
1165:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1166:                 meta    2  130  255     // 
1167:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1168:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1169:                 meta    2  130  255     // 
1170:                 meta    2  130  255     // 
1171:                 meta    2  138  255     // 
1172:           assignment    0    6  130     // f = tmp130 : TYPEOF(tmp130);
1173:               call_n  130    1    4     // 
1174:                 meta    2    0  255     // 
1175:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1176:          prop_getter  131    2  130     // tmp131 = a[tmp130];
1177:           assignment  132    5    3     // tmp132 = 'b': STRING;
1178:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1179:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1180:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1181:                 meta    2  135  255     // 
1182:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1183:          prop_getter  131    2  130     // tmp131 = a[tmp130];
1184:           assignment  132    5    3     // tmp132 = 'b': STRING;
1185:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1186:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
1187:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1188:                 meta    2  135  255     // 
1189:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1190:          prop_getter  131    2  130     // tmp131 = a[tmp130];
1191:           assignment  132    5    3     // tmp132 = 'b': STRING;
1192:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1193:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
1194:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1195:                 meta    2  135  255     // tmp130 = w (f, tmp135, tmp135, tmp135);
1196:           assignment    0    6  130     // f = tmp130 : TYPEOF(tmp130);
1197:               call_n  130    4    2     // 
1198:                 meta    2    0  255     // 
1199:                 meta    2    5  255     // tmp130 = u (f, g);
1200:           assignment    5    6  130     // g = tmp130 : TYPEOF(tmp130);
1201:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1202:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
1203:             jmp_down    0   10          // goto 1213;
1204:          prop_getter  130    2  138     // tmp130 = a[tmp138];
1205:           assignment  131    5    3     // tmp131 = 'b': STRING;
1206:               call_n  133    6    1     // 
1207:          prop_getter  133    2  138     // tmp133 = a[tmp138];
1208:           assignment  134    5    3     // tmp134 = 'b': STRING;
1209:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1210:                 meta    2  135  255     // tmp133 = v (tmp135);
1211:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
1212:            post_decr  134  138          // tmp134 = tmp138--;
1213:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
1214:          unary_minus  136  135          // tmp136 = -tmp135;
1215:            less_than  137  136  138     // tmp137 = tmp136 < tmp138;
1216:       is_true_jmp_up  137    0   12     // if (tmp137) goto 1204;
1217:               call_n  130    0    0     // 
1218:           assignment  130    5    1     // tmp130 = 'g': STRING;
1219:          prop_getter  131    2  130     // tmp131 = m[tmp130];
1220:            post_incr  132  131          // tmp132 = tmp131++;
1221:          prop_setter    2  130  131     // m[tmp130] = tmp131;
1222:               call_n  130    3    0     // 
1223:                  ret                    // ret;
1224:           array_decl  130    0    0     // tmp130 = [];
1225:           assignment    4    6  130     // a = tmp130 : TYPEOF(tmp130);
1226:           array_decl  131    0    0     // tmp131 = [];
1227:           assignment    5    6  131     // f = tmp131 : TYPEOF(tmp131);
1228:           array_decl  132    0    0     // tmp132 = [];
1229:           assignment    1    6  132     // g = tmp132 : TYPEOF(tmp132);
1230:           array_decl  133    0    0     // tmp133 = [];
1231:           assignment    6    6  133     // h = tmp133 : TYPEOF(tmp133);
1232:             obj_decl  134    0    0     // tmp134 = {};
1233:           assignment    7    6  134     // l = tmp134 : TYPEOF(tmp134);
1234:             obj_decl  135    0    0     // tmp135 = {};
1235:           assignment    2    6  135     // m = tmp135 : TYPEOF(tmp135);
1236:             obj_decl  136    0    4     // 
1237:           assignment  136    3    8     // tmp136 = 2889.0000000000045: NUMBER;
1238:           assignment  137    3    9     // tmp137 = 20: NUMBER;
1239:                 meta    3  137  136     // 
1240:           assignment  136    3   10     // tmp136 = 2889.0000000000054: NUMBER;
1241:           assignment  137    3   11     // tmp137 = 40: NUMBER;
1242:                 meta    3  137  136     // 
1243:           assignment  136    3   12     // tmp136 = 2889.000000000005: NUMBER;
1244:           assignment  137    3   13     // tmp137 = 80: NUMBER;
1245:                 meta    3  137  136     // 
1246:           assignment  136    3   10     // tmp136 = 2889.0000000000054: NUMBER;
1247:           assignment  137    3   14     // tmp137 = 160: NUMBER;
1248:                 meta    3  137  136     // tmp136 = {tmp137:tmp136, tmp137:tmp136, tmp137:tmp136, tmp137:tmp136};
1249:           assignment   15    6  136     // n = tmp136 : TYPEOF(tmp136);
1250:           assignment  130    1   20     // tmp130 = 20: SMALLINT;
1251:           assignment   16    6  130     // z = tmp130 : TYPEOF(tmp130);
1252:             jmp_down    2   64          // goto 1828;
1253:           assignment   17    6   16     // A = z : TYPEOF(z);
1254:           assignment  130    5   18     // tmp130 = 'b': STRING;
1255:           array_decl  132    0    4     // 
1256:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
1257:                 meta    2  132  255     // 
1258:           assignment  132    1  150     // tmp132 = 150: SMALLINT;
1259:                 meta    2  132  255     // 
1260:           assignment  132    1   20     // tmp132 = 20: SMALLINT;
1261:                 meta    2  132  255     // 
1262:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1263:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132, tmp132];
1264:          prop_setter    7  130  132     // l[tmp130] = tmp132;
1265:           assignment  130    5    1     // tmp130 = 'g': STRING;
1266:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1267:          prop_setter    2  130  132     // m[tmp130] = tmp132;
1268:           assignment  130    5   19     // tmp130 = 'j': STRING;
1269:           assignment  132    1   50     // tmp132 = 50: SMALLINT;
1270:          prop_setter    2  130  132     // m[tmp130] = tmp132;
1271:           assignment  130    5   20     // tmp130 = 'o': STRING;
1272:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1273:          prop_setter    2  130  132     // m[tmp130] = tmp132;
1274:           assignment  130    5    2     // tmp130 = 'm': STRING;
1275:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1276:          prop_setter    2  130  132     // m[tmp130] = tmp132;
1277:           assignment  130    5   21     // tmp130 = 's': STRING;
1278:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1279:          prop_setter    2  130  132     // m[tmp130] = tmp132;
1280:           assignment  130    5    0     // tmp130 = 'u': STRING;
1281:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1282:          prop_setter    1  130  132     // m[tmp130] = tmp132;
1283:           assignment  130    5    2     // tmp130 = 'v': STRING;
1284:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1285:          prop_setter    1  130  132     // m[tmp130] = tmp132;
1286:           assignment  130    5    3     // tmp130 = 'i': STRING;
1287:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1288:          logical_not  133  132          // tmp133 = ! tmp132;
1289:          prop_setter    1  130  133     // m[tmp130] = tmp133;
1290:           array_decl  130    0    4     // 
1291:           array_decl  130    0    4     // 
1292:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1293:                 meta    2  130  255     // 
1294:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1295:                 meta    2  130  255     // 
1296:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1297:                 meta    2  130  255     // 
1298:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1299:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1300:                 meta    2  130  255     // 
1301:           array_decl  130    0    4     // 
1302:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1303:                 meta    2  130  255     // 
1304:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1305:                 meta    2  130  255     // 
1306:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1307:                 meta    2  130  255     // 
1308:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1309:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1310:                 meta    2  130  255     // 
1311:           array_decl  130    0    4     // 
1312:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1313:                 meta    2  130  255     // 
1314:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1315:                 meta    2  130  255     // 
1316:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1317:                 meta    2  130  255     // 
1318:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1319:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1320:                 meta    2  130  255     // 
1321:           array_decl  130    0    4     // 
1322:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1323:                 meta    2  130  255     // 
1324:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1325:                 meta    2  130  255     // 
1326:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1327:                 meta    2  130  255     // 
1328:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1329:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1330:                 meta    2  130  255     // 
1331:           assignment    4    6  130     // f = tmp130 : TYPEOF(tmp130);
1332:           array_decl  130    0    4     // 
1333:           array_decl  130    0    4     // 
1334:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1335:                 meta    2  130  255     // 
1336:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1337:                 meta    2  130  255     // 
1338:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1339:                 meta    2  130  255     // 
1340:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1341:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1342:                 meta    2  130  255     // 
1343:           array_decl  130    0    4     // 
1344:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1345:                 meta    2  130  255     // 
1346:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1347:                 meta    2  130  255     // 
1348:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1349:                 meta    2  130  255     // 
1350:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1351:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1352:                 meta    2  130  255     // 
1353:           array_decl  130    0    4     // 
1354:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1355:                 meta    2  130  255     // 
1356:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1357:                 meta    2  130  255     // 
1358:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1359:                 meta    2  130  255     // 
1360:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1361:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1362:                 meta    2  130  255     // 
1363:           array_decl  130    0    4     // 
1364:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1365:                 meta    2  130  255     // 
1366:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1367:                 meta    2  130  255     // 
1368:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1369:                 meta    2  130  255     // 
1370:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1371:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1372:                 meta    2  130  255     // 
1373:           assignment    0    6  130     // g = tmp130 : TYPEOF(tmp130);
1374:           array_decl  130    0    4     // 
1375:           array_decl  130    0    4     // 
1376:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1377:                 meta    2  130  255     // 
1378:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1379:                 meta    2  130  255     // 
1380:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1381:                 meta    2  130  255     // 
1382:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1383:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1384:                 meta    2  130  255     // 
1385:           array_decl  130    0    4     // 
1386:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1387:                 meta    2  130  255     // 
1388:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1389:                 meta    2  130  255     // 
1390:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1391:                 meta    2  130  255     // 
1392:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1393:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1394:                 meta    2  130  255     // 
1395:           array_decl  130    0    4     // 
1396:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1397:                 meta    2  130  255     // 
1398:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1399:                 meta    2  130  255     // 
1400:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1401:                 meta    2  130  255     // 
1402:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1403:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1404:                 meta    2  130  255     // 
1405:           array_decl  130    0    4     // 
1406:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1407:                 meta    2  130  255     // 
1408:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1409:                 meta    2  130  255     // 
1410:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1411:                 meta    2  130  255     // 
1412:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1413:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130];
1414:                 meta    2  130  255     // 
1415:           assignment    0    6  130     // h = tmp130 : TYPEOF(tmp130);
1416:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1417:          construct_n  132    1    3     // 
1418:          unary_minus  132    2          // tmp132 = -A;
1419:                 meta    2  132  255     // 
1420:          unary_minus  132    2          // tmp132 = -A;
1421:                 meta    2  132  255     // 
1422:                 meta    2    2  255     // tmp132 = new t (tmp132, tmp132, A);
1423:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1424:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1425:          construct_n  132    1    3     // 
1426:          unary_minus  132    2          // tmp132 = -A;
1427:                 meta    2  132  255     // 
1428:                 meta    2    2  255     // 
1429:                 meta    2    2  255     // tmp132 = new t (tmp132, A, A);
1430:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1431:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
1432:          construct_n  132    1    3     // 
1433:                 meta    2    2  255     // 
1434:                 meta    2    2  255     // 
1435:                 meta    2    2  255     // tmp132 = new t (A, A, A);
1436:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1437:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1438:          construct_n  132    1    3     // 
1439:                 meta    2    2  255     // 
1440:          unary_minus  132    2          // tmp132 = -A;
1441:                 meta    2  132  255     // 
1442:                 meta    2    2  255     // tmp132 = new t (A, tmp132, A);
1443:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1444:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
1445:          construct_n  132    1    3     // 
1446:          unary_minus  132    2          // tmp132 = -A;
1447:                 meta    2  132  255     // 
1448:          unary_minus  132    2          // tmp132 = -A;
1449:                 meta    2  132  255     // 
1450:          unary_minus  132    2          // tmp132 = -A;
1451:                 meta    2  132  255     // tmp132 = new t (tmp132, tmp132, tmp132);
1452:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1453:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
1454:          construct_n  132    1    3     // 
1455:          unary_minus  132    2          // tmp132 = -A;
1456:                 meta    2  132  255     // 
1457:                 meta    2    2  255     // 
1458:          unary_minus  132    2          // tmp132 = -A;
1459:                 meta    2  132  255     // tmp132 = new t (tmp132, A, tmp132);
1460:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1461:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
1462:          construct_n  132    1    3     // 
1463:                 meta    2    2  255     // 
1464:                 meta    2    2  255     // 
1465:          unary_minus  132    2          // tmp132 = -A;
1466:                 meta    2  132  255     // tmp132 = new t (A, A, tmp132);
1467:          prop_setter    3  130  132     // a[tmp130] = tmp132;
1468:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
1469:          construct_n  132    1    3     // 
1470:                 meta    2    2  255     // 
1471:          unary_minus  132    2          // tmp132 = -A;
1472:                 meta    2  132  255     // 
1473:          unary_minus  132    0          // tmp132 = -A;
1474:                 meta    2  132  255     // tmp132 = new t (A, tmp132, tmp132);
1475:          prop_setter    1  130  132     // a[tmp130] = tmp132;
1476:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
1477:          construct_n  132    2    3     // 
1478:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1479:                 meta    2  132  255     // 
1480:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1481:                 meta    2  132  255     // 
1482:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1483:                 meta    2  132  255     // tmp132 = new t (tmp132, tmp132, tmp132);
1484:          prop_setter    1  130  132     // a[tmp130] = tmp132;
1485:           assignment  130    5    3     // tmp130 = 'c': STRING;
1486:           array_decl  132    0    6     // 
1487:           array_decl  132    0    3     // 
1488:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1489:                 meta    2  132  255     // 
1490:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1491:                 meta    2  132  255     // 
1492:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1493:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1494:                 meta    2  132  255     // 
1495:           array_decl  132    0    3     // 
1496:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
1497:                 meta    2  132  255     // 
1498:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1499:                 meta    2  132  255     // 
1500:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
1501:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1502:                 meta    2  132  255     // 
1503:           array_decl  132    0    3     // 
1504:           assignment  132    1    7     // tmp132 = 7: SMALLINT;
1505:                 meta    2  132  255     // 
1506:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
1507:                 meta    2  132  255     // 
1508:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1509:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1510:                 meta    2  132  255     // 
1511:           array_decl  132    0    3     // 
1512:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
1513:                 meta    2  132  255     // 
1514:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1515:                 meta    2  132  255     // 
1516:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1517:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1518:                 meta    2  132  255     // 
1519:           array_decl  132    0    3     // 
1520:           assignment  132    1    4     // tmp132 = 4: SMALLINT;
1521:                 meta    2  132  255     // 
1522:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1523:                 meta    2  132  255     // 
1524:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
1525:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1526:                 meta    2  132  255     // 
1527:           array_decl  132    0    3     // 
1528:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1529:                 meta    2  132  255     // 
1530:           assignment  132    1    5     // tmp132 = 5: SMALLINT;
1531:                 meta    2  132  255     // 
1532:           assignment  132    1    6     // tmp132 = 6: SMALLINT;
1533:                 meta    2  132  255     // tmp132 = [tmp132, tmp132, tmp132];
1534:                 meta    2  132  255     // 
1535:          prop_setter    1  130  132     // a[tmp130] = tmp132;
1536:           assignment  130    5    0     // tmp130 = 'h': STRING;
1537:           array_decl  132    0    0     // tmp132 = [];
1538:          prop_setter    1  130  132     // a[tmp130] = tmp132;
1539:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1540:           assignment    2    6  130     // B = tmp130 : TYPEOF(tmp130);
1541:             jmp_down    0  135          // goto 1676;
1542:           assignment  130    5    0     // tmp130 = 'h': STRING;
1543:          prop_getter  131    1  130     // tmp131 = a[tmp130];
1544:           assignment    3    6  131     // C = tmp131 : TYPEOF(tmp131);
1545:           assignment    4    6    2     // D = B : TYPEOF(B);
1546:           assignment  132    5    5     // tmp132 = 'c': STRING;
1547:          prop_getter  133    1  132     // tmp133 = a[tmp132];
1548:          prop_getter  134  133    2     // tmp134 = tmp133[B];
1549:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
1550:          prop_getter  136  134  135     // tmp136 = tmp134[tmp135];
1551:          prop_getter  137    1  136     // tmp137 = a[tmp136];
1552:           assignment  138    5    6     // tmp138 = 'b': STRING;
1553:          prop_getter  139  137  138     // tmp139 = tmp137[tmp138];
1554:           assignment    7    6  139     // E = tmp139 : TYPEOF(tmp139);
1555:           assignment  140    5    5     // tmp140 = 'c': STRING;
1556:          prop_getter  141    1  140     // tmp141 = a[tmp140];
1557:          prop_getter  142  141    2     // tmp142 = tmp141[B];
1558:           assignment  143    1    1     // tmp143 = 1: SMALLINT;
1559:          prop_getter  144  142  143     // tmp144 = tmp142[tmp143];
1560:          prop_getter  145    1  144     // tmp145 = a[tmp144];
1561:           assignment  146    5    6     // tmp146 = 'b': STRING;
1562:          prop_getter  147  145  146     // tmp147 = tmp145[tmp146];
1563:           assignment    8    6  147     // F = tmp147 : TYPEOF(tmp147);
1564:           assignment  148    5    5     // tmp148 = 'c': STRING;
1565:          prop_getter  149    1  148     // tmp149 = a[tmp148];
1566:          prop_getter  150  149    2     // tmp150 = tmp149[B];
1567:           assignment  151    1    2     // tmp151 = 2: SMALLINT;
1568:          prop_getter  152  150  151     // tmp152 = tmp150[tmp151];
1569:          prop_getter  153    1  152     // tmp153 = a[tmp152];
1570:           assignment  154    5    6     // tmp154 = 'b': STRING;
1571:          prop_getter  155  153  154     // tmp155 = tmp153[tmp154];
1572:           assignment    9    6  155     // G = tmp155 : TYPEOF(tmp155);
1573:           array_decl  156    0    0     // tmp156 = [];
1574:           assignment   10    6  156     // H = tmp156 : TYPEOF(tmp156);
1575:           array_decl  157    0    0     // tmp157 = [];
1576:           assignment   11    6  157     // I = tmp157 : TYPEOF(tmp157);
1577:           assignment  158    1    0     // tmp158 = 0: SMALLINT;
1578:           assignment   12    6  158     // J = tmp158 : TYPEOF(tmp158);
1579:             jmp_down    0   10          // goto 1589;
1580:          prop_getter  131    7   12     // tmp131 = E[J];
1581:          prop_getter  132    8   12     // tmp132 = F[J];
1582:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
1583:          prop_setter   10   12  133     // H[J] = tmp133;
1584:          prop_getter  135    9   12     // tmp135 = G[J];
1585:          prop_getter  136    8   12     // tmp136 = F[J];
1586:         substraction  137  135  136     // tmp137 = tmp135 - tmp136;
1587:          prop_setter   11   12  137     // I[J] = tmp137;
1588:            post_incr  138   12          // tmp138 = J++;
1589:           assignment  139    1    3     // tmp139 = 3: SMALLINT;
1590:         greater_than  140  139   12     // tmp140 = tmp139 > J;
1591:       is_true_jmp_up  140    0   11     // if (tmp140) goto 1580;
1592:           assignment   13    6   10     // K = H : TYPEOF(H);
1593:           assignment   14    6   11     // L = I : TYPEOF(I);
1594:           array_decl  130    0    0     // tmp130 = [];
1595:           assignment   15    6  130     // M = tmp130 : TYPEOF(tmp130);
1596:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1597:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1598:          prop_getter  133   13  132     // tmp133 = K[tmp132];
1599:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
1600:          prop_getter  135    0  134     // tmp135 = L[tmp134];
1601:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
1602:           assignment  137    1    2     // tmp137 = 2: SMALLINT;
1603:          prop_getter  138    1  137     // tmp138 = K[tmp137];
1604:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
1605:          prop_getter  140    0  139     // tmp140 = L[tmp139];
1606:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
1607:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
1608:          prop_setter    2  130  142     // M[tmp130] = tmp142;
1609:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
1610:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1611:          prop_getter  133    1  132     // tmp133 = K[tmp132];
1612:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1613:          prop_getter  135    0  134     // tmp135 = L[tmp134];
1614:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
1615:           assignment  137    1    0     // tmp137 = 0: SMALLINT;
1616:          prop_getter  138    1  137     // tmp138 = K[tmp137];
1617:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
1618:          prop_getter  140    0  139     // tmp140 = L[tmp139];
1619:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
1620:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
1621:          prop_setter    2  130  142     // M[tmp130] = tmp142;
1622:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
1623:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1624:          prop_getter  133    1  132     // tmp133 = K[tmp132];
1625:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
1626:          prop_getter  135    0  134     // tmp135 = L[tmp134];
1627:       multiplication  136  133  135     // tmp136 = tmp133 * tmp135;
1628:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
1629:          prop_getter  138    1  137     // tmp138 = K[tmp137];
1630:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
1631:          prop_getter  140    0  139     // tmp140 = L[tmp139];
1632:       multiplication  141  138  140     // tmp141 = tmp138 * tmp140;
1633:         substraction  142  136  141     // tmp142 = tmp136 - tmp141;
1634:          prop_setter    2  130  142     // M[tmp130] = tmp142;
1635:           assignment    3    6    2     // H = M : TYPEOF(M);
1636:           assignment  130    5    4     // tmp130 = 'sqrt': STRING;
1637:          prop_getter  131    5  130     // tmp131 = Math[tmp130];
1638:           assignment  132    6    5     // tmp132 = Math : TYPEOF(Math);
1639:               call_n  133  131    1     // 
1640:                 meta    1    1  132     // 
1641:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
1642:          prop_getter  134    3  133     // tmp134 = H[tmp133];
1643:           assignment  135    1    0     // tmp135 = 0: SMALLINT;
1644:          prop_getter  136    3  135     // tmp136 = H[tmp135];
1645:       multiplication  137  134  136     // tmp137 = tmp134 * tmp136;
1646:           assignment  138    1    1     // tmp138 = 1: SMALLINT;
1647:          prop_getter  139    3  138     // tmp139 = H[tmp138];
1648:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
1649:          prop_getter  141    3  140     // tmp141 = H[tmp140];
1650:       multiplication  142  139  141     // tmp142 = tmp139 * tmp141;
1651:             addition  143  137  142     // tmp143 = tmp137 + tmp142;
1652:           assignment  144    1    2     // tmp144 = 2: SMALLINT;
1653:          prop_getter  145    3  144     // tmp145 = H[tmp144];
1654:           assignment  146    1    2     // tmp146 = 2: SMALLINT;
1655:          prop_getter  147    3  146     // tmp147 = H[tmp146];
1656:       multiplication  148  145  147     // tmp148 = tmp145 * tmp147;
1657:             addition  149  143  148     // tmp149 = tmp143 + tmp148;
1658:                 meta    2  149  255     // tmp133 = tmp131 (this_arg = tmp132, tmp149);
1659:           assignment    6    6  133     // N = tmp133 : TYPEOF(tmp133);
1660:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
1661:           assignment    7    6  134     // J = tmp134 : TYPEOF(tmp134);
1662:             jmp_down    0    5          // goto 1667;
1663:          prop_getter  131    3    7     // tmp131 = H[J];
1664:             division  131  131    0     // tmp131 = tmp131 / N;
1665:          prop_setter    1    2  131     // H[J] = tmp131;
1666:            post_incr  132    2          // tmp132 = J++;
1667:           assignment  133    1    3     // tmp133 = 3: SMALLINT;
1668:         greater_than  134  133    2     // tmp134 = tmp133 > J;
1669:       is_true_jmp_up  134    0    6     // if (tmp134) goto 1663;
1670:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
1671:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1672:          prop_setter    1  130  132     // H[tmp130] = tmp132;
1673:          prop_setter    3    4    1     // C[D] = H;
1674:           assignment  131    6    1     // tmp131 = H : TYPEOF(H);
1675:            post_incr  132    5          // tmp132 = B++;
1676:           assignment  133    6    5     // tmp133 = B : TYPEOF(B);
1677:           assignment  134    5    6     // tmp134 = 'c': STRING;
1678:          prop_getter  135    7  134     // tmp135 = a[tmp134];
1679:           assignment  136    5    8     // tmp136 = 'length': STRING;
1680:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
1681:            less_than  138  133  137     // tmp138 = tmp133 < tmp137;
1682:       is_true_jmp_up  138    0  140     // if (tmp138) goto 1542;
1683:           assignment  130    5    7     // tmp130 = 'a': STRING;
1684:           array_decl  132    0   12     // 
1685:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1686:          logical_not  133  132          // tmp133 = ! tmp132;
1687:                 meta    2  133  255     // 
1688:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1689:          logical_not  133  132          // tmp133 = ! tmp132;
1690:                 meta    2  133  255     // 
1691:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1692:          logical_not  133  132          // tmp133 = ! tmp132;
1693:                 meta    2  133  255     // 
1694:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1695:          logical_not  133  132          // tmp133 = ! tmp132;
1696:                 meta    2  133  255     // 
1697:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1698:          logical_not  133  132          // tmp133 = ! tmp132;
1699:                 meta    2  133  255     // 
1700:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1701:          logical_not  133  132          // tmp133 = ! tmp132;
1702:                 meta    2  133  255     // 
1703:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1704:          logical_not  133  132          // tmp133 = ! tmp132;
1705:                 meta    2  133  255     // 
1706:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1707:          logical_not  133  132          // tmp133 = ! tmp132;
1708:                 meta    2  133  255     // 
1709:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1710:          logical_not  133  132          // tmp133 = ! tmp132;
1711:                 meta    2  133  255     // 
1712:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1713:          logical_not  133  132          // tmp133 = ! tmp132;
1714:                 meta    2  133  255     // 
1715:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1716:          logical_not  133  132          // tmp133 = ! tmp132;
1717:                 meta    2  133  255     // 
1718:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1719:          logical_not  133  132          // tmp133 = ! tmp132;
1720:                 meta    2  133  255     // tmp132 = [tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133, tmp133];
1721:          prop_setter    7  130  132     // a[tmp130] = tmp132;
1722:           assignment  130    5    9     // tmp130 = 'l': STRING;
1723:           assignment  132    1   18     // tmp132 = 18: SMALLINT;
1724:       multiplication  133  132   10     // tmp133 = tmp132 * A;
1725:          prop_setter    7  130  133     // a[tmp130] = tmp133;
1726:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1727:           assignment    5    6  130     // B = tmp130 : TYPEOF(tmp130);
1728:             jmp_down    0    9          // goto 1737;
1729:               call_n  130    0    3     // 
1730:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1731:                 meta    2  130  255     // 
1732:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1733:                 meta    2  130  255     // 
1734:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1735:                 meta    2  130  255     // tmp130 = t (tmp130, tmp130, tmp130);
1736:            post_incr  131    1          // tmp131 = B++;
1737:           assignment  132    6    1     // tmp132 = B : TYPEOF(B);
1738:           assignment  133    5    2     // tmp133 = 'l': STRING;
1739:          prop_getter  134    3  133     // tmp134 = a[tmp133];
1740:            less_than  135  132  134     // tmp135 = tmp132 < tmp134;
1741:       is_true_jmp_up  135    0   12     // if (tmp135) goto 1729;
1742:               call_n  130    4    4     // 
1743:                 meta    2    5  255     // 
1744:           assignment  130    5    6     // tmp130 = 'b': STRING;
1745:          prop_getter  131    2  130     // tmp131 = l[tmp130];
1746:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1747:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1748:                 meta    2  133  255     // 
1749:           assignment  130    5    6     // tmp130 = 'b': STRING;
1750:          prop_getter  131    2  130     // tmp131 = l[tmp130];
1751:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
1752:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1753:                 meta    2  133  255     // 
1754:           assignment  130    5    6     // tmp130 = 'b': STRING;
1755:          prop_getter  131    2  130     // tmp131 = l[tmp130];
1756:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
1757:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
1758:                 meta    2  133  255     // tmp130 = w (f, tmp133, tmp133, tmp133);
1759:           assignment    5    6  130     // f = tmp130 : TYPEOF(tmp130);
1760:               call_n  130    7    2     // 
1761:                 meta    2    5  255     // 
1762:                 meta    2    8  255     // tmp130 = u (f, g);
1763:           assignment    8    6  130     // g = tmp130 : TYPEOF(tmp130);
1764:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1765:           assignment    1    6  130     // B = tmp130 : TYPEOF(tmp130);
1766:             jmp_down    0   10          // goto 1776;
1767:          prop_getter  130    3    1     // tmp130 = a[B];
1768:           assignment  131    5    6     // tmp131 = 'b': STRING;
1769:               call_n  133    9    1     // 
1770:          prop_getter  133    3    1     // tmp133 = a[B];
1771:           assignment  134    5    6     // tmp134 = 'b': STRING;
1772:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
1773:                 meta    2  135  255     // tmp133 = v (tmp135);
1774:          prop_setter  130  131  133     // tmp130[tmp131] = tmp133;
1775:            post_incr  134    1          // tmp134 = B++;
1776:           assignment  135    1    9     // tmp135 = 9: SMALLINT;
1777:         greater_than  136  135    1     // tmp136 = tmp135 > B;
1778:       is_true_jmp_up  136    0   11     // if (tmp136) goto 1767;
1779:               call_n  130   10    0     // 
1780:           assignment  130    5   11     // tmp130 = 'i': STRING;
1781:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
1782:          logical_not  133  132          // tmp133 = ! tmp132;
1783:          prop_setter   12  130  133     // m[tmp130] = tmp133;
1784:               call_n  130   13    0     // 
1785:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1786:           assignment   14    6  130     // O = tmp130 : TYPEOF(tmp130);
1787:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
1788:           assignment    1    6  131     // B = tmp131 : TYPEOF(tmp131);
1789:             jmp_down    0   18          // goto 1807;
1790:          prop_getter  130    3    1     // tmp130 = a[B];
1791:           assignment  131    5    6     // tmp131 = 'b': STRING;
1792:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
1793:           assignment    0    6  132     // P = tmp132 : TYPEOF(tmp132);
1794:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
1795:           assignment    1    6  133     // Q = tmp133 : TYPEOF(tmp133);
1796:             jmp_down    0    5          // goto 1801;
1797:          prop_getter  130    0    1     // tmp130 = P[Q];
1798:             addition    2    2  130     // O = O + tmp130;
1799:           assignment  131    6    2     // tmp131 = O : TYPEOF(O);
1800:             pre_incr  132    1          // tmp132 = ++Q;
1801:           assignment  133    6    1     // tmp133 = Q : TYPEOF(Q);
1802:           assignment  134    5    3     // tmp134 = 'length': STRING;
1803:          prop_getter  135    0  134     // tmp135 = P[tmp134];
1804:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
1805:       is_true_jmp_up  136    0    8     // if (tmp136) goto 1797;
1806:             pre_incr  137    4          // tmp137 = ++B;
1807:           assignment  138    6    4     // tmp138 = B : TYPEOF(B);
1808:           assignment  139    5    3     // tmp139 = 'length': STRING;
1809:          prop_getter  140    5  139     // tmp140 = a[tmp139];
1810:            less_than  141  138  140     // tmp141 = tmp138 < tmp140;
1811:       is_true_jmp_up  141    0   21     // if (tmp141) goto 1790;
1812:           assignment  130    6    2     // tmp130 = O : TYPEOF(O);
1813:          prop_getter  131    6    7     // tmp131 = n[A];
1814:      not_equal_value  132  130  131     // tmp132 = tmp130 != tmp131;
1815:    is_false_jmp_down  132    0   11     // if (tmp132 == false) goto 1826;
1816:           assignment  130    5    8     // tmp130 = 'Error: bad vector sum for CubeSize = ': STRING;
1817:             addition  131  130    7     // tmp131 = tmp130 + A;
1818:           assignment  132    5    9     // tmp132 = '; expected ': STRING;
1819:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
1820:          prop_getter  134    6    7     // tmp134 = n[A];
1821:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
1822:           assignment  136    5   10     // tmp136 = ' but got ': STRING;
1823:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
1824:             addition  138  137    2     // tmp138 = tmp137 + O;
1825:          throw_value  138               // throw tmp138;
1826:           assignment  139    1    2     // tmp139 = 2: SMALLINT;
1827:       multiplication   11   11  139     // z = z * tmp139;
1828:           assignment  140    1  160     // tmp140 = 160: SMALLINT;
1829: greater_or_equal_than  141  140   11     // tmp141 = tmp140 >= z;
1830:       is_true_jmp_up  141    2   65     // if (tmp141) goto 1253;
1831:           assignment  130    0    2     // tmp130 = null: SIMPLE;
1832:           assignment    5    6  130     // a = tmp130 : TYPEOF(tmp130);
1833:           assignment   12    6  130     // f = tmp130 : TYPEOF(tmp130);
1834:           assignment   13    6  130     // g = tmp130 : TYPEOF(tmp130);
1835:           assignment   14    6  130     // h = tmp130 : TYPEOF(tmp130);
1836:           assignment   15    6  130     // l = tmp130 : TYPEOF(tmp130);
1837:           assignment   16    6  130     // m = tmp130 : TYPEOF(tmp130);
1838:           assignment   17    6  130     // LoopTime = tmp130 : TYPEOF(tmp130);
1839:                  ret                    // ret;
