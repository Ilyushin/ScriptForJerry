// /* The Great Computer Language Shootout
// 
// function fannkuch(n) {
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//    var check = 0;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  6:           assignment  254    6  130     // check = tmp130 : TYPEOF(tmp130);
//    var perm = Array(n);
  7:               call_n  253  254  253     // 
  8:                 meta    2  254  255     // 
  7:               call_n  130  254    1     //  // REWRITE
  9:           assignment  254    6  130     // perm = tmp130 : TYPEOF(tmp130);
//    var perm1 = Array(n);
 10:               call_n  253  254  253     // 
 11:                 meta    2  254  255     // 
 10:               call_n  130  254    1     //  // REWRITE
 12:           assignment  254    6  130     // perm1 = tmp130 : TYPEOF(tmp130);
//    var count = Array(n);
 13:               call_n  253  254  253     // 
 14:                 meta    2  254  255     // 
 13:               call_n  130  254    1     //  // REWRITE
 15:           assignment  254    6  130     // count = tmp130 : TYPEOF(tmp130);
//    var maxPerm = Array(n);
 16:               call_n  253  254  253     // 
 17:                 meta    2  254  255     // 
 16:               call_n  130  254    1     //  // REWRITE
 18:           assignment  254    6  130     // maxPerm = tmp130 : TYPEOF(tmp130);
//    var maxFlipsCount = 0;
 19:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 20:           assignment  254    6  130     // maxFlipsCount = tmp130 : TYPEOF(tmp130);
//    var m = n - 1;
 21:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 22:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 23:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 24:           assignment  254    6  132     // m = tmp132 : TYPEOF(tmp132);
//    for (var i = 0; i < n; i++) perm1[i] = i;
 25:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 26:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 27:             jmp_down  253  253          // goto 65048;
 28:          prop_getter  130  254  254     // tmp130 = perm1[i];
 28:          prop_setter  254  254  254     // perm1[i] = i;
 29:           assignment  131    6  254     // tmp131 = i : TYPEOF(i);
 30:            post_incr  132  254          // tmp132 = i++;
 27:             jmp_down    0    4          // goto 31; // REWRITE
 31:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 32:            less_than  134  133  254     // tmp134 = tmp133 < n;
 33:       is_true_jmp_up  134    0    5     // if (tmp134) goto 28;
//    var r = n;
 34:           assignment  254    6  254     // r = n : TYPEOF(n);
//    while (true) {
 35:             jmp_down  253  253          // goto 65056;
//       // write-out the first 30 permutations
// 
//       if (check < 30){
 36:           assignment  130    6  254     // tmp130 = check : TYPEOF(check);
 37:           assignment  131    1   30     // tmp131 = 30: SMALLINT;
 38:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
 39:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65060;
//          var s = "";
 40:           assignment  130    5  254     // tmp130 = '': STRING;
 41:           assignment  254    6  130     // s = tmp130 : TYPEOF(tmp130);
//          for(var i=0; i<n; i++) s += (perm1[i]+1).toString();
 42:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 43:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 44:             jmp_down  253  253          // goto 65065;
 45:          prop_getter  130  254  254     // tmp130 = perm1[i];
 46:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 47:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 48:           assignment  133    5  254     // tmp133 = 'toString': STRING;
 49:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 50:               call_n  253  134  253     // 
 51:                 meta    1    1  132     // 
 50:               call_n  135  134    0     //  // REWRITE
 52:             addition  254  254  135     // s = s + tmp135;
 53:           assignment  136    6  254     // tmp136 = s : TYPEOF(s);
 54:            post_incr  137  254          // tmp137 = i++;
 44:             jmp_down    0   11          // goto 55; // REWRITE
 55:           assignment  138    6  254     // tmp138 = i : TYPEOF(i);
 56:            less_than  139  138  254     // tmp139 = tmp138 < n;
 57:       is_true_jmp_up  139    0   12     // if (tmp139) goto 45;
//          check++;
 58:            post_incr  130  254          // tmp130 = check++;
//       }
//       while (r != 1) { count[r - 1] = r; r--; }
 39:    is_false_jmp_down  132    0   20     // if (tmp132 == false) goto 59; // REWRITE
 59:             jmp_down  253  253          // goto 65080;
 60:           assignment  130    6  254     // tmp130 = r : TYPEOF(r);
 61:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 62:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 63:          prop_getter  133  254  132     // tmp133 = count[tmp132];
 63:          prop_setter  254  132  254     // count[tmp132] = r;
 64:           assignment  134    6  254     // tmp134 = r : TYPEOF(r);
 65:            post_decr  130  254          // tmp130 = r--;
 59:             jmp_down    0    7          // goto 66; // REWRITE
 66:           assignment  131    6  254     // tmp131 = r : TYPEOF(r);
 67:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 68:      not_equal_value  133  131  132     // tmp133 = tmp131 != tmp132;
 69:       is_true_jmp_up  133    0    9     // if (tmp133) goto 60;
//       if (!(perm1[0] == 0 || perm1[m] == m)) {
 70:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 71:          prop_getter  131  254  130     // tmp131 = perm1[tmp130];
 72:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 73:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
 74:           assignment  134    6  133     // tmp134 = tmp133 : TYPEOF(tmp133);
 75:     is_true_jmp_down  134  253  253     // if (tmp134) goto 65096;
 76:          prop_getter  135  254  254     // tmp135 = perm1[m];
 77:          equal_value  136  135  254     // tmp136 = tmp135 == m;
 78:           assignment  134    6  136     // tmp134 = tmp136 : TYPEOF(tmp136);
 75:     is_true_jmp_down  134    0    4     // if (tmp134) goto 79; // REWRITE
 79:          logical_not  137  134          // tmp137 = ! tmp134;
 80:    is_false_jmp_down  137  253  253     // if (tmp137 == false) goto 65101;
//          for (var i = 0; i < n; i++) perm[i] = perm1[i];
 81:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 82:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 83:             jmp_down  253  253          // goto 65104;
 84:          prop_getter  130  254  254     // tmp130 = perm[i];
 84:          prop_getter  131  254  254     // tmp131 = perm1[i];
 85:          prop_setter  254  254  131     // perm[i] = tmp131;
 86:            post_incr  132  254          // tmp132 = i++;
 83:             jmp_down    0    4          // goto 87; // REWRITE
 87:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 88:            less_than  134  133  254     // tmp134 = tmp133 < n;
 89:       is_true_jmp_up  134    0    5     // if (tmp134) goto 84;
//          var flipsCount = 0;
 90:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 91:           assignment  254    6  130     // flipsCount = tmp130 : TYPEOF(tmp130);
//          var k;
//          while (!((k = perm[0]) == 0)) {
 92:             jmp_down  253  253          // goto 65113;
//             var k2 = (k + 1) >> 1;
 93:           assignment  130    6  254     // tmp130 = k : TYPEOF(k);
 94:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 95:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 96:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 97:        b_shift_right  134  132  133     // tmp134 = tmp132 >> tmp133;
 98:           assignment  254    6  134     // k2 = tmp134 : TYPEOF(tmp134);
//             for (var i = 0; i < k2; i++) {
 99:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
100:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
101:             jmp_down  253  253          // goto 65122;
//                var temp = perm[i]; perm[i] = perm[k - i]; perm[k - i] = temp;
102:          prop_getter  130  254  254     // tmp130 = perm[i];
103:           assignment  254    6  130     // temp = tmp130 : TYPEOF(tmp130);
104:          prop_getter  130  254  254     // tmp130 = perm[i];
104:           assignment  131    6  254     // tmp131 = k : TYPEOF(k);
105:         substraction  132  131  254     // tmp132 = tmp131 - i;
106:          prop_getter  133  254  132     // tmp133 = perm[tmp132];
107:          prop_setter  254  254  133     // perm[i] = tmp133;
108:           assignment  130    6  254     // tmp130 = k : TYPEOF(k);
109:         substraction  131  130  254     // tmp131 = tmp130 - i;
110:          prop_getter  132  254  131     // tmp132 = perm[tmp131];
110:          prop_setter  254  131  254     // perm[tmp131] = temp;
111:           assignment  133    6  254     // tmp133 = temp : TYPEOF(temp);
//             }
112:            post_incr  134  254          // tmp134 = i++;
101:             jmp_down    0   12          // goto 113; // REWRITE
113:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
114:            less_than  136  135  254     // tmp136 = tmp135 < k2;
115:       is_true_jmp_up  136    0   13     // if (tmp136) goto 102;
//             flipsCount++;
116:            post_incr  130  254          // tmp130 = flipsCount++;
//          }
 92:             jmp_down    0   25          // goto 117; // REWRITE
117:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
118:          prop_getter  132  254  131     // tmp132 = perm[tmp131];
119:           assignment  254    6  132     // k = tmp132 : TYPEOF(tmp132);
120:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
121:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
122:          logical_not  135  134          // tmp135 = ! tmp134;
123:       is_true_jmp_up  135    0   30     // if (tmp135) goto 93;
//          if (flipsCount > maxFlipsCount) {
124:           assignment  130    6  254     // tmp130 = flipsCount : TYPEOF(flipsCount);
125:         greater_than  131  130  254     // tmp131 = tmp130 > maxFlipsCount;
126:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65147;
//             maxFlipsCount = flipsCount;
127:           assignment  254    6  254     // maxFlipsCount = flipsCount : TYPEOF(flipsCount);
128:           assignment  130    6  254     // tmp130 = flipsCount : TYPEOF(flipsCount);
//             for (var i = 0; i < n; i++) maxPerm[i] = perm1[i];
129:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
130:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
131:             jmp_down  253  253          // goto 65152;
132:          prop_getter  130  254  254     // tmp130 = maxPerm[i];
132:          prop_getter  131  254  254     // tmp131 = perm1[i];
133:          prop_setter  254  254  131     // maxPerm[i] = tmp131;
134:            post_incr  132  254          // tmp132 = i++;
131:             jmp_down    0    4          // goto 135; // REWRITE
135:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
136:            less_than  134  133  254     // tmp134 = tmp133 < n;
137:       is_true_jmp_up  134    0    5     // if (tmp134) goto 132;
//          }
//       }
126:    is_false_jmp_down  131    0   12     // if (tmp131 == false) goto 138; // REWRITE
//       while (true) {
 80:    is_false_jmp_down  137    0   58     // if (tmp137 == false) goto 138; // REWRITE
138:             jmp_down  253  253          // goto 65159;
//          if (r == n) return maxFlipsCount;
139:           assignment  130    6  254     // tmp130 = r : TYPEOF(r);
140:          equal_value  131  130  254     // tmp131 = tmp130 == n;
141:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65162;
142:               retval  254               // return maxFlipsCount;
//          var perm0 = perm1[0];
141:    is_false_jmp_down  131    0    2     // if (tmp131 == false) goto 143; // REWRITE
143:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
144:          prop_getter  131  254  130     // tmp131 = perm1[tmp130];
145:           assignment  254    6  131     // perm0 = tmp131 : TYPEOF(tmp131);
//          var i = 0;
146:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
147:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
//          while (i < r) {
148:             jmp_down  253  253          // goto 65169;
//             var j = i + 1;
149:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
150:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
151:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
152:           assignment  254    6  132     // j = tmp132 : TYPEOF(tmp132);
//             perm1[i] = perm1[j];
153:          prop_getter  130  254  254     // tmp130 = perm1[i];
153:          prop_getter  131  254  254     // tmp131 = perm1[j];
154:          prop_setter  254  254  131     // perm1[i] = tmp131;
//             i = j;
155:           assignment  254    6  254     // i = j : TYPEOF(j);
156:           assignment  130    6  254     // tmp130 = j : TYPEOF(j);
//          }
148:             jmp_down    0    9          // goto 157; // REWRITE
157:           assignment  131    6  254     // tmp131 = i : TYPEOF(i);
158:            less_than  132  131  254     // tmp132 = tmp131 < r;
159:       is_true_jmp_up  132    0   10     // if (tmp132) goto 149;
//          perm1[r] = perm0;
160:          prop_getter  130  254  254     // tmp130 = perm1[r];
160:          prop_setter  254  254  254     // perm1[r] = perm0;
161:           assignment  131    6  254     // tmp131 = perm0 : TYPEOF(perm0);
//          count[r] = count[r] - 1;
162:          prop_getter  130  254  254     // tmp130 = count[r];
162:          prop_getter  131  254  254     // tmp131 = count[r];
163:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
164:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
165:          prop_setter  254  254  133     // count[r] = tmp133;
//          if (count[r] > 0) break;
166:          prop_getter  130  254  254     // tmp130 = count[r];
167:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
168:         greater_than  132  130  131     // tmp132 = tmp130 > tmp131;
169:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65190;
170:             jmp_down  255  255          // goto 65705;
//          r++;
169:    is_false_jmp_down  132    0    2     // if (tmp132 == false) goto 171; // REWRITE
171:            post_incr  130  254          // tmp130 = r++;
//       }
138:             jmp_down    0   34          // goto 172; // REWRITE
172:           assignment  131    0    4     // tmp131 = true: SIMPLE;
173:       is_true_jmp_up  131    0   34     // if (tmp131) goto 139;
170:             jmp_down    0    4          // goto 174; // REWRITE
//    }
 35:             jmp_down    0  139          // goto 174; // REWRITE
174:           assignment  132    0    4     // tmp132 = true: SIMPLE;
175:       is_true_jmp_up  132    0  139     // if (tmp132) goto 36;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  155   16     // var tmp128 .. tmp155; // REWRITE
176:                  ret                    // ret;
  2:                 meta    7    0  175     // function end: 177; // REWRITE
// var n = 8;
  2:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
  3:           assignment  254    6  130     // n = tmp130 : TYPEOF(tmp130);
// var ret = fannkuch(n);
  4:               call_n  253  254  253     // 
  5:                 meta    2  254  255     // 
  4:               call_n  130  254    1     //  // REWRITE
  6:           assignment  254    6  130     // ret = tmp130 : TYPEOF(tmp130);
// var expected = 22;
  7:           assignment  130    1   22     // tmp130 = 22: SMALLINT;
  8:           assignment  254    6  130     // expected = tmp130 : TYPEOF(tmp130);
// if (ret != expected)
  9:           assignment  130    6  254     // tmp130 = ret : TYPEOF(ret);
 10:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
 11:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65032;
//     throw "ERROR: bad result: expected " + expected + " but got " + ret;
 12:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
 13:             addition  131  130  254     // tmp131 = tmp130 + expected;
 14:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 15:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 16:             addition  134  133  254     // tmp134 = tmp133 + ret;
 17:          throw_value  134               // throw tmp134;
// 
 11:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 18; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 18:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 16] fannkuch : STRING
0x8a54d4 [  8] n : STRING
0x8a54dc [ 12] check : STRING
0x8a54e8 [ 12] perm : STRING
0x8a54f4 [  4] Array : MAGIC STRING [id=29] 
0x8a54f8 [ 12] perm1 : STRING
0x8a5508 [ 12] count : STRING
0x8a5514 [ 16] maxPerm : STRING
0x8a5524 [ 20] maxFlipsCount : STRING
0x8a5538 [  4] m : MAGIC STRING [id=208] 
0x8a553c [  4] i : MAGIC STRING [id=207] 
0x8a5544 [  8] r : STRING
0x8a554c [  8] s : STRING
0x8a5554 [  4]  : MAGIC STRING [id=225] 
0x8a5558 [  4] toString : MAGIC STRING [id=104] 
0x8a555c [ 16] flipsCount : STRING
0x8a556c [  8] k : STRING
0x8a5574 [  8] k2 : STRING
0x8a557c [ 12] temp : STRING
0x8a558c [ 12] perm0 : STRING
0x8a5598 [  8] j : STRING
0x8a55a0 [ 12] ret : STRING
0x8a55ac [ 16] expected : STRING
0x8a55bc [ 36] ERROR: bad result: expected  : STRING
0x8a55e4 [ 16]  but got  : STRING
0x8a55f4 [ 12]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
  2:             var_decl    0               // var n;
  3:             var_decl    1               // var ret;
  4:             var_decl    2               // var expected;
  5:          func_decl_n    3    1          // 
  6:                 meta    2    0  255     // function fannkuch (n);
  7:                 meta    7    0  175     // function end: 182;
  8:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  9:         reg_var_decl  128  155   16     // var tmp128 .. tmp155;
 10:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 11:           assignment  140    6  130     // tmp140 = tmp130 : TYPEOF(tmp130);
 12:               call_n  130    4    1     // 
 13:                 meta    2    0  255     // tmp130 = Array (n);
 14:           assignment  141    6  130     // tmp141 = tmp130 : TYPEOF(tmp130);
 15:               call_n  130    4    1     // 
 16:                 meta    2    0  255     // tmp130 = Array (n);
 17:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
 18:               call_n  130    4    1     // 
 19:                 meta    2    0  255     // tmp130 = Array (n);
 20:           assignment  143    6  130     // tmp143 = tmp130 : TYPEOF(tmp130);
 21:               call_n  130    4    1     // 
 22:                 meta    2    0  255     // tmp130 = Array (n);
 23:           assignment  144    6  130     // tmp144 = tmp130 : TYPEOF(tmp130);
 24:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 25:           assignment  145    6  130     // tmp145 = tmp130 : TYPEOF(tmp130);
 26:           assignment  130    6    0     // tmp130 = n : TYPEOF(n);
 27:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 28:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 29:           assignment  146    6  132     // tmp146 = tmp132 : TYPEOF(tmp132);
 30:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 31:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
 32:             jmp_down    0    4          // goto 36;
 33:          prop_setter  142  147  147     // tmp142[tmp147] = tmp147;
 34:           assignment  131    6  147     // tmp131 = tmp147 : TYPEOF(tmp147);
 35:            post_incr  132  147          // tmp132 = tmp147++;
 36:           assignment  133    6  147     // tmp133 = tmp147 : TYPEOF(tmp147);
 37:            less_than  134  133    0     // tmp134 = tmp133 < n;
 38:       is_true_jmp_up  134    0    5     // if (tmp134) goto 33;
 39:           assignment  148    6    0     // tmp148 = n : TYPEOF(n);
 40:             jmp_down    0  139          // goto 179;
 41:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
 42:           assignment  131    1   30     // tmp131 = 30: SMALLINT;
 43:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
 44:    is_false_jmp_down  132    0   20     // if (tmp132 == false) goto 64;
 45:           assignment  130    5    5     // tmp130 = '': STRING;
 46:           assignment  149    6  130     // tmp149 = tmp130 : TYPEOF(tmp130);
 47:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 48:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
 49:             jmp_down    0   11          // goto 60;
 50:          prop_getter  130  142  147     // tmp130 = tmp142[tmp147];
 51:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 52:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 53:           assignment  133    5    6     // tmp133 = 'toString': STRING;
 54:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 55:               call_n  135  134    0     // 
 56:                 meta    1    1  132     // tmp135 = tmp134 (this_arg = tmp132);
 57:             addition  149  149  135     // tmp149 = tmp149 + tmp135;
 58:           assignment  136    6  149     // tmp136 = tmp149 : TYPEOF(tmp149);
 59:            post_incr  137  147          // tmp137 = tmp147++;
 60:           assignment  138    6  147     // tmp138 = tmp147 : TYPEOF(tmp147);
 61:            less_than  139  138    0     // tmp139 = tmp138 < n;
 62:       is_true_jmp_up  139    0   12     // if (tmp139) goto 50;
 63:            post_incr  130  140          // tmp130 = tmp140++;
 64:             jmp_down    0    7          // goto 71;
 65:           assignment  130    6  148     // tmp130 = tmp148 : TYPEOF(tmp148);
 66:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 67:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 68:          prop_setter  143  132  148     // tmp143[tmp132] = tmp148;
 69:           assignment  134    6  148     // tmp134 = tmp148 : TYPEOF(tmp148);
 70:            post_decr  130  148          // tmp130 = tmp148--;
 71:           assignment  131    6  148     // tmp131 = tmp148 : TYPEOF(tmp148);
 72:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 73:      not_equal_value  133  131  132     // tmp133 = tmp131 != tmp132;
 74:       is_true_jmp_up  133    0    9     // if (tmp133) goto 65;
 75:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 76:          prop_getter  131  142  130     // tmp131 = tmp142[tmp130];
 77:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 78:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
 79:           assignment  134    6  133     // tmp134 = tmp133 : TYPEOF(tmp133);
 80:     is_true_jmp_down  134    0    4     // if (tmp134) goto 84;
 81:          prop_getter  135  142  146     // tmp135 = tmp142[tmp146];
 82:          equal_value  136  135  146     // tmp136 = tmp135 == tmp146;
 83:           assignment  134    6  136     // tmp134 = tmp136 : TYPEOF(tmp136);
 84:          logical_not  137  134          // tmp137 = ! tmp134;
 85:    is_false_jmp_down  137    0   58     // if (tmp137 == false) goto 143;
 86:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 87:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
 88:             jmp_down    0    4          // goto 92;
 89:          prop_getter  131  142  147     // tmp131 = tmp142[tmp147];
 90:          prop_setter  141  147  131     // tmp141[tmp147] = tmp131;
 91:            post_incr  132  147          // tmp132 = tmp147++;
 92:           assignment  133    6  147     // tmp133 = tmp147 : TYPEOF(tmp147);
 93:            less_than  134  133    0     // tmp134 = tmp133 < n;
 94:       is_true_jmp_up  134    0    5     // if (tmp134) goto 89;
 95:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 96:           assignment  150    6  130     // tmp150 = tmp130 : TYPEOF(tmp130);
 97:             jmp_down    0   25          // goto 122;
 98:           assignment  130    6  151     // tmp130 = tmp151 : TYPEOF(tmp151);
 99:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
100:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
101:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
102:        b_shift_right  134  132  133     // tmp134 = tmp132 >> tmp133;
103:           assignment  152    6  134     // tmp152 = tmp134 : TYPEOF(tmp134);
104:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
105:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
106:             jmp_down    0   12          // goto 118;
107:          prop_getter  130  141  147     // tmp130 = tmp141[tmp147];
108:           assignment  153    6  130     // tmp153 = tmp130 : TYPEOF(tmp130);
109:           assignment  131    6  151     // tmp131 = tmp151 : TYPEOF(tmp151);
110:         substraction  132  131  147     // tmp132 = tmp131 - tmp147;
111:          prop_getter  133  141  132     // tmp133 = tmp141[tmp132];
112:          prop_setter  141  147  133     // tmp141[tmp147] = tmp133;
113:           assignment  130    6  151     // tmp130 = tmp151 : TYPEOF(tmp151);
114:         substraction  131  130  147     // tmp131 = tmp130 - tmp147;
115:          prop_setter  141  131  153     // tmp141[tmp131] = tmp153;
116:           assignment  133    6  153     // tmp133 = tmp153 : TYPEOF(tmp153);
117:            post_incr  134  147          // tmp134 = tmp147++;
118:           assignment  135    6  147     // tmp135 = tmp147 : TYPEOF(tmp147);
119:            less_than  136  135  152     // tmp136 = tmp135 < tmp152;
120:       is_true_jmp_up  136    0   13     // if (tmp136) goto 107;
121:            post_incr  130  150          // tmp130 = tmp150++;
122:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
123:          prop_getter  132  141  131     // tmp132 = tmp141[tmp131];
124:           assignment  151    6  132     // tmp151 = tmp132 : TYPEOF(tmp132);
125:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
126:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
127:          logical_not  135  134          // tmp135 = ! tmp134;
128:       is_true_jmp_up  135    0   30     // if (tmp135) goto 98;
129:           assignment  130    6  150     // tmp130 = tmp150 : TYPEOF(tmp150);
130:         greater_than  131  130  145     // tmp131 = tmp130 > tmp145;
131:    is_false_jmp_down  131    0   12     // if (tmp131 == false) goto 143;
132:           assignment  145    6  150     // tmp145 = tmp150 : TYPEOF(tmp150);
133:           assignment  130    6  150     // tmp130 = tmp150 : TYPEOF(tmp150);
134:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
135:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
136:             jmp_down    0    4          // goto 140;
137:          prop_getter  131  142  147     // tmp131 = tmp142[tmp147];
138:          prop_setter  144  147  131     // tmp144[tmp147] = tmp131;
139:            post_incr  132  147          // tmp132 = tmp147++;
140:           assignment  133    6  147     // tmp133 = tmp147 : TYPEOF(tmp147);
141:            less_than  134  133    0     // tmp134 = tmp133 < n;
142:       is_true_jmp_up  134    0    5     // if (tmp134) goto 137;
143:             jmp_down    0   34          // goto 177;
144:           assignment  130    6  148     // tmp130 = tmp148 : TYPEOF(tmp148);
145:          equal_value  131  130    0     // tmp131 = tmp130 == n;
146:    is_false_jmp_down  131    0    2     // if (tmp131 == false) goto 148;
147:               retval  145               // return tmp145;
148:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
149:          prop_getter  131  142  130     // tmp131 = tmp142[tmp130];
150:           assignment  154    6  131     // tmp154 = tmp131 : TYPEOF(tmp131);
151:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
152:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
153:             jmp_down    0    9          // goto 162;
154:           assignment  130    6  147     // tmp130 = tmp147 : TYPEOF(tmp147);
155:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
156:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
157:           assignment  155    6  132     // tmp155 = tmp132 : TYPEOF(tmp132);
158:          prop_getter  131  142  155     // tmp131 = tmp142[tmp155];
159:          prop_setter  142  147  131     // tmp142[tmp147] = tmp131;
160:           assignment  147    6  155     // tmp147 = tmp155 : TYPEOF(tmp155);
161:           assignment  130    6  155     // tmp130 = tmp155 : TYPEOF(tmp155);
162:           assignment  131    6  147     // tmp131 = tmp147 : TYPEOF(tmp147);
163:            less_than  132  131  148     // tmp132 = tmp131 < tmp148;
164:       is_true_jmp_up  132    0   10     // if (tmp132) goto 154;
165:          prop_setter  142  148  154     // tmp142[tmp148] = tmp154;
166:           assignment  131    6  154     // tmp131 = tmp154 : TYPEOF(tmp154);
167:          prop_getter  131  143  148     // tmp131 = tmp143[tmp148];
168:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
169:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
170:          prop_setter  143  148  133     // tmp143[tmp148] = tmp133;
171:          prop_getter  130  143  148     // tmp130 = tmp143[tmp148];
172:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
173:         greater_than  132  130  131     // tmp132 = tmp130 > tmp131;
174:    is_false_jmp_down  132    0    2     // if (tmp132 == false) goto 176;
175:             jmp_down    0    4          // goto 179;
176:            post_incr  130  148          // tmp130 = tmp148++;
177:           assignment  131    0    4     // tmp131 = true: SIMPLE;
178:       is_true_jmp_up  131    0   34     // if (tmp131) goto 144;
179:           assignment  132    0    4     // tmp132 = true: SIMPLE;
180:       is_true_jmp_up  132    0  139     // if (tmp132) goto 41;
181:                  ret                    // ret;
182:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
183:           assignment    0    6  130     // n = tmp130 : TYPEOF(tmp130);
184:               call_n  130    1    1     // 
185:                 meta    2    0  255     // tmp130 = fannkuch (n);
186:           assignment    2    6  130     // ret = tmp130 : TYPEOF(tmp130);
187:           assignment  130    1   22     // tmp130 = 22: SMALLINT;
188:           assignment    3    6  130     // expected = tmp130 : TYPEOF(tmp130);
189:           assignment  130    6    2     // tmp130 = ret : TYPEOF(ret);
190:      not_equal_value  131  130    3     // tmp131 = tmp130 != expected;
191:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 198;
192:           assignment  130    5    0     // tmp130 = 'ERROR: bad result: expected ': STRING;
193:             addition  131  130    1     // tmp131 = tmp130 + expected;
194:           assignment  132    5    2     // tmp132 = ' but got ': STRING;
195:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
196:             addition  134  133    3     // tmp134 = tmp133 + ret;
197:          throw_value  134               // throw tmp134;
198:                  ret                    // ret;
