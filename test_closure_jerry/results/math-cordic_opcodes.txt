// /*
// 
// /////. Start CORDIC
// 
// var AG_CONST = 0.6072529350;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    3  254     // tmp130 = 0.607252935: NUMBER;
  3:           assignment  254    6  130     // AG_CONST = tmp130 : TYPEOF(tmp130);
// function FIXED(X)
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
// {
//   return X * 65536.0;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    6  254     // tmp130 = X : TYPEOF(X);
  6:           assignment  131    3  254     // tmp131 = 65536: NUMBER;
  7:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
  8:               retval  132               // return tmp132;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
  9:                  ret                    // ret;
  2:                 meta    7    0    8     // function end: 10; // REWRITE
// function FLOAT(X)
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
// {
//   return X / 65536.0;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    6  254     // tmp130 = X : TYPEOF(X);
  6:           assignment  131    3  254     // tmp131 = 65536: NUMBER;
  7:             division  132  130  131     // tmp132 = tmp130 / tmp131;
  8:               retval  132               // return tmp132;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
  9:                  ret                    // ret;
  2:                 meta    7    0    8     // function end: 10; // REWRITE
// function DEG2RAD(X)
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
// {
//   return 0.017453 * (X);
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    3  254     // tmp130 = 0.017453: NUMBER;
  6:       multiplication  131  130  254     // tmp131 = tmp130 * X;
  7:               retval  131               // return tmp131;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  131    0     // var tmp128 .. tmp131; // REWRITE
  8:                  ret                    // ret;
  2:                 meta    7    0    7     // function end: 9; // REWRITE
// var Angles = [
  4:           array_decl  253  253  255     // 
//   FIXED(45.0), FIXED(26.565), FIXED(14.0362), FIXED(7.12502),
  5:               call_n  253  254  253     // 
  6:           assignment  130    3  254     // tmp130 = 45: NUMBER;
  7:                 meta    2  130  255     // 
  5:               call_n  130  254    1     //  // REWRITE
  8:                 meta    2  130  255     // tmp130 = ICE: Assertion 'lit_ids != NULL' failed at /home/john/git/jerry/jerry-core/vm/pretty-printer.cpp(var_to_str):102.
Error: ERR_FAILED_INTERNAL_ASSERTION
