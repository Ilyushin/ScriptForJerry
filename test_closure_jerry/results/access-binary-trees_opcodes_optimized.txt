// function c(a,b,m){this.left=a;this.right=b;this.item=m}function d(a){return null==a.left?a.item:a.item+d(a.left)-d(a.right)}function e(a,b){return 0<b?new c(e(2*a-1,b-1),e(2*a,b-1),a):new c(null,null,a)}for(var f=0,g=4;7>=g;g+=1){for(var h=Math.max(6,g),k=e(0,h),l=4;l<=h;l+=2)for(var n=1<<h-l+4,p=1;p<=n;p++);f+=d(k)}if(-4!=f)throw"ERROR: bad result: expected -4 but got "+f;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:         this_binding  130               // tmp130 = this;
  8:           assignment  131    5  254     // tmp131 = 'left': STRING;
  9:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  9:          prop_setter  130  131  254     // tmp130[tmp131] = a;
 10:         this_binding  130               // tmp130 = this;
 11:           assignment  131    5  254     // tmp131 = 'right': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 12:          prop_setter  130  131  254     // tmp130[tmp131] = b;
 13:         this_binding  130               // tmp130 = this;
 14:           assignment  131    5  254     // tmp131 = 'item': STRING;
 15:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 15:          prop_setter  130  131  254     // tmp130[tmp131] = m;
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 16:                  ret                    // ret;
  4:                 meta    7    0   13     // function end: 17; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    0    2     // tmp130 = null: SIMPLE;
  6:           assignment  131    5  254     // tmp131 = 'left': STRING;
  7:          prop_getter  132  254  131     // tmp132 = a[tmp131];
  8:          equal_value  133  130  132     // tmp133 = tmp130 == tmp132;
  9:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65030;
 10:           assignment  134    5  254     // tmp134 = 'item': STRING;
 11:          prop_getter  135  254  134     // tmp135 = a[tmp134];
 12:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 13:             jmp_down  253  253          // goto 65034;
  9:    is_false_jmp_down  133    0    5     // if (tmp133 == false) goto 14; // REWRITE
 14:           assignment  137    5  254     // tmp137 = 'item': STRING;
 15:          prop_getter  138  254  137     // tmp138 = a[tmp137];
 16:               call_n  253  254  253     // 
 17:           assignment  139    5  254     // tmp139 = 'left': STRING;
 18:          prop_getter  140  254  139     // tmp140 = a[tmp139];
 19:                 meta    2  140  255     // 
 16:               call_n  139  254    1     //  // REWRITE
 20:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
 21:               call_n  253  254  253     // 
 22:           assignment  141    5  254     // tmp141 = 'right': STRING;
 23:          prop_getter  142  254  141     // tmp142 = a[tmp141];
 24:                 meta    2  142  255     // 
 21:               call_n  141  254    1     //  // REWRITE
 25:         substraction  142  140  141     // tmp142 = tmp140 - tmp141;
 26:           assignment  136    6  142     // tmp136 = tmp142 : TYPEOF(tmp142);
 13:             jmp_down    0   14          // goto 27; // REWRITE
 27:               retval  136               // return tmp136;
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  142    0     // var tmp128 .. tmp142; // REWRITE
 28:                  ret                    // ret;
  2:                 meta    7    0   27     // function end: 29; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:            less_than  131  130  254     // tmp131 = tmp130 < b;
  8:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65029;
  9:          construct_n  253  254  253     // 
 10:               call_n  253  254  253     // 
 11:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 12:       multiplication  133  132  254     // tmp133 = tmp132 * a;
 13:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 14:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
 15:                 meta    2  135  255     // 
 16:           assignment  132    6  254     // tmp132 = b : TYPEOF(b);
 17:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 18:         substraction  134  132  133     // tmp134 = tmp132 - tmp133;
 19:                 meta    2  134  255     // 
 10:               call_n  132  254    2     //  // REWRITE
 20:                 meta    2  132  255     // 
 21:               call_n  253  254  253     // 
 22:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 23:       multiplication  133  132  254     // tmp133 = tmp132 * a;
 24:                 meta    2  133  255     // 
 25:           assignment  132    6  254     // tmp132 = b : TYPEOF(b);
 26:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 27:         substraction  134  132  133     // tmp134 = tmp132 - tmp133;
 28:                 meta    2  134  255     // 
 21:               call_n  132  254    2     //  // REWRITE
 29:                 meta    2  132  255     // 
 30:                 meta    2  254  255     // tmp132 = ICE: Assertion 'lit_ids != NULL' failed at /home/john/git/jerry/jerry-core/vm/pretty-printer.cpp(var_to_str):102.
Error: ERR_FAILED_INTERNAL_ASSERTION
