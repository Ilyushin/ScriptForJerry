// function d(a,c){for(var b=0;b<a.length;b++)if(a[b]==c)return!0;return!1}function e(a){var c="aABdDFgGhHijlLmMnOrsStUwWyYz".split("");a=a.split("");for(var b=0;a[b];)"\\"==a[b]?a.splice(b,1):d(c,a[b])&&(a[b]=eval(a[b]+"()")),b++}var f=new Date("1/1/2007 1:11:11");for(i=0;500>i;++i)e("Y-m-d"),e("l, F d, Y g:i:s A"),f.setTime(f.getTime()+84266956);
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  253  253          // goto 65029;
  9:          prop_getter  130  254  254     // tmp130 = a[b];
 10:          equal_value  131  130  254     // tmp131 = tmp130 == c;
 11:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65032;
 12:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 13:          logical_not  131  130          // tmp131 = ! tmp130;
 14:               retval  131               // return tmp131;
 11:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 15; // REWRITE
 15:            post_incr  132  254          // tmp132 = b++;
  8:             jmp_down    0    8          // goto 16; // REWRITE
 16:           assignment  133    6  254     // tmp133 = b : TYPEOF(b);
 17:           assignment  134    5  254     // tmp134 = 'length': STRING;
 18:          prop_getter  135  254  134     // tmp135 = a[tmp134];
 19:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 20:       is_true_jmp_up  136    0   11     // if (tmp136) goto 9;
 21:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 22:          logical_not  131  130          // tmp131 = ! tmp130;
 23:               retval  131               // return tmp131;
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  137    1     // var tmp128 .. tmp137; // REWRITE
 24:                  ret                    // ret;
  3:                 meta    7    0   22     // function end: 25; // REWRITE
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    5  254     // tmp130 = 'aABdDFgGhHijlLmMnOrsStUwWyYz': STRING;
  6:           assignment  131    5  254     // tmp131 = 'split': STRING;
  7:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  8:               call_n  253  132  253     // 
  9:                 meta    1    1  130     // 
 10:           assignment  133    5  254     // tmp133 = '': STRING;
 11:                 meta    2  133  255     // 
  8:               call_n  133  132    1     //  // REWRITE
 12:           assignment  254    6  133     // c = tmp133 : TYPEOF(tmp133);
 13:           assignment  130    5  254     // tmp130 = 'split': STRING;
 14:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 15:           assignment  132    6  254     // tmp132 = a : TYPEOF(a);
 16:               call_n  253  131  253     // 
 17:                 meta    1    1  132     // 
 18:           assignment  133    5  254     // tmp133 = '': STRING;
 19:                 meta    2  133  255     // 
 16:               call_n  133  131    1     //  // REWRITE
 20:           assignment  254    6  133     // a = tmp133 : TYPEOF(tmp133);
 21:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 22:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
 23:             jmp_down  253  253          // goto 65044;
 24:           assignment  130    5  254     // tmp130 = '\': STRING;
 25:          prop_getter  131  254  254     // tmp131 = a[b];
 26:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
 27:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65048;
 28:           assignment  133    5  254     // tmp133 = 'splice': STRING;
 29:          prop_getter  134  254  133     // tmp134 = a[tmp133];
 30:           assignment  135    6  254     // tmp135 = a : TYPEOF(a);
 31:               call_n  253  134  253     // 
 32:                 meta    1    1  135     // 
 33:                 meta    2  254  255     // 
 34:           assignment  136    1    1     // tmp136 = 1: SMALLINT;
 35:                 meta    2  136  255     // 
 31:               call_n  136  134    2     //  // REWRITE
 36:           assignment  137    6  136     // tmp137 = tmp136 : TYPEOF(tmp136);
 37:             jmp_down  253  253          // goto 65058;
 27:    is_false_jmp_down  132    0   11     // if (tmp132 == false) goto 38; // REWRITE
 38:               call_n  253  254  253     // 
 39:                 meta    2  254  255     // 
 40:          prop_getter  138  254  254     // tmp138 = a[b];
 41:                 meta    2  138  255     // 
 38:               call_n  138  254    2     //  // REWRITE
 42:           assignment  139    6  138     // tmp139 = tmp138 : TYPEOF(tmp138);
 43:    is_false_jmp_down  139  253  253     // if (tmp139 == false) goto 65064;
 44:          prop_getter  140  254  254     // tmp140 = a[b];
 44:               call_n  253  254  253     // 
 45:                 meta    1    2  255     // 
 46:          prop_getter  141  254  254     // tmp141 = a[b];
 47:           assignment  142    5  254     // tmp142 = '()': STRING;
 48:             addition  143  141  142     // tmp143 = tmp141 + tmp142;
 49:                 meta    2  143  255     // 
 44:               call_n  141  254    1     //  // REWRITE
 50:          prop_setter  254  254  141     // a[b] = tmp141;
 51:           assignment  139    6  141     // tmp139 = tmp141 : TYPEOF(tmp141);
 43:    is_false_jmp_down  139    0    9     // if (tmp139 == false) goto 52; // REWRITE
 52:           assignment  137    6  139     // tmp137 = tmp139 : TYPEOF(tmp139);
 37:             jmp_down    0   16          // goto 53; // REWRITE
 53:            post_incr  142  254          // tmp142 = b++;
 23:             jmp_down    0   31          // goto 54; // REWRITE
 54:          prop_getter  143  254  254     // tmp143 = a[b];
 55:       is_true_jmp_up  143    0   31     // if (tmp143) goto 24;
 56:          construct_n  253  254  253     // 
 57:           assignment  130    5  254     // tmp130 = '1/1/2007 1:11:11': STRING;
 58:                 meta    2  130  255     // 
 56:          construct_n  130  254    1     //  // REWRITE
 59:           assignment  254    6  130     // f = tmp130 : TYPEOF(tmp130);
 60:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 61:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 62:             jmp_down  253  253          // goto 65083;
 63:               call_n  253  254  253     // 
 64:           assignment  130    5  254     // tmp130 = 'Y-m-d': STRING;
 65:                 meta    2  130  255     // 
 63:               call_n  130  254    1     //  // REWRITE
 66:               call_n  253  254  253     // 
 67:           assignment  131    5  254     // tmp131 = 'l, F d, Y g:i:s A': STRING;
 68:                 meta    2  131  255     // 
 66:               call_n  131  254    1     //  // REWRITE
 69:           assignment  132    5  254     // tmp132 = 'setTime': STRING;
 70:          prop_getter  133  254  132     // tmp133 = f[tmp132];
 71:           assignment  134    6  254     // tmp134 = f : TYPEOF(f);
 72:               call_n  253  133  253     // 
 73:                 meta    1    1  134     // 
 74:           assignment  135    5  254     // tmp135 = 'getTime': STRING;
 75:          prop_getter  136  254  135     // tmp136 = f[tmp135];
 76:           assignment  137    6  254     // tmp137 = f : TYPEOF(f);
 77:               call_n  253  136  253     // 
 78:                 meta    1    1  137     // 
 77:               call_n  138  136    0     //  // REWRITE
 79:           assignment  139    3  254     // tmp139 = 84266956: NUMBER;
 80:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
 81:                 meta    2  140  255     // 
 72:               call_n  135  133    1     //  // REWRITE
 82:             pre_incr  136  254          // tmp136 = ++i;
 62:             jmp_down    0   21          // goto 83; // REWRITE
 83:           assignment  137    3  254     // tmp137 = 500: NUMBER;
 84:         greater_than  138  137  254     // tmp138 = tmp137 > i;
 85:       is_true_jmp_up  138    0   22     // if (tmp138) goto 63;
// 

^
ERROR: Ln 2, Col 1: Unexpected token
