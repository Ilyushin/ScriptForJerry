// /* The Great Computer Language Shootout
// 
// function TreeNode(left,right,item){
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
//    this.left = left;
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:         this_binding  130               // tmp130 = this;
  8:           assignment  131    5  254     // tmp131 = 'left': STRING;
  9:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  9:          prop_setter  130  131  254     // tmp130[tmp131] = left;
//    this.right = right;
 10:         this_binding  130               // tmp130 = this;
 11:           assignment  131    5  254     // tmp131 = 'right': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 12:          prop_setter  130  131  254     // tmp130[tmp131] = right;
//    this.item = item;
 13:         this_binding  130               // tmp130 = this;
 14:           assignment  131    5  254     // tmp131 = 'item': STRING;
 15:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 15:          prop_setter  130  131  254     // tmp130[tmp131] = item;
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 16:                  ret                    // ret;
  4:                 meta    7    0   13     // function end: 17; // REWRITE
// TreeNode.prototype.itemCheck = function(){
  2:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
  3:          prop_getter  131  254  130     // tmp131 = TreeNode[tmp130];
  4:           assignment  132    5  254     // tmp132 = 'itemCheck': STRING;
  5:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  0:          func_expr_n  134  255    0     // tmp134 = function (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    if (this.left==null) return this.item;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:         this_binding  130               // tmp130 = this;
  5:           assignment  131    5  254     // tmp131 = 'left': STRING;
  6:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  7:           assignment  133    0    2     // tmp133 = null: SIMPLE;
  8:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
  9:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65030;
 10:         this_binding  130               // tmp130 = this;
 11:           assignment  131    5  254     // tmp131 = 'item': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 13:               retval  132               // return tmp132;
//    else return this.item + this.left.itemCheck() - this.right.itemCheck();
 14:             jmp_down  253  253          // goto 65035;
  9:    is_false_jmp_down  134    0    6     // if (tmp134 == false) goto 15; // REWRITE
 15:         this_binding  130               // tmp130 = this;
 16:           assignment  131    5  254     // tmp131 = 'item': STRING;
 17:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 18:         this_binding  133               // tmp133 = this;
 19:           assignment  134    5  254     // tmp134 = 'left': STRING;
 20:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 21:           assignment  136    5  254     // tmp136 = 'itemCheck': STRING;
 22:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
 23:               call_n  253  137  253     // 
 24:                 meta    1    1  135     // 
 23:               call_n  138  137    0     //  // REWRITE
 25:             addition  139  132  138     // tmp139 = tmp132 + tmp138;
 26:         this_binding  140               // tmp140 = this;
 27:           assignment  141    5  254     // tmp141 = 'right': STRING;
 28:          prop_getter  142  140  141     // tmp142 = tmp140[tmp141];
 29:           assignment  143    5  254     // tmp143 = 'itemCheck': STRING;
 30:          prop_getter  144  142  143     // tmp144 = tmp142[tmp143];
 31:               call_n  253  144  253     // 
 32:                 meta    1    1  142     // 
 31:               call_n  145  144    0     //  // REWRITE
 33:         substraction  146  139  145     // tmp146 = tmp139 - tmp145;
 34:               retval  146               // return tmp146;
 14:             jmp_down    0   21          // goto 35; // REWRITE
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  146    0     // var tmp128 .. tmp146; // REWRITE
 35:                  ret                    // ret;
  1:                 meta    7    0   35     // function end: 36; // REWRITE
// function bottomUpTree(item,depth){
 41:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//    if (depth>0){
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    6  254     // tmp130 = depth : TYPEOF(depth);
  7:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
  8:         greater_than  132  130  131     // tmp132 = tmp130 > tmp131;
  9:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65030;
//       return new TreeNode(
 10:          construct_n  253  254  253     // 
//           bottomUpTree(2*item-1, depth-1)
 11:               call_n  253  254  253     // 
 12:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 13:       multiplication  131  130  254     // tmp131 = tmp130 * item;
 14:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 15:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
 16:                 meta    2  133  255     // 
 17:           assignment  130    6  254     // tmp130 = depth : TYPEOF(depth);
 18:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 19:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 20:                 meta    2  132  255     // 
 11:               call_n  130  254    2     //  // REWRITE
//          ,bottomUpTree(2*item, depth-1)
 21:                 meta    2  130  255     // 
 22:               call_n  253  254  253     // 
 23:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 24:       multiplication  131  130  254     // tmp131 = tmp130 * item;
 25:                 meta    2  131  255     // 
 26:           assignment  130    6  254     // tmp130 = depth : TYPEOF(depth);
 27:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 28:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 29:                 meta    2  132  255     // 
 22:               call_n  130  254    2     //  // REWRITE
//          ,item
 30:                 meta    2  130  255     // 
//       );
 31:                 meta    2  254  255     // tmp130 = ICE: Assertion 'lit_ids != NULL' failed at /home/john/git/jerry/jerry-core/vm/pretty-printer.cpp(var_to_str):102.
Error: ERR_FAILED_INTERNAL_ASSERTION
