// function f(x0, x1, x2, x3, x4)
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  4:                 meta    2  254  255     // 
  5:                 meta    2  254  255     // 
  0:          func_decl_n  254    5          //  // REWRITE
  6:                 meta    7  253  253     // function end: 65027;
// {
// }
  7:                 meta   12  253  255     // [to be rewritten]
  8:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  8:         reg_var_decl  128  130    0     // var tmp128 .. tmp130; // REWRITE
  9:                  ret                    // ret;
  6:                 meta    7    0    4     // function end: 10; // REWRITE
// for (var i = 0; i < 3000000; ++i)
//     f(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  4:             jmp_down  253  253          // goto 65025;
  5:               call_n  253  254  253     // 
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:                 meta    2  130  255     // 
  8:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
  9:                 meta    2  130  255     // 
 10:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 11:                 meta    2  130  255     // 
 12:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 13:                 meta    2  130  255     // 
 14:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
 15:                 meta    2  130  255     // 
 16:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
 17:                 meta    2  130  255     // 
 18:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
 19:                 meta    2  130  255     // 
 20:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
 21:                 meta    2  130  255     // 
 22:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 23:                 meta    2  130  255     // 
 24:           assignment  130    1    9     // tmp130 = 9: SMALLINT;
 25:                 meta    2  130  255     // 
  5:               call_n  130  254   10     //  // REWRITE
 26:             pre_incr  131  254          // tmp131 = ++i;
  4:             jmp_down    0   23          // goto 27; // REWRITE
 27:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 28:           assignment  133    3  254     // tmp133 = 3000000: NUMBER;
 29:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 30:       is_true_jmp_up  134    0   25     // if (tmp134) goto 5;
// 
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 31:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] f : STRING
0x8a54cc [  8] x0 : STRING
0x8a54d4 [  8] x1 : STRING
0x8a54dc [  8] x2 : STRING
0x8a54e4 [  8] x3 : STRING
0x8a54ec [  8] x4 : STRING
0x8a54f4 [  4] i : MAGIC STRING [id=207] 
0x8a54f8 [ 12] 3000000 : NUMBER
0x8a5508 [ 56]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
  2:             var_decl    0               // var i;
  3:          func_decl_n    1    5          // 
  4:                 meta    2    2  255     // 
  5:                 meta    2    3  255     // 
  6:                 meta    2    4  255     // 
  7:                 meta    2    5  255     // 
  8:                 meta    2    6  255     // function f (x0, x1, x2, x3, x4);
  9:                 meta    7    0    4     // function end: 13;
 10:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 11:         reg_var_decl  128  130    0     // var tmp128 .. tmp130;
 12:                  ret                    // ret;
 13:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 14:           assignment    0    6  130     // i = tmp130 : TYPEOF(tmp130);
 15:             jmp_down    0   23          // goto 38;
 16:               call_n  130    1   10     // 
 17:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 18:                 meta    2  130  255     // 
 19:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 20:                 meta    2  130  255     // 
 21:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 22:                 meta    2  130  255     // 
 23:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 24:                 meta    2  130  255     // 
 25:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
 26:                 meta    2  130  255     // 
 27:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
 28:                 meta    2  130  255     // 
 29:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
 30:                 meta    2  130  255     // 
 31:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
 32:                 meta    2  130  255     // 
 33:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 34:                 meta    2  130  255     // 
 35:           assignment  130    1    9     // tmp130 = 9: SMALLINT;
 36:                 meta    2  130  255     // tmp130 = f (tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130);
 37:             pre_incr  131    0          // tmp131 = ++i;
 38:           assignment  132    6    0     // tmp132 = i : TYPEOF(i);
 39:           assignment  133    3    7     // tmp133 = 3000000: NUMBER;
 40:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 41:       is_true_jmp_up  134    0   25     // if (tmp134) goto 16;
 42:                  ret                    // ret;
