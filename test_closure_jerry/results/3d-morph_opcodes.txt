// /*
// 
// var loops = 15
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    1   15     // tmp130 = 15: SMALLINT;
// var nx = 120
  3:           assignment  254    6  130     // loops = tmp130 : TYPEOF(tmp130);
  4:           assignment  130    1  120     // tmp130 = 120: SMALLINT;
// var nz = 120
  5:           assignment  254    6  130     // nx = tmp130 : TYPEOF(tmp130);
  6:           assignment  130    1  120     // tmp130 = 120: SMALLINT;
// function morph(a, f) {
  7:           assignment  254    6  130     // nz = tmp130 : TYPEOF(tmp130);
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//     var PI2nx = Math.PI * 8/nx
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    5  254     // tmp130 = 'PI': STRING;
  7:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  8:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
  9:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
//     var sin = Math.sin
 10:             division  134  133  254     // tmp134 = tmp133 / nx;
 11:           assignment  254    6  134     // PI2nx = tmp134 : TYPEOF(tmp134);
 12:           assignment  130    5  254     // tmp130 = 'sin': STRING;
//     var f30 = -(50 * sin(f*Math.PI*2))
 13:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 14:           assignment  254    6  131     // sin = tmp131 : TYPEOF(tmp131);
 15:           assignment  130    1   50     // tmp130 = 50: SMALLINT;
 16:               call_n  253  254  253     // 
 17:           assignment  131    6  254     // tmp131 = f : TYPEOF(f);
 18:           assignment  132    5  254     // tmp132 = 'PI': STRING;
 19:          prop_getter  133  254  132     // tmp133 = Math[tmp132];
 20:       multiplication  134  131  133     // tmp134 = tmp131 * tmp133;
 21:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
 22:       multiplication  136  134  135     // tmp136 = tmp134 * tmp135;
 23:                 meta    2  136  255     // 
 16:               call_n  131  254    1     //  // REWRITE
 24:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
//     
//     for (var i = 0; i < nz; ++i) {
 25:          unary_minus  133  132          // tmp133 = -tmp132;
 26:           assignment  254    6  133     // f30 = tmp133 : TYPEOF(tmp133);
 27:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 28:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 29:             jmp_down  253  253          // goto 65050;
//         for (var j = 0; j < nx; ++j) {
 30:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 31:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
 32:             jmp_down  253  253          // goto 65053;
//             a[3*(i*nx+j)+1]    = sin((j-1) * PI2nx ) * -f30
 33:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 34:           assignment  131    6  254     // tmp131 = i : TYPEOF(i);
 35:       multiplication  132  131  254     // tmp132 = tmp131 * nx;
 36:             addition  133  132  254     // tmp133 = tmp132 + j;
 37:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 38:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 39:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 40:          prop_getter  137  254  136     // tmp137 = a[tmp136];
 40:               call_n  253  254  253     // 
 41:           assignment  138    6  254     // tmp138 = j : TYPEOF(j);
 42:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 43:         substraction  140  138  139     // tmp140 = tmp138 - tmp139;
 44:       multiplication  141  140  254     // tmp141 = tmp140 * PI2nx;
 45:                 meta    2  141  255     // 
 40:               call_n  138  254    1     //  // REWRITE
//         }
 46:          unary_minus  139  254          // tmp139 = -f30;
 47:       multiplication  140  138  139     // tmp140 = tmp138 * tmp139;
 48:          prop_setter  254  136  140     // a[tmp136] = tmp140;
 49:             pre_incr  141  254          // tmp141 = ++j;
 32:             jmp_down    0   18          // goto 50; // REWRITE
 50:           assignment  142    6  254     // tmp142 = j : TYPEOF(j);
 51:            less_than  143  142  254     // tmp143 = tmp142 < nx;
 52:       is_true_jmp_up  143    0   19     // if (tmp143) goto 33;
//     }
 53:             pre_incr  144  254          // tmp144 = ++i;
 29:             jmp_down    0   25          // goto 54; // REWRITE
 54:           assignment  145    6  254     // tmp145 = i : TYPEOF(i);
 55:            less_than  146  145  254     // tmp146 = tmp145 < nz;
 56:       is_true_jmp_up  146    0   26     // if (tmp146) goto 30;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  151    5     // var tmp128 .. tmp151; // REWRITE
 57:                  ret                    // ret;
  3:                 meta    7    0   55     // function end: 58; // REWRITE
//     
// var a = Array()
  8:               call_n  253  254  253     // 
  8:               call_n  130  254    0     //  // REWRITE
// for (var i=0; i < nx*nz*3; ++i) 
  9:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
//     a[i] = 0
 10:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 11:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 12:             jmp_down  253  253          // goto 65033;
 13:          prop_getter  130  254  254     // tmp130 = a[i];
 13:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
// for (var i = 0; i < loops; ++i) {
 14:          prop_setter  254  254  131     // a[i] = tmp131;
 15:             pre_incr  132  254          // tmp132 = ++i;
 12:             jmp_down    0    4          // goto 16; // REWRITE
 16:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 17:           assignment  134    6  254     // tmp134 = nx : TYPEOF(nx);
 18:       multiplication  135  134  254     // tmp135 = tmp134 * nz;
 19:           assignment  136    1    3     // tmp136 = 3: SMALLINT;
 20:       multiplication  137  135  136     // tmp137 = tmp135 * tmp136;
 21:            less_than  138  133  137     // tmp138 = tmp133 < tmp137;
 22:       is_true_jmp_up  138    0    9     // if (tmp138) goto 13;
 23:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 24:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 25:             jmp_down  253  253          // goto 65046;
//     morph(a, i/loops)
 26:               call_n  253  254  253     // 
 27:                 meta    2  254  255     // 
 28:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
 29:             division  131  130  254     // tmp131 = tmp130 / loops;
 30:                 meta    2  131  255     // 
 26:               call_n  130  254    2     //  // REWRITE
// }
 31:             pre_incr  131  254          // tmp131 = ++i;
 25:             jmp_down    0    7          // goto 32; // REWRITE
 32:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 33:            less_than  133  132  254     // tmp133 = tmp132 < loops;
 34:       is_true_jmp_up  133    0    8     // if (tmp133) goto 26;
// testOutput = 0;
 35:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 36:           assignment  254    6  130     // testOutput = tmp130 : TYPEOF(tmp130);
// for (var i = 0; i < nx; i++)
//     testOutput += a[3*(i*nx+i)+1];
 37:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 38:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 39:             jmp_down  253  253          // goto 65060;
 40:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 41:           assignment  131    6  254     // tmp131 = i : TYPEOF(i);
 42:       multiplication  132  131  254     // tmp132 = tmp131 * nx;
 43:             addition  133  132  254     // tmp133 = tmp132 + i;
 44:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 45:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 46:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 47:          prop_getter  137  254  136     // tmp137 = a[tmp136];
 48:             addition  254  254  137     // testOutput = testOutput + tmp137;
 49:           assignment  138    6  254     // tmp138 = testOutput : TYPEOF(testOutput);
 50:            post_incr  139  254          // tmp139 = i++;
 39:             jmp_down    0   12          // goto 51; // REWRITE
 51:           assignment  140    6  254     // tmp140 = i : TYPEOF(i);
 52:            less_than  141  140  254     // tmp141 = tmp140 < nx;
 53:       is_true_jmp_up  141    0   13     // if (tmp141) goto 40;
// a = null;
 54:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 55:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
// // This has to be an approximate test since ECMAscript doesn't formally specify
// 
// // what sin() returns. Even if it did specify something like for example what Java 7
// 
// // says - that sin() has to return a value within 1 ulp of exact - then we still
// 
// // would not be able to do an exact test here since that would allow for just enough
// 
// // low-bit slop to create possibly big errors due to testOutput being a sum.
// 
// var epsilon = 1e-13;
 56:           assignment  130    3  254     // tmp130 = 1e-13: NUMBER;
 57:           assignment  254    6  130     // epsilon = tmp130 : TYPEOF(tmp130);
// if (Math.abs(testOutput) >= epsilon)
 58:           assignment  130    5  254     // tmp130 = 'abs': STRING;
 59:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 60:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 61:               call_n  253  131  253     // 
 62:                 meta    1    1  132     // 
 63:                 meta    2  254  255     // 
 61:               call_n  133  131    1     //  // REWRITE
 64: greater_or_equal_than  134  133  254     // tmp134 = tmp133 >= epsilon;
 65:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65086;
//     throw "Error: bad test output: expected magnitude below " + epsilon + " but got " + testOutput;
 66:           assignment  130    5  254     // tmp130 = 'Error: bad test output: expected magnitude below ': STRING;
 67:             addition  131  130  254     // tmp131 = tmp130 + epsilon;
 68:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 69:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 70:             addition  134  133  254     // tmp134 = tmp133 + testOutput;
 71:          throw_value  134               // throw tmp134;
// 
 65:    is_false_jmp_down  134    0    7     // if (tmp134 == false) goto 72; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  141    0     // var tmp128 .. tmp141; // REWRITE
 72:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 12] loops : STRING
0x8a54d0 [  8] nx : STRING
0x8a54d8 [  8] nz : STRING
0x8a54e0 [ 12] morph : STRING
0x8a54ec [  8] a : STRING
0x8a54f4 [  8] f : STRING
0x8a54fc [ 12] PI2nx : STRING
0x8a550c [  4] Math : MAGIC STRING [id=44] 
0x8a5510 [  4] PI : MAGIC STRING [id=81] 
0x8a5514 [  4] sin : MAGIC STRING [id=99] 
0x8a5518 [ 12] f30 : STRING
0x8a5524 [  4] i : MAGIC STRING [id=207] 
0x8a5528 [  8] j : STRING
0x8a5530 [  4] Array : MAGIC STRING [id=29] 
0x8a5534 [ 16] testOutput : STRING
0x8a5548 [ 16] epsilon : STRING
0x8a5558 [ 12] 1e-13 : NUMBER
0x8a5564 [  4] abs : MAGIC STRING [id=84] 
0x8a5568 [ 56] Error: bad test output: expected magnitude below  : STRING
0x8a55a4 [ 16]  but got  : STRING
0x8a55b4 [ 12]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  141    0     // var tmp128 .. tmp141;
  2:             var_decl    0               // var loops;
  3:             var_decl    1               // var nx;
  4:             var_decl    2               // var nz;
  5:             var_decl    3               // var a;
  6:             var_decl    4               // var i;
  7:             var_decl    5               // var epsilon;
  8:          func_decl_n    6    2          // 
  9:                 meta    2    3  255     // 
 10:                 meta    2    7  255     // function morph (a, f);
 11:                 meta    7    0   55     // function end: 66;
 12:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 13:         reg_var_decl  128  151    5     // var tmp128 .. tmp151;
 14:           assignment  130    5    8     // tmp130 = 'PI': STRING;
 15:          prop_getter  131    9  130     // tmp131 = Math[tmp130];
 16:           assignment  132    1    8     // tmp132 = 8: SMALLINT;
 17:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
 18:             division  134  133    1     // tmp134 = tmp133 / nx;
 19:           assignment  147    6  134     // tmp147 = tmp134 : TYPEOF(tmp134);
 20:           assignment  130    5   10     // tmp130 = 'sin': STRING;
 21:          prop_getter  131    9  130     // tmp131 = Math[tmp130];
 22:           assignment  148    6  131     // tmp148 = tmp131 : TYPEOF(tmp131);
 23:           assignment  130    1   50     // tmp130 = 50: SMALLINT;
 24:               call_n  131  148    1     // 
 25:           assignment  131    6    7     // tmp131 = f : TYPEOF(f);
 26:           assignment  132    5    8     // tmp132 = 'PI': STRING;
 27:          prop_getter  133    9  132     // tmp133 = Math[tmp132];
 28:       multiplication  134  131  133     // tmp134 = tmp131 * tmp133;
 29:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
 30:       multiplication  136  134  135     // tmp136 = tmp134 * tmp135;
 31:                 meta    2  136  255     // tmp131 = tmp148 (tmp136);
 32:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 33:          unary_minus  133  132          // tmp133 = -tmp132;
 34:           assignment  149    6  133     // tmp149 = tmp133 : TYPEOF(tmp133);
 35:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 36:           assignment  150    6  130     // tmp150 = tmp130 : TYPEOF(tmp130);
 37:             jmp_down    0   25          // goto 62;
 38:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 39:           assignment  151    6  130     // tmp151 = tmp130 : TYPEOF(tmp130);
 40:             jmp_down    0   18          // goto 58;
 41:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 42:           assignment  131    6  150     // tmp131 = tmp150 : TYPEOF(tmp150);
 43:       multiplication  132  131    1     // tmp132 = tmp131 * nx;
 44:             addition  133  132  151     // tmp133 = tmp132 + tmp151;
 45:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 46:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 47:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 48:               call_n  138  148    1     // 
 49:           assignment  138    6  151     // tmp138 = tmp151 : TYPEOF(tmp151);
 50:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 51:         substraction  140  138  139     // tmp140 = tmp138 - tmp139;
 52:       multiplication  141  140  147     // tmp141 = tmp140 * tmp147;
 53:                 meta    2  141  255     // tmp138 = tmp148 (tmp141);
 54:          unary_minus  139  149          // tmp139 = -tmp149;
 55:       multiplication  140  138  139     // tmp140 = tmp138 * tmp139;
 56:          prop_setter    3  136  140     // a[tmp136] = tmp140;
 57:             pre_incr  141  151          // tmp141 = ++tmp151;
 58:           assignment  142    6  151     // tmp142 = tmp151 : TYPEOF(tmp151);
 59:            less_than  143  142    1     // tmp143 = tmp142 < nx;
 60:       is_true_jmp_up  143    0   19     // if (tmp143) goto 41;
 61:             pre_incr  144  150          // tmp144 = ++tmp150;
 62:           assignment  145    6  150     // tmp145 = tmp150 : TYPEOF(tmp150);
 63:            less_than  146  145    2     // tmp146 = tmp145 < nz;
 64:       is_true_jmp_up  146    0   26     // if (tmp146) goto 38;
 65:                  ret                    // ret;
 66:           assignment  130    1   15     // tmp130 = 15: SMALLINT;
 67:           assignment    0    6  130     // loops = tmp130 : TYPEOF(tmp130);
 68:           assignment  130    1  120     // tmp130 = 120: SMALLINT;
 69:           assignment    1    6  130     // nx = tmp130 : TYPEOF(tmp130);
 70:           assignment  130    1  120     // tmp130 = 120: SMALLINT;
 71:           assignment    2    6  130     // nz = tmp130 : TYPEOF(tmp130);
 72:               call_n  130    3    0     // 
 73:           assignment    4    6  130     // a = tmp130 : TYPEOF(tmp130);
 74:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 75:           assignment    5    6  130     // i = tmp130 : TYPEOF(tmp130);
 76:             jmp_down    0    4          // goto 80;
 77:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 78:          prop_setter    4    5  131     // a[i] = tmp131;
 79:             pre_incr  132    5          // tmp132 = ++i;
 80:           assignment  133    6    5     // tmp133 = i : TYPEOF(i);
 81:           assignment  134    6    1     // tmp134 = nx : TYPEOF(nx);
 82:       multiplication  135  134    2     // tmp135 = tmp134 * nz;
 83:           assignment  136    1    3     // tmp136 = 3: SMALLINT;
 84:       multiplication  137  135  136     // tmp137 = tmp135 * tmp136;
 85:            less_than  138  133  137     // tmp138 = tmp133 < tmp137;
 86:       is_true_jmp_up  138    0    9     // if (tmp138) goto 77;
 87:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 88:           assignment    5    6  130     // i = tmp130 : TYPEOF(tmp130);
 89:             jmp_down    0    7          // goto 96;
 90:               call_n  130    6    2     // 
 91:                 meta    2    4  255     // 
 92:           assignment  130    6    5     // tmp130 = i : TYPEOF(i);
 93:             division  131  130    0     // tmp131 = tmp130 / loops;
 94:                 meta    2  131  255     // tmp130 = morph (a, tmp131);
 95:             pre_incr  131    5          // tmp131 = ++i;
 96:           assignment  132    6    5     // tmp132 = i : TYPEOF(i);
 97:            less_than  133  132    0     // tmp133 = tmp132 < loops;
 98:       is_true_jmp_up  133    0    8     // if (tmp133) goto 90;
 99:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
100:           assignment    7    6  130     // testOutput = tmp130 : TYPEOF(tmp130);
101:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
102:           assignment    5    6  130     // i = tmp130 : TYPEOF(tmp130);
103:             jmp_down    0   12          // goto 115;
104:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
105:           assignment  131    6    5     // tmp131 = i : TYPEOF(i);
106:       multiplication  132  131    1     // tmp132 = tmp131 * nx;
107:             addition  133  132    5     // tmp133 = tmp132 + i;
108:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
109:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
110:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
111:          prop_getter  137    4  136     // tmp137 = a[tmp136];
112:             addition    7    7  137     // testOutput = testOutput + tmp137;
113:           assignment  138    6    7     // tmp138 = testOutput : TYPEOF(testOutput);
114:            post_incr  139    5          // tmp139 = i++;
115:           assignment  140    6    5     // tmp140 = i : TYPEOF(i);
116:            less_than  141  140    1     // tmp141 = tmp140 < nx;
117:       is_true_jmp_up  141    0   13     // if (tmp141) goto 104;
118:           assignment  130    0    2     // tmp130 = null: SIMPLE;
119:           assignment    4    6  130     // a = tmp130 : TYPEOF(tmp130);
120:           assignment  130    3    8     // tmp130 = 1e-13: NUMBER;
121:           assignment    9    6  130     // epsilon = tmp130 : TYPEOF(tmp130);
122:           assignment  130    5   10     // tmp130 = 'abs': STRING;
123:          prop_getter  131   11  130     // tmp131 = Math[tmp130];
124:           assignment  132    6   11     // tmp132 = Math : TYPEOF(Math);
125:               call_n  133  131    1     // 
126:                 meta    1    1  132     // 
127:                 meta    2    7  255     // tmp133 = tmp131 (this_arg = tmp132, testOutput);
128: greater_or_equal_than  134  133    0     // tmp134 = tmp133 >= epsilon;
129:    is_false_jmp_down  134    0    7     // if (tmp134 == false) goto 136;
130:           assignment  130    5    1     // tmp130 = 'Error: bad test output: expected magnitude below ': STRING;
131:             addition  131  130    0     // tmp131 = tmp130 + epsilon;
132:           assignment  132    5    2     // tmp132 = ' but got ': STRING;
133:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
134:             addition  134  133    3     // tmp134 = tmp133 + testOutput;
135:          throw_value  134               // throw tmp134;
136:                  ret                    // ret;
Error: ERR_OUT_OF_MEMORY
