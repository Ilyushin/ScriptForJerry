// // The Computer Language Shootout
// 
// // http://shootout.alioth.debian.org/
// 
// // contributed by Isaac Gouy
// 
// function ack(m,n){
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//    if (m==0) { return n+1; }
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    6  254     // tmp130 = m : TYPEOF(m);
  7:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
  8:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
  9:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65030;
 10:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 11:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 12:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 13:               retval  132               // return tmp132;
//    if (n==0) { return ack(m-1,1); }
  9:    is_false_jmp_down  132    0    5     // if (tmp132 == false) goto 14; // REWRITE
 14:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 15:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 16:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
 17:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65038;
 18:               call_n  253  254  253     // 
 19:           assignment  130    6  254     // tmp130 = m : TYPEOF(m);
 20:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 21:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 22:                 meta    2  132  255     // 
 23:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 24:                 meta    2  130  255     // 
 18:               call_n  130  254    2     //  // REWRITE
 25:               retval  130               // return tmp130;
//    return ack(m-1, ack(m,n-1) );
 17:    is_false_jmp_down  132    0    9     // if (tmp132 == false) goto 26; // REWRITE
 26:               call_n  253  254  253     // 
 27:           assignment  130    6  254     // tmp130 = m : TYPEOF(m);
 28:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 29:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 30:                 meta    2  132  255     // 
 31:               call_n  253  254  253     // 
 32:                 meta    2  254  255     // 
 33:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 34:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 35:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 36:                 meta    2  132  255     // 
 31:               call_n  130  254    2     //  // REWRITE
 37:                 meta    2  130  255     // 
 26:               call_n  130  254    2     //  // REWRITE
 38:               retval  130               // return tmp130;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 39:                  ret                    // ret;
  3:                 meta    7    0   37     // function end: 40; // REWRITE
// function fib(n) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//     if (n < 2){ return 1; }
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
  6:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
  7:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
  8:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65029;
  9:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 10:               retval  130               // return tmp130;
//     return fib(n-2) + fib(n-1);
  8:    is_false_jmp_down  132    0    3     // if (tmp132 == false) goto 11; // REWRITE
 11:               call_n  253  254  253     // 
 12:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 13:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 14:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 15:                 meta    2  132  255     // 
 11:               call_n  130  254    1     //  // REWRITE
 16:               call_n  253  254  253     // 
 17:           assignment  131    6  254     // tmp131 = n : TYPEOF(n);
 18:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 19:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
 20:                 meta    2  133  255     // 
 16:               call_n  131  254    1     //  // REWRITE
 21:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 22:               retval  132               // return tmp132;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 23:                  ret                    // ret;
  2:                 meta    7    0   22     // function end: 24; // REWRITE
// function tak(x,y,z) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
//     if (y >= x) return z;
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:           assignment  130    6  254     // tmp130 = y : TYPEOF(y);
  8: greater_or_equal_than  131  130  254     // tmp131 = tmp130 >= x;
  9:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65030;
 10:               retval  254               // return z;
//     return tak(tak(x-1,y,z), tak(y-1,z,x), tak(z-1,x,y));
  9:    is_false_jmp_down  131    0    2     // if (tmp131 == false) goto 11; // REWRITE
 11:               call_n  253  254  253     // 
 12:               call_n  253  254  253     // 
 13:           assignment  130    6  254     // tmp130 = x : TYPEOF(x);
 14:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 15:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 16:                 meta    2  132  255     // 
 17:                 meta    2  254  255     // 
 18:                 meta    2  254  255     // 
 12:               call_n  130  254    3     //  // REWRITE
 19:                 meta    2  130  255     // 
 20:               call_n  253  254  253     // 
 21:           assignment  130    6  254     // tmp130 = y : TYPEOF(y);
 22:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 23:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 24:                 meta    2  132  255     // 
 25:                 meta    2  254  255     // 
 26:                 meta    2  254  255     // 
 20:               call_n  130  254    3     //  // REWRITE
 27:                 meta    2  130  255     // 
 28:               call_n  253  254  253     // 
 29:           assignment  130    6  254     // tmp130 = z : TYPEOF(z);
 30:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 31:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 32:                 meta    2  132  255     // 
 33:                 meta    2  254  255     // 
 34:                 meta    2  254  255     // 
 28:               call_n  130  254    3     //  // REWRITE
 35:                 meta    2  130  255     // 
 11:               call_n  130  254    3     //  // REWRITE
 36:               retval  130               // return tmp130;
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 37:                  ret                    // ret;
  4:                 meta    7    0   34     // function end: 38; // REWRITE
// var result = 0;
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // result = tmp130 : TYPEOF(tmp130);
// for ( var i = 3; i <= 5; i++ ) {
  4:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
  5:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  6:             jmp_down  253  253          // goto 65027;
//     result += ack(3,i);
  7:               call_n  253  254  253     // 
  8:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
  9:                 meta    2  130  255     // 
 10:                 meta    2  254  255     // 
  7:               call_n  130  254    2     //  // REWRITE
 11:             addition  254  254  130     // result = result + tmp130;
 12:           assignment  131    6  254     // tmp131 = result : TYPEOF(result);
//     result += fib(17.0+i);
 13:               call_n  253  254  253     // 
 14:           assignment  130    3  254     // tmp130 = 17: NUMBER;
 15:             addition  131  130  254     // tmp131 = tmp130 + i;
 16:                 meta    2  131  255     // 
 13:               call_n  130  254    1     //  // REWRITE
 17:             addition  254  254  130     // result = result + tmp130;
 18:           assignment  131    6  254     // tmp131 = result : TYPEOF(result);
//     result += tak(3*i+3,2*i+2,i+1);
 19:               call_n  253  254  253     // 
 20:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 21:       multiplication  131  130  254     // tmp131 = tmp130 * i;
 22:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
 23:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 24:                 meta    2  133  255     // 
 25:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 26:       multiplication  131  130  254     // tmp131 = tmp130 * i;
 27:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 28:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 29:                 meta    2  133  255     // 
 30:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
 31:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 32:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 33:                 meta    2  132  255     // 
 19:               call_n  130  254    3     //  // REWRITE
 34:             addition  254  254  130     // result = result + tmp130;
 35:           assignment  131    6  254     // tmp131 = result : TYPEOF(result);
// }
 36:            post_incr  132  254          // tmp132 = i++;
  6:             jmp_down    0   31          // goto 37; // REWRITE
 37:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 38:           assignment  134    1    5     // tmp134 = 5: SMALLINT;
 39:   less_or_equal_than  135  133  134     // tmp135 = tmp133 <= tmp134;
 40:       is_true_jmp_up  135    0   33     // if (tmp135) goto 7;
// var expected = 57775;
 41:           assignment  130    3  254     // tmp130 = 57775: NUMBER;
 42:           assignment  254    6  130     // expected = tmp130 : TYPEOF(tmp130);
// if (result != expected)
 43:           assignment  130    6  254     // tmp130 = result : TYPEOF(result);
 44:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
 45:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65066;
//     throw "ERROR: bad result: expected " + expected + " but got " + result;
 46:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
 47:             addition  131  130  254     // tmp131 = tmp130 + expected;
 48:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 49:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 50:             addition  134  133  254     // tmp134 = tmp133 + result;
 51:          throw_value  134               // throw tmp134;
// 
 45:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 52; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135; // REWRITE
 52:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 12] ack : STRING
0x8a54d0 [  4] m : MAGIC STRING [id=208] 
0x8a54d4 [  8] n : STRING
0x8a54dc [ 12] fib : STRING
0x8a54e8 [ 12] tak : STRING
0x8a54f4 [  8] x : STRING
0x8a54fc [  8] y : STRING
0x8a5508 [  8] z : STRING
0x8a5510 [ 12] result : STRING
0x8a551c [  4] i : MAGIC STRING [id=207] 
0x8a5520 [ 12] 17 : NUMBER
0x8a552c [ 16] expected : STRING
0x8a553c [ 12] 57775 : NUMBER
0x8a554c [ 36] ERROR: bad result: expected  : STRING
0x8a5570 [ 16]  but got  : STRING
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135;
  2:             var_decl    0               // var result;
  3:             var_decl    1               // var i;
  4:             var_decl    2               // var expected;
  5:          func_decl_n    3    2          // 
  6:                 meta    2    4  255     // 
  7:                 meta    2    5  255     // function ack (m, n);
  8:                 meta    7    0   37     // function end: 45;
  9:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 10:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
 11:           assignment  130    6    4     // tmp130 = m : TYPEOF(m);
 12:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 13:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
 14:    is_false_jmp_down  132    0    5     // if (tmp132 == false) goto 19;
 15:           assignment  130    6    5     // tmp130 = n : TYPEOF(n);
 16:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 17:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 18:               retval  132               // return tmp132;
 19:           assignment  130    6    5     // tmp130 = n : TYPEOF(n);
 20:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 21:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
 22:    is_false_jmp_down  132    0    9     // if (tmp132 == false) goto 31;
 23:               call_n  130    3    2     // 
 24:           assignment  130    6    4     // tmp130 = m : TYPEOF(m);
 25:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 26:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 27:                 meta    2  132  255     // 
 28:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 29:                 meta    2  130  255     // tmp130 = ack (tmp132, tmp130);
 30:               retval  130               // return tmp130;
 31:               call_n  130    3    2     // 
 32:           assignment  130    6    4     // tmp130 = m : TYPEOF(m);
 33:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 34:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 35:                 meta    2  132  255     // 
 36:               call_n  130    3    2     // 
 37:                 meta    2    4  255     // 
 38:           assignment  130    6    5     // tmp130 = n : TYPEOF(n);
 39:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 40:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 41:                 meta    2  132  255     // tmp130 = ack (m, tmp132);
 42:                 meta    2  130  255     // 
 43:               retval  130               // return tmp130;
 44:                  ret                    // ret;
 45:          func_decl_n    6    1          // 
 46:                 meta    2    5  255     // function fib (n);
 47:                 meta    7    0   22     // function end: 69;
 48:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 49:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
 50:           assignment  130    6    5     // tmp130 = n : TYPEOF(n);
 51:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 52:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
 53:    is_false_jmp_down  132    0    3     // if (tmp132 == false) goto 56;
 54:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 55:               retval  130               // return tmp130;
 56:               call_n  130    6    1     // 
 57:           assignment  130    6    5     // tmp130 = n : TYPEOF(n);
 58:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 59:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 60:                 meta    2  132  255     // tmp130 = fib (tmp132);
 61:               call_n  131    6    1     // 
 62:           assignment  131    6    5     // tmp131 = n : TYPEOF(n);
 63:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 64:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
 65:                 meta    2  133  255     // tmp131 = fib (tmp133);
 66:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 67:               retval  132               // return tmp132;
 68:                  ret                    // ret;
 69:          func_decl_n    0    3          // 
 70:                 meta    2    1  255     // 
 71:                 meta    2    2  255     // 
 72:                 meta    2    3  255     // function tak (x, y, z);
 73:                 meta    7    0   34     // function end: 107;
 74:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 75:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
 76:           assignment  130    6    2     // tmp130 = y : TYPEOF(y);
 77: greater_or_equal_than  131  130    1     // tmp131 = tmp130 >= x;
 78:    is_false_jmp_down  131    0    2     // if (tmp131 == false) goto 80;
 79:               retval    3               // return z;
 80:               call_n  130    0    3     // 
 81:               call_n  130    0    3     // 
 82:           assignment  130    6    1     // tmp130 = x : TYPEOF(x);
 83:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 84:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 85:                 meta    2  132  255     // 
 86:                 meta    2    2  255     // 
 87:                 meta    2    3  255     // tmp130 = tak (tmp132, y, z);
 88:                 meta    2  130  255     // 
 89:               call_n  130    0    3     // 
 90:           assignment  130    6    2     // tmp130 = y : TYPEOF(y);
 91:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 92:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
 93:                 meta    2  132  255     // 
 94:                 meta    2    3  255     // 
 95:                 meta    2    1  255     // tmp130 = tak (tmp132, z, x);
 96:                 meta    2  130  255     // 
 97:               call_n  130    0    3     // 
 98:           assignment  130    6    3     // tmp130 = z : TYPEOF(z);
 99:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
100:         substraction  132  130  131     // tmp132 = tmp130 - tmp131;
101:                 meta    2  132  255     // 
102:                 meta    2    1  255     // 
103:                 meta    2    2  255     // tmp130 = tak (tmp132, x, y);
104:                 meta    2  130  255     // 
105:               retval  130               // return tmp130;
106:                  ret                    // ret;
107:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
108:           assignment    4    6  130     // result = tmp130 : TYPEOF(tmp130);
109:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
110:           assignment    5    6  130     // i = tmp130 : TYPEOF(tmp130);
111:             jmp_down    0   31          // goto 142;
112:               call_n  130    6    2     // 
113:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
114:                 meta    2  130  255     // 
115:                 meta    2    5  255     // tmp130 = ack (tmp130, i);
116:             addition    4    4  130     // result = result + tmp130;
117:           assignment  131    6    4     // tmp131 = result : TYPEOF(result);
118:               call_n  130    7    1     // 
119:           assignment  130    3    8     // tmp130 = 17: NUMBER;
120:             addition  131  130    5     // tmp131 = tmp130 + i;
121:                 meta    2  131  255     // tmp130 = fib (tmp131);
122:             addition    4    4  130     // result = result + tmp130;
123:           assignment  131    6    4     // tmp131 = result : TYPEOF(result);
124:               call_n  130    0    3     // 
125:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
126:       multiplication  131  130    5     // tmp131 = tmp130 * i;
127:           assignment  132    1    3     // tmp132 = 3: SMALLINT;
128:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
129:                 meta    2  133  255     // 
130:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
131:       multiplication  131  130    0     // tmp131 = tmp130 * i;
132:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
133:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
134:                 meta    2  133  255     // 
135:           assignment  130    6    0     // tmp130 = i : TYPEOF(i);
136:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
137:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
138:                 meta    2  132  255     // tmp130 = tak (tmp133, tmp133, tmp132);
139:             addition    1    1  130     // result = result + tmp130;
140:           assignment  131    6    1     // tmp131 = result : TYPEOF(result);
141:            post_incr  132    0          // tmp132 = i++;
142:           assignment  133    6    0     // tmp133 = i : TYPEOF(i);
143:           assignment  134    1    5     // tmp134 = 5: SMALLINT;
144:   less_or_equal_than  135  133  134     // tmp135 = tmp133 <= tmp134;
145:       is_true_jmp_up  135    0   33     // if (tmp135) goto 112;
146:           assignment  130    3    2     // tmp130 = 57775: NUMBER;
147:           assignment    3    6  130     // expected = tmp130 : TYPEOF(tmp130);
148:           assignment  130    6    1     // tmp130 = result : TYPEOF(result);
149:      not_equal_value  131  130    3     // tmp131 = tmp130 != expected;
150:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 157;
151:           assignment  130    5    4     // tmp130 = 'ERROR: bad result: expected ': STRING;
152:             addition  131  130    3     // tmp131 = tmp130 + expected;
153:           assignment  132    5    5     // tmp132 = ' but got ': STRING;
154:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
155:             addition  134  133    1     // tmp134 = tmp133 + result;
156:          throw_value  134               // throw tmp134;
157:                  ret                    // ret;
