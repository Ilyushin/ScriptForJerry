// // The Great Computer Language Shootout
// 
// //  http://shootout.alioth.debian.org
// 
// //
// 
// //  Contributed by Ian Osgood
// 
// function pad(n,width) {
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var s = n.toString();
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    5  254     // tmp130 = 'toString': STRING;
  7:          prop_getter  131  254  130     // tmp131 = n[tmp130];
  8:           assignment  132    6  254     // tmp132 = n : TYPEOF(n);
  9:               call_n  253  131  253     // 
 10:                 meta    1    1  132     // 
  9:               call_n  133  131    0     //  // REWRITE
 11:           assignment  254    6  133     // s = tmp133 : TYPEOF(tmp133);
//   while (s.length < width) s = ' ' + s;
 12:             jmp_down  253  253          // goto 65033;
 13:           assignment  130    5  254     // tmp130 = ' ': STRING;
 14:             addition  131  130  254     // tmp131 = tmp130 + s;
 15:           assignment  254    6  131     // s = tmp131 : TYPEOF(tmp131);
 12:             jmp_down    0    4          // goto 16; // REWRITE
 16:           assignment  132    5  254     // tmp132 = 'length': STRING;
 17:          prop_getter  133  254  132     // tmp133 = s[tmp132];
 18:            less_than  134  133  254     // tmp134 = tmp133 < width;
 19:       is_true_jmp_up  134    0    6     // if (tmp134) goto 13;
//   return s;
 20:               retval  254               // return s;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  135    1     // var tmp128 .. tmp135; // REWRITE
 21:                  ret                    // ret;
  3:                 meta    7    0   19     // function end: 22; // REWRITE
// function primes(isPrime, n) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var i, count = 0, m = 10000<<n, size = m+31>>5;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // count = tmp130 : TYPEOF(tmp130);
  8:           assignment  131    3  254     // tmp131 = 10000: NUMBER;
  9:         b_shift_left  132  131  254     // tmp132 = tmp131 << n;
 10:           assignment  254    6  132     // m = tmp132 : TYPEOF(tmp132);
 11:           assignment  133    6  254     // tmp133 = m : TYPEOF(m);
 12:           assignment  134    1   31     // tmp134 = 31: SMALLINT;
 13:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
 14:           assignment  136    1    5     // tmp136 = 5: SMALLINT;
 15:        b_shift_right  137  135  136     // tmp137 = tmp135 >> tmp136;
 16:           assignment  254    6  137     // size = tmp137 : TYPEOF(tmp137);
//   for (i=0; i<size; i++) isPrime[i] = 0xffffffff;
 17:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 18:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 19:             jmp_down  253  253          // goto 65040;
 20:          prop_getter  130  254  254     // tmp130 = isPrime[i];
 20:           assignment  131    3  254     // tmp131 = 4294967295: NUMBER;
 21:          prop_setter  254  254  131     // isPrime[i] = tmp131;
 22:            post_incr  132  254          // tmp132 = i++;
 19:             jmp_down    0    4          // goto 23; // REWRITE
 23:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 24:            less_than  134  133  254     // tmp134 = tmp133 < size;
 25:       is_true_jmp_up  134    0    5     // if (tmp134) goto 20;
//   for (i=2; i<m; i++)
//     if (isPrime[i>>5] & 1<<(i&31)) {
 26:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 27:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 28:             jmp_down  253  253          // goto 65049;
 29:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
 30:           assignment  131    1    5     // tmp131 = 5: SMALLINT;
 31:        b_shift_right  132  130  131     // tmp132 = tmp130 >> tmp131;
 32:          prop_getter  133  254  132     // tmp133 = isPrime[tmp132];
 33:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 34:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
 35:           assignment  136    1   31     // tmp136 = 31: SMALLINT;
 36:                b_and  137  135  136     // tmp137 = tmp135 & tmp136;
 37:         b_shift_left  138  134  137     // tmp138 = tmp134 << tmp137;
 38:                b_and  139  133  138     // tmp139 = tmp133 & tmp138;
 39:    is_false_jmp_down  139  253  253     // if (tmp139 == false) goto 65060;
//       for (var j=i+i; j<m; j+=i)
//         isPrime[j>>5] &= ~(1<<(j&31));
 40:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
 41:             addition  131  130  254     // tmp131 = tmp130 + i;
 42:           assignment  254    6  131     // j = tmp131 : TYPEOF(tmp131);
 43:             jmp_down  253  253          // goto 65064;
 44:           assignment  130    6  254     // tmp130 = j : TYPEOF(j);
 45:           assignment  131    1    5     // tmp131 = 5: SMALLINT;
 46:        b_shift_right  132  130  131     // tmp132 = tmp130 >> tmp131;
 47:          prop_getter  133  254  132     // tmp133 = isPrime[tmp132];
 47:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 48:           assignment  135    6  254     // tmp135 = j : TYPEOF(j);
 49:           assignment  136    1   31     // tmp136 = 31: SMALLINT;
 50:                b_and  137  135  136     // tmp137 = tmp135 & tmp136;
 51:         b_shift_left  138  134  137     // tmp138 = tmp134 << tmp137;
 52:                b_not  139  138          // tmp139 = ~ tmp138;
 53:          prop_getter  140  254  132     // tmp140 = isPrime[tmp132];
 54:                b_and  140  140  139     // tmp140 = tmp140 & tmp139;
 55:          prop_setter  254  132  140     // isPrime[tmp132] = tmp140;
 56:             addition  254  254  254     // j = j + i;
 43:             jmp_down    0   14          // goto 57; // REWRITE
 57:           assignment  141    6  254     // tmp141 = j : TYPEOF(j);
 58:            less_than  142  141  254     // tmp142 = tmp141 < m;
 59:       is_true_jmp_up  142    0   15     // if (tmp142) goto 44;
//       count++;
 60:            post_incr  130  254          // tmp130 = count++;
//     }
// }
 39:    is_false_jmp_down  139    0   22     // if (tmp139 == false) goto 61; // REWRITE
 61:            post_incr  131  254          // tmp131 = i++;
 28:             jmp_down    0   34          // goto 62; // REWRITE
 62:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 63:            less_than  133  132  254     // tmp133 = tmp132 < m;
 64:       is_true_jmp_up  133    0   35     // if (tmp133) goto 29;
// function sieve() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function sieve (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//     for (var i = 4; i <= 4; i++) {
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
  5:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  6:             jmp_down  253  253          // goto 65027;
//         var isPrime = new Array((10000<<i)+31>>5);
  7:          construct_n  253  254  253     // 
  8:           assignment  130    3  254     // tmp130 = 10000: NUMBER;
  9:         b_shift_left  131  130  254     // tmp131 = tmp130 << i;
 10:           assignment  132    1   31     // tmp132 = 31: SMALLINT;
 11:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 12:           assignment  134    1    5     // tmp134 = 5: SMALLINT;
 13:        b_shift_right  135  133  134     // tmp135 = tmp133 >> tmp134;
 14:                 meta    2  135  255     // 
  7:          construct_n  130  254    1     //  // REWRITE
 15:           assignment  254    6  130     // isPrime = tmp130 : TYPEOF(tmp130);
//         primes(isPrime, i);
 16:               call_n  253  254  253     // 
 17:                 meta    2  254  255     // 
 18:                 meta    2  254  255     // 
 16:               call_n  130  254    2     //  // REWRITE
//     }
 19:            post_incr  131  254          // tmp131 = i++;
  6:             jmp_down    0   14          // goto 20; // REWRITE
 20:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 21:           assignment  133    1    4     // tmp133 = 4: SMALLINT;
 22:   less_or_equal_than  134  132  133     // tmp134 = tmp132 <= tmp133;
 23:       is_true_jmp_up  134    0   16     // if (tmp134) goto 7;
//     return isPrime;
 24:               retval  254               // return isPrime;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  137    2     // var tmp128 .. tmp137; // REWRITE
 25:                  ret                    // ret;
  1:                 meta    7    0   25     // function end: 26; // REWRITE
// var result = sieve();
 65:               call_n  253  254  253     // 
 65:               call_n  130  254    0     //  // REWRITE
 66:           assignment  254    6  130     // result = tmp130 : TYPEOF(tmp130);
// var sum = 0;
 67:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 68:           assignment  254    6  130     // sum = tmp130 : TYPEOF(tmp130);
// for (var i = 0; i < result.length; ++i)
//     sum += result[i];
 69:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 70:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 71:             jmp_down  253  253          // goto 65092;
 72:          prop_getter  130  254  254     // tmp130 = result[i];
 73:             addition  254  254  130     // sum = sum + tmp130;
 74:           assignment  131    6  254     // tmp131 = sum : TYPEOF(sum);
 75:             pre_incr  132  254          // tmp132 = ++i;
 71:             jmp_down    0    5          // goto 76; // REWRITE
 76:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 77:           assignment  134    5  254     // tmp134 = 'length': STRING;
 78:          prop_getter  135  254  134     // tmp135 = result[tmp134];
 79:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 80:       is_true_jmp_up  136    0    8     // if (tmp136) goto 72;
// var expected = -1286749544853;
 81:           assignment  130    3  254     // tmp130 = 1286749544853: NUMBER;
 82:          unary_minus  131  130          // tmp131 = -tmp130;
 83:           assignment  254    6  131     // expected = tmp131 : TYPEOF(tmp131);
// if (sum != expected)
 84:           assignment  130    6  254     // tmp130 = sum : TYPEOF(sum);
 85:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
 86:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65107;
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
 87:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
 88:             addition  131  130  254     // tmp131 = tmp130 + expected;
 89:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 90:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 91:             addition  134  133  254     // tmp134 = tmp133 + sum;
 92:          throw_value  134               // throw tmp134;
// 
 86:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 93; // REWRITE

^
ERROR: Ln 43, Col 1: Unexpected token
