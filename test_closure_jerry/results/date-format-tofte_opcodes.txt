// function arrayExists(array, x) {
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//     for (var i = 0; i < array.length; i++) {
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  253  253          // goto 65029;
//         if (array[i] == x) return true;
  9:          prop_getter  130  254  254     // tmp130 = array[i];
 10:          equal_value  131  130  254     // tmp131 = tmp130 == x;
 11:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65032;
 12:           assignment  130    0    4     // tmp130 = true: SIMPLE;
 13:               retval  130               // return tmp130;
//     }
 11:    is_false_jmp_down  131    0    3     // if (tmp131 == false) goto 14; // REWRITE
 14:            post_incr  131  254          // tmp131 = i++;
  8:             jmp_down    0    7          // goto 15; // REWRITE
 15:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 16:           assignment  133    5  254     // tmp133 = 'length': STRING;
 17:          prop_getter  134  254  133     // tmp134 = array[tmp133];
 18:            less_than  135  132  134     // tmp135 = tmp132 < tmp134;
 19:       is_true_jmp_up  135    0   10     // if (tmp135) goto 9;
//     return false;
 20:           assignment  130    0    3     // tmp130 = false: SIMPLE;
 21:               retval  130               // return tmp130;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  136    1     // var tmp128 .. tmp136; // REWRITE
 22:                  ret                    // ret;
  3:                 meta    7    0   20     // function end: 23; // REWRITE
// Date.prototype.formatDate = function (input,time) {
  2:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
  3:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  4:           assignment  132    5  254     // tmp132 = 'formatDate': STRING;
  5:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_expr_n  134  255    2     //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//     // formatDate :
// 
//     // a PHP date like function, for formatting date strings
// 
//     // See: http://www.php.net/date
// 
//     //
// 
//     // input : format string
// 
//     // time : epoch time (seconds, and optional)
// 
//     //
// 
//     // if time is not passed, formatting is based on 
// 
//     // the current "this" date object's set time.
// 
//     //
// 
//     // supported:
// 
//     // a, A, B, d, D, F, g, G, h, H, i, j, l (lowercase L), L, 
// 
//     // m, M, n, O, r, s, S, t, U, w, W, y, Y, z
// 
//     //
// 
//     // unsupported:
// 
//     // I (capital i), T, Z    
// 
//     var switches =    ["a", "A", "B", "d", "D", "F", "g", "G", "h", "H", 
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           array_decl  253  253  255     // 
  7:           assignment  130    5  254     // tmp130 = 'a': STRING;
  8:                 meta    2  130  255     // 
  9:           assignment  130    5  254     // tmp130 = 'A': STRING;
 10:                 meta    2  130  255     // 
 11:           assignment  130    5  254     // tmp130 = 'B': STRING;
 12:                 meta    2  130  255     // 
 13:           assignment  130    5  254     // tmp130 = 'd': STRING;
 14:                 meta    2  130  255     // 
 15:           assignment  130    5  254     // tmp130 = 'D': STRING;
 16:                 meta    2  130  255     // 
 17:           assignment  130    5  254     // tmp130 = 'F': STRING;
 18:                 meta    2  130  255     // 
 19:           assignment  130    5  254     // tmp130 = 'g': STRING;
 20:                 meta    2  130  255     // 
 21:           assignment  130    5  254     // tmp130 = 'G': STRING;
 22:                 meta    2  130  255     // 
 23:           assignment  130    5  254     // tmp130 = 'h': STRING;
 24:                 meta    2  130  255     // 
 25:           assignment  130    5  254     // tmp130 = 'H': STRING;
 26:                 meta    2  130  255     // 
//                        "i", "j", "l", "L", "m", "M", "n", "O", "r", "s", 
 27:           assignment  130    5  254     // tmp130 = 'i': STRING;
 28:                 meta    2  130  255     // 
 29:           assignment  130    5  254     // tmp130 = 'j': STRING;
 30:                 meta    2  130  255     // 
 31:           assignment  130    5  254     // tmp130 = 'l': STRING;
 32:                 meta    2  130  255     // 
 33:           assignment  130    5  254     // tmp130 = 'L': STRING;
 34:                 meta    2  130  255     // 
 35:           assignment  130    5  254     // tmp130 = 'm': STRING;
 36:                 meta    2  130  255     // 
 37:           assignment  130    5  254     // tmp130 = 'M': STRING;
 38:                 meta    2  130  255     // 
 39:           assignment  130    5  254     // tmp130 = 'n': STRING;
 40:                 meta    2  130  255     // 
 41:           assignment  130    5  254     // tmp130 = 'O': STRING;
 42:                 meta    2  130  255     // 
 43:           assignment  130    5  254     // tmp130 = 'r': STRING;
 44:                 meta    2  130  255     // 
 45:           assignment  130    5  254     // tmp130 = 's': STRING;
 46:                 meta    2  130  255     // 
//                        "S", "t", "U", "w", "W", "y", "Y", "z"];
 47:           assignment  130    5  254     // tmp130 = 'S': STRING;
 48:                 meta    2  130  255     // 
 49:           assignment  130    5  254     // tmp130 = 't': STRING;
 50:                 meta    2  130  255     // 
 51:           assignment  130    5  254     // tmp130 = 'U': STRING;
 52:                 meta    2  130  255     // 
 53:           assignment  130    5  254     // tmp130 = 'w': STRING;
 54:                 meta    2  130  255     // 
 55:           assignment  130    5  254     // tmp130 = 'W': STRING;
 56:                 meta    2  130  255     // 
 57:           assignment  130    5  254     // tmp130 = 'y': STRING;
 58:                 meta    2  130  255     // 
 59:           assignment  130    5  254     // tmp130 = 'Y': STRING;
 60:                 meta    2  130  255     // 
 61:           assignment  130    5  254     // tmp130 = 'z': STRING;
 62:                 meta    2  130  255     // 
  6:           array_decl  130    0   28     //  // REWRITE
 63:           assignment  254    6  130     // switches = tmp130 : TYPEOF(tmp130);
//     var daysLong =    ["Sunday", "Monday", "Tuesday", "Wednesday", 
 64:           array_decl  253  253  255     // 
 65:           assignment  130    5  254     // tmp130 = 'Sunday': STRING;
 66:                 meta    2  130  255     // 
 67:           assignment  130    5  254     // tmp130 = 'Monday': STRING;
 68:                 meta    2  130  255     // 
 69:           assignment  130    5  254     // tmp130 = 'Tuesday': STRING;
 70:                 meta    2  130  255     // 
 71:           assignment  130    5  254     // tmp130 = 'Wednesday': STRING;
 72:                 meta    2  130  255     // 
//                        "Thursday", "Friday", "Saturday"];
 73:           assignment  130    5  254     // tmp130 = 'Thursday': STRING;
 74:                 meta    2  130  255     // 
 75:           assignment  130    5  254     // tmp130 = 'Friday': STRING;
 76:                 meta    2  130  255     // 
 77:           assignment  130    5  254     // tmp130 = 'Saturday': STRING;
 78:                 meta    2  130  255     // 
 64:           array_decl  130    0    7     //  // REWRITE
 79:           assignment  254    6  130     // daysLong = tmp130 : TYPEOF(tmp130);
//     var daysShort =   ["Sun", "Mon", "Tue", "Wed", 
 80:           array_decl  253  253  255     // 
 81:           assignment  130    5  254     // tmp130 = 'Sun': STRING;
 82:                 meta    2  130  255     // 
 83:           assignment  130    5  254     // tmp130 = 'Mon': STRING;
 84:                 meta    2  130  255     // 
 85:           assignment  130    5  254     // tmp130 = 'Tue': STRING;
 86:                 meta    2  130  255     // 
 87:           assignment  130    5  254     // tmp130 = 'Wed': STRING;
 88:                 meta    2  130  255     // 
//                        "Thu", "Fri", "Sat"];
 89:           assignment  130    5  254     // tmp130 = 'Thu': STRING;
 90:                 meta    2  130  255     // 
 91:           assignment  130    5  254     // tmp130 = 'Fri': STRING;
 92:                 meta    2  130  255     // 
 93:           assignment  130    5  254     // tmp130 = 'Sat': STRING;
 94:                 meta    2  130  255     // 
 80:           array_decl  130    0    7     //  // REWRITE
 95:           assignment  254    6  130     // daysShort = tmp130 : TYPEOF(tmp130);
//     var monthsShort = ["Jan", "Feb", "Mar", "Apr",
 96:           array_decl  253  253  255     // 
 97:           assignment  130    5  254     // tmp130 = 'Jan': STRING;
 98:                 meta    2  130  255     // 
 99:           assignment  130    5  254     // tmp130 = 'Feb': STRING;
100:                 meta    2  130  255     // 
101:           assignment  130    5  254     // tmp130 = 'Mar': STRING;
102:                 meta    2  130  255     // 
103:           assignment  130    5  254     // tmp130 = 'Apr': STRING;
104:                 meta    2  130  255     // 
//                        "May", "Jun", "Jul", "Aug", "Sep",
105:           assignment  130    5  254     // tmp130 = 'May': STRING;
106:                 meta    2  130  255     // 
107:           assignment  130    5  254     // tmp130 = 'Jun': STRING;
108:                 meta    2  130  255     // 
109:           assignment  130    5  254     // tmp130 = 'Jul': STRING;
110:                 meta    2  130  255     // 
111:           assignment  130    5  254     // tmp130 = 'Aug': STRING;
112:                 meta    2  130  255     // 
113:           assignment  130    5  254     // tmp130 = 'Sep': STRING;
114:                 meta    2  130  255     // 
//                        "Oct", "Nov", "Dec"];
115:           assignment  130    5  254     // tmp130 = 'Oct': STRING;
116:                 meta    2  130  255     // 
117:           assignment  130    5  254     // tmp130 = 'Nov': STRING;
118:                 meta    2  130  255     // 
119:           assignment  130    5  254     // tmp130 = 'Dec': STRING;
120:                 meta    2  130  255     // 
 96:           array_decl  130    0   12     //  // REWRITE
121:           assignment  254    6  130     // monthsShort = tmp130 : TYPEOF(tmp130);
//     var monthsLong =  ["January", "February", "March", "April",
122:           array_decl  253  253  255     // 
123:           assignment  130    5  254     // tmp130 = 'January': STRING;
124:                 meta    2  130  255     // 
125:           assignment  130    5  254     // tmp130 = 'February': STRING;
126:                 meta    2  130  255     // 
127:           assignment  130    5  254     // tmp130 = 'March': STRING;
128:                 meta    2  130  255     // 
129:           assignment  130    5  254     // tmp130 = 'April': STRING;
130:                 meta    2  130  255     // 
//                        "May", "June", "July", "August", "September",
131:           assignment  130    5  254     // tmp130 = 'May': STRING;
132:                 meta    2  130  255     // 
133:           assignment  130    5  254     // tmp130 = 'June': STRING;
134:                 meta    2  130  255     // 
135:           assignment  130    5  254     // tmp130 = 'July': STRING;
136:                 meta    2  130  255     // 
137:           assignment  130    5  254     // tmp130 = 'August': STRING;
138:                 meta    2  130  255     // 
139:           assignment  130    5  254     // tmp130 = 'September': STRING;
140:                 meta    2  130  255     // 
//                        "October", "November", "December"];
141:           assignment  130    5  254     // tmp130 = 'October': STRING;
142:                 meta    2  130  255     // 
143:           assignment  130    5  254     // tmp130 = 'November': STRING;
144:                 meta    2  130  255     // 
145:           assignment  130    5  254     // tmp130 = 'December': STRING;
146:                 meta    2  130  255     // 
122:           array_decl  130    0   12     //  // REWRITE
147:           assignment  254    6  130     // monthsLong = tmp130 : TYPEOF(tmp130);
//     var daysSuffix = ["st", "nd", "rd", "th", "th", "th", "th", // 1st - 7th
148:           array_decl  253  253  255     // 
149:           assignment  130    5  254     // tmp130 = 'st': STRING;
150:                 meta    2  130  255     // 
151:           assignment  130    5  254     // tmp130 = 'nd': STRING;
152:                 meta    2  130  255     // 
153:           assignment  130    5  254     // tmp130 = 'rd': STRING;
154:                 meta    2  130  255     // 
155:           assignment  130    5  254     // tmp130 = 'th': STRING;
156:                 meta    2  130  255     // 
157:           assignment  130    5  254     // tmp130 = 'th': STRING;
158:                 meta    2  130  255     // 
159:           assignment  130    5  254     // tmp130 = 'th': STRING;
160:                 meta    2  130  255     // 
161:           assignment  130    5  254     // tmp130 = 'th': STRING;
162:                 meta    2  130  255     // 
// 
//                       "th", "th", "th", "th", "th", "th", "th", // 8th - 14th
163:           assignment  130    5  254     // tmp130 = 'th': STRING;
164:                 meta    2  130  255     // 
165:           assignment  130    5  254     // tmp130 = 'th': STRING;
166:                 meta    2  130  255     // 
167:           assignment  130    5  254     // tmp130 = 'th': STRING;
168:                 meta    2  130  255     // 
169:           assignment  130    5  254     // tmp130 = 'th': STRING;
170:                 meta    2  130  255     // 
171:           assignment  130    5  254     // tmp130 = 'th': STRING;
172:                 meta    2  130  255     // 
173:           assignment  130    5  254     // tmp130 = 'th': STRING;
174:                 meta    2  130  255     // 
175:           assignment  130    5  254     // tmp130 = 'th': STRING;
176:                 meta    2  130  255     // 
// 
//                       "th", "th", "th", "th", "th", "th", "st", // 15th - 21st
177:           assignment  130    5  254     // tmp130 = 'th': STRING;
178:                 meta    2  130  255     // 
179:           assignment  130    5  254     // tmp130 = 'th': STRING;
180:                 meta    2  130  255     // 
181:           assignment  130    5  254     // tmp130 = 'th': STRING;
182:                 meta    2  130  255     // 
183:           assignment  130    5  254     // tmp130 = 'th': STRING;
184:                 meta    2  130  255     // 
185:           assignment  130    5  254     // tmp130 = 'th': STRING;
186:                 meta    2  130  255     // 
187:           assignment  130    5  254     // tmp130 = 'th': STRING;
188:                 meta    2  130  255     // 
189:           assignment  130    5  254     // tmp130 = 'st': STRING;
190:                 meta    2  130  255     // 
// 
//                       "nd", "rd", "th", "th", "th", "th", "th", // 22nd - 28th
191:           assignment  130    5  254     // tmp130 = 'nd': STRING;
192:                 meta    2  130  255     // 
193:           assignment  130    5  254     // tmp130 = 'rd': STRING;
194:                 meta    2  130  255     // 
195:           assignment  130    5  254     // tmp130 = 'th': STRING;
196:                 meta    2  130  255     // 
197:           assignment  130    5  254     // tmp130 = 'th': STRING;
198:                 meta    2  130  255     // 
199:           assignment  130    5  254     // tmp130 = 'th': STRING;
200:                 meta    2  130  255     // 
201:           assignment  130    5  254     // tmp130 = 'th': STRING;
202:                 meta    2  130  255     // 
203:           assignment  130    5  254     // tmp130 = 'th': STRING;
204:                 meta    2  130  255     // 
// 
//                       "th", "th", "st"];                        // 29th - 31st
205:           assignment  130    5  254     // tmp130 = 'th': STRING;
206:                 meta    2  130  255     // 
207:           assignment  130    5  254     // tmp130 = 'th': STRING;
208:                 meta    2  130  255     // 
209:           assignment  130    5  254     // tmp130 = 'st': STRING;
210:                 meta    2  130  255     // 
148:           array_decl  130    0   31     //  // REWRITE
211:           assignment  254    6  130     // daysSuffix = tmp130 : TYPEOF(tmp130);
// 
//     function a() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function a (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Lowercase Ante meridiem and Post meridiem
// 
//         return self.getHours() > 11? "pm" : "am";
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1   11     // tmp134 = 11: SMALLINT;
 10:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 11:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65032;
 12:           assignment  136    5  254     // tmp136 = 'pm': STRING;
 13:           assignment  137    6  136     // tmp137 = tmp136 : TYPEOF(tmp136);
 14:             jmp_down  253  253          // goto 65035;
 11:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 15; // REWRITE
 15:           assignment  138    5  254     // tmp138 = 'am': STRING;
 16:           assignment  137    6  138     // tmp137 = tmp138 : TYPEOF(tmp138);
 14:             jmp_down    0    3          // goto 17; // REWRITE
 17:               retval  137               // return tmp137;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  138    0     // var tmp128 .. tmp138; // REWRITE
 18:                  ret                    // ret;
  1:                 meta    7    0   18     // function end: 19; // REWRITE
//     function A() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function A (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Uppercase Ante meridiem and Post meridiem
// 
//         return self.getHours() > 11? "PM" : "AM";
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1   11     // tmp134 = 11: SMALLINT;
 10:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 11:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65032;
 12:           assignment  136    5  254     // tmp136 = 'PM': STRING;
 13:           assignment  137    6  136     // tmp137 = tmp136 : TYPEOF(tmp136);
 14:             jmp_down  253  253          // goto 65035;
 11:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 15; // REWRITE
 15:           assignment  138    5  254     // tmp138 = 'AM': STRING;
 16:           assignment  137    6  138     // tmp137 = tmp138 : TYPEOF(tmp138);
 14:             jmp_down    0    3          // goto 17; // REWRITE
 17:               retval  137               // return tmp137;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  138    0     // var tmp128 .. tmp138; // REWRITE
 18:                  ret                    // ret;
  1:                 meta    7    0   18     // function end: 19; // REWRITE
//     function B(){
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function B (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Swatch internet time. code simply grabbed from ppk,
// 
//         // since I was feeling lazy:
// 
//         // http://www.xs4all.nl/~ppk/js/beat.html
// 
//         var off = (self.getTimezoneOffset() + 60)*60;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getTimezoneOffset': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1   60     // tmp134 = 60: SMALLINT;
 10:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
 11:           assignment  136    1   60     // tmp136 = 60: SMALLINT;
 12:       multiplication  137  135  136     // tmp137 = tmp135 * tmp136;
 13:           assignment  254    6  137     // off = tmp137 : TYPEOF(tmp137);
//         var theSeconds = (self.getHours() * 3600) + 
 14:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
 15:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 16:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 17:               call_n  253  131  253     // 
 18:                 meta    1    1  132     // 
 17:               call_n  133  131    0     //  // REWRITE
 19:           assignment  134    3  254     // tmp134 = 3600: NUMBER;
 20:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
//                          (self.getMinutes() * 60) + 
 21:           assignment  136    5  254     // tmp136 = 'getMinutes': STRING;
 22:          prop_getter  137  254  136     // tmp137 = self[tmp136];
 23:           assignment  138    6  254     // tmp138 = self : TYPEOF(self);
 24:               call_n  253  137  253     // 
 25:                 meta    1    1  138     // 
 24:               call_n  139  137    0     //  // REWRITE
 26:           assignment  140    1   60     // tmp140 = 60: SMALLINT;
 27:       multiplication  141  139  140     // tmp141 = tmp139 * tmp140;
 28:             addition  142  135  141     // tmp142 = tmp135 + tmp141;
//                           self.getSeconds() + off;
 29:           assignment  143    5  254     // tmp143 = 'getSeconds': STRING;
 30:          prop_getter  144  254  143     // tmp144 = self[tmp143];
 31:           assignment  145    6  254     // tmp145 = self : TYPEOF(self);
 32:               call_n  253  144  253     // 
 33:                 meta    1    1  145     // 
 32:               call_n  146  144    0     //  // REWRITE
 34:             addition  147  142  146     // tmp147 = tmp142 + tmp146;
 35:             addition  148  147  254     // tmp148 = tmp147 + off;
 36:           assignment  254    6  148     // theSeconds = tmp148 : TYPEOF(tmp148);
//         var beat = Math.floor(theSeconds/86.4);
 37:           assignment  130    5  254     // tmp130 = 'floor': STRING;
 38:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 39:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 40:               call_n  253  131  253     // 
 41:                 meta    1    1  132     // 
 42:           assignment  133    6  254     // tmp133 = theSeconds : TYPEOF(theSeconds);
 43:           assignment  134    3  254     // tmp134 = 86.4: NUMBER;
 44:             division  135  133  134     // tmp135 = tmp133 / tmp134;
 45:                 meta    2  135  255     // 
 40:               call_n  133  131    1     //  // REWRITE
 46:           assignment  254    6  133     // beat = tmp133 : TYPEOF(tmp133);
//         if (beat > 1000) beat -= 1000;
 47:           assignment  130    6  254     // tmp130 = beat : TYPEOF(beat);
 48:           assignment  131    3  254     // tmp131 = 1000: NUMBER;
 49:         greater_than  132  130  131     // tmp132 = tmp130 > tmp131;
 50:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65071;
 51:           assignment  130    3  254     // tmp130 = 1000: NUMBER;
 52:         substraction  254  254  130     // beat = beat - tmp130;
 53:           assignment  131    6  254     // tmp131 = beat : TYPEOF(beat);
//         if (beat < 0) beat += 1000;
 50:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 54; // REWRITE
 54:           assignment  130    6  254     // tmp130 = beat : TYPEOF(beat);
 55:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 56:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
 57:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65078;
 58:           assignment  130    3  254     // tmp130 = 1000: NUMBER;
 59:             addition  254  254  130     // beat = beat + tmp130;
 60:           assignment  131    6  254     // tmp131 = beat : TYPEOF(beat);
//         if ((""+beat).length == 1) beat = "00"+beat;
 57:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 61; // REWRITE
 61:           assignment  130    5  254     // tmp130 = '': STRING;
 62:             addition  131  130  254     // tmp131 = tmp130 + beat;
 63:           assignment  132    5  254     // tmp132 = 'length': STRING;
 64:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 65:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 66:          equal_value  135  133  134     // tmp135 = tmp133 == tmp134;
 67:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65088;
 68:           assignment  130    5  254     // tmp130 = '00': STRING;
 69:             addition  131  130  254     // tmp131 = tmp130 + beat;
 70:           assignment  254    6  131     // beat = tmp131 : TYPEOF(tmp131);
//         if ((""+beat).length == 2) beat = "0"+beat;
 67:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 71; // REWRITE
 71:           assignment  130    5  254     // tmp130 = '': STRING;
 72:             addition  131  130  254     // tmp131 = tmp130 + beat;
 73:           assignment  132    5  254     // tmp132 = 'length': STRING;
 74:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 75:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
 76:          equal_value  135  133  134     // tmp135 = tmp133 == tmp134;
 77:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65098;
 78:           assignment  130    5  254     // tmp130 = '0': STRING;
 79:             addition  131  130  254     // tmp131 = tmp130 + beat;
 80:           assignment  254    6  131     // beat = tmp131 : TYPEOF(tmp131);
//         return beat;
 77:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 81; // REWRITE
 81:               retval  254               // return beat;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  151    3     // var tmp128 .. tmp151; // REWRITE
 82:                  ret                    // ret;
  1:                 meta    7    0   82     // function end: 83; // REWRITE
//     
//     function d() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function d (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Day of the month, 2 digits with leading zeros
// 
//         return new String(self.getDate()).length == 1?
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:           assignment  130    5  254     // tmp130 = 'getDate': STRING;
  6:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  7:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  8:               call_n  253  131  253     // 
  9:                 meta    1    1  132     // 
  8:               call_n  133  131    0     //  // REWRITE
 10:                 meta    2  133  255     // 
  4:          construct_n  130  254    1     //  // REWRITE
 11:           assignment  131    5  254     // tmp131 = 'length': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 13:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 14:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 15:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65036;
//         "0"+self.getDate() : self.getDate();
 16:           assignment  135    5  254     // tmp135 = '0': STRING;
 17:           assignment  136    5  254     // tmp136 = 'getDate': STRING;
 18:          prop_getter  137  254  136     // tmp137 = self[tmp136];
 19:           assignment  138    6  254     // tmp138 = self : TYPEOF(self);
 20:               call_n  253  137  253     // 
 21:                 meta    1    1  138     // 
 20:               call_n  139  137    0     //  // REWRITE
 22:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
 23:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
 24:             jmp_down  253  253          // goto 65045;
 15:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 25; // REWRITE
 25:           assignment  142    5  254     // tmp142 = 'getDate': STRING;
 26:          prop_getter  143  254  142     // tmp143 = self[tmp142];
 27:           assignment  144    6  254     // tmp144 = self : TYPEOF(self);
 28:               call_n  253  143  253     // 
 29:                 meta    1    1  144     // 
 28:               call_n  145  143    0     //  // REWRITE
 30:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
 24:             jmp_down    0    7          // goto 31; // REWRITE
 31:               retval  141               // return tmp141;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  145    0     // var tmp128 .. tmp145; // REWRITE
 32:                  ret                    // ret;
  1:                 meta    7    0   32     // function end: 33; // REWRITE
//     function D() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function D (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // A textual representation of a day, three letters
// 
//         return daysShort[self.getDay()];
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getDay': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:          prop_getter  134  254  133     // tmp134 = daysShort[tmp133];
 10:               retval  134               // return tmp134;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 11:                  ret                    // ret;
  1:                 meta    7    0   11     // function end: 12; // REWRITE
//     function F() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function F (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // A full textual representation of a month
// 
//         return monthsLong[self.getMonth()];
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getMonth': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:          prop_getter  134  254  133     // tmp134 = monthsLong[tmp133];
 10:               retval  134               // return tmp134;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 11:                  ret                    // ret;
  1:                 meta    7    0   11     // function end: 12; // REWRITE
//     function g() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function g (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // 12-hour format of an hour without leading zeros
// 
//         return self.getHours() > 12? self.getHours()-12 : self.getHours();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1   12     // tmp134 = 12: SMALLINT;
 10:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 11:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65032;
 12:           assignment  136    5  254     // tmp136 = 'getHours': STRING;
 13:          prop_getter  137  254  136     // tmp137 = self[tmp136];
 14:           assignment  138    6  254     // tmp138 = self : TYPEOF(self);
 15:               call_n  253  137  253     // 
 16:                 meta    1    1  138     // 
 15:               call_n  139  137    0     //  // REWRITE
 17:           assignment  140    1   12     // tmp140 = 12: SMALLINT;
 18:         substraction  141  139  140     // tmp141 = tmp139 - tmp140;
 19:           assignment  142    6  141     // tmp142 = tmp141 : TYPEOF(tmp141);
 20:             jmp_down  253  253          // goto 65041;
 11:    is_false_jmp_down  135    0   10     // if (tmp135 == false) goto 21; // REWRITE
 21:           assignment  143    5  254     // tmp143 = 'getHours': STRING;
 22:          prop_getter  144  254  143     // tmp144 = self[tmp143];
 23:           assignment  145    6  254     // tmp145 = self : TYPEOF(self);
 24:               call_n  253  144  253     // 
 25:                 meta    1    1  145     // 
 24:               call_n  146  144    0     //  // REWRITE
 26:           assignment  142    6  146     // tmp142 = tmp146 : TYPEOF(tmp146);
 20:             jmp_down    0    7          // goto 27; // REWRITE
 27:               retval  142               // return tmp142;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  146    0     // var tmp128 .. tmp146; // REWRITE
 28:                  ret                    // ret;
  1:                 meta    7    0   28     // function end: 29; // REWRITE
//     function G() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function G (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // 24-hour format of an hour without leading zeros
// 
//         return self.getHours();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:               retval  133               // return tmp133;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 10:                  ret                    // ret;
  1:                 meta    7    0   10     // function end: 11; // REWRITE
//     function h() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function h (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // 12-hour format of an hour with leading zeros
// 
//         if (self.getHours() > 12) {
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1   12     // tmp134 = 12: SMALLINT;
 10:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 11:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65032;
//           var s = new String(self.getHours()-12);
 12:          construct_n  253  254  253     // 
 13:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
 14:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 15:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 16:               call_n  253  131  253     // 
 17:                 meta    1    1  132     // 
 16:               call_n  133  131    0     //  // REWRITE
 18:           assignment  134    1   12     // tmp134 = 12: SMALLINT;
 19:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
 20:                 meta    2  135  255     // 
 12:          construct_n  130  254    1     //  // REWRITE
 21:           assignment  254    6  130     // s = tmp130 : TYPEOF(tmp130);
//           return s.length == 1?
 22:           assignment  130    5  254     // tmp130 = 'length': STRING;
 23:          prop_getter  131  254  130     // tmp131 = s[tmp130];
 24:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 25:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
 26:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65047;
//           "0"+ (self.getHours()-12) : self.getHours()-12;
 27:           assignment  134    5  254     // tmp134 = '0': STRING;
 28:           assignment  135    5  254     // tmp135 = 'getHours': STRING;
 29:          prop_getter  136  254  135     // tmp136 = self[tmp135];
 30:           assignment  137    6  254     // tmp137 = self : TYPEOF(self);
 31:               call_n  253  136  253     // 
 32:                 meta    1    1  137     // 
 31:               call_n  138  136    0     //  // REWRITE
 33:           assignment  139    1   12     // tmp139 = 12: SMALLINT;
 34:         substraction  140  138  139     // tmp140 = tmp138 - tmp139;
 35:             addition  141  134  140     // tmp141 = tmp134 + tmp140;
 36:           assignment  142    6  141     // tmp142 = tmp141 : TYPEOF(tmp141);
 37:             jmp_down  253  253          // goto 65058;
 26:    is_false_jmp_down  133    0   12     // if (tmp133 == false) goto 38; // REWRITE
 38:           assignment  143    5  254     // tmp143 = 'getHours': STRING;
 39:          prop_getter  144  254  143     // tmp144 = self[tmp143];
 40:           assignment  145    6  254     // tmp145 = self : TYPEOF(self);
 41:               call_n  253  144  253     // 
 42:                 meta    1    1  145     // 
 41:               call_n  146  144    0     //  // REWRITE
 43:           assignment  147    1   12     // tmp147 = 12: SMALLINT;
 44:         substraction  148  146  147     // tmp148 = tmp146 - tmp147;
 45:           assignment  142    6  148     // tmp142 = tmp148 : TYPEOF(tmp148);
 37:             jmp_down    0    9          // goto 46; // REWRITE
 46:               retval  142               // return tmp142;
//         } else { 
 47:             jmp_down  253  253          // goto 65068;
 11:    is_false_jmp_down  135    0   37     // if (tmp135 == false) goto 48; // REWRITE
//           var s = new String(self.getHours());
 48:          construct_n  253  254  253     // 
 49:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
 50:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 51:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 52:               call_n  253  131  253     // 
 53:                 meta    1    1  132     // 
 52:               call_n  133  131    0     //  // REWRITE
 54:                 meta    2  133  255     // 
 48:          construct_n  130  254    1     //  // REWRITE
 55:           assignment  254    6  130     // s = tmp130 : TYPEOF(tmp130);
//           return s.length == 1?
 56:           assignment  130    5  254     // tmp130 = 'length': STRING;
 57:          prop_getter  131  254  130     // tmp131 = s[tmp130];
 58:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 59:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
 60:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65081;
//           "0"+self.getHours() : self.getHours();
 61:           assignment  134    5  254     // tmp134 = '0': STRING;
 62:           assignment  135    5  254     // tmp135 = 'getHours': STRING;
 63:          prop_getter  136  254  135     // tmp136 = self[tmp135];
 64:           assignment  137    6  254     // tmp137 = self : TYPEOF(self);
 65:               call_n  253  136  253     // 
 66:                 meta    1    1  137     // 
 65:               call_n  138  136    0     //  // REWRITE
 67:             addition  139  134  138     // tmp139 = tmp134 + tmp138;
 68:           assignment  140    6  139     // tmp140 = tmp139 : TYPEOF(tmp139);
 69:             jmp_down  253  253          // goto 65090;
 60:    is_false_jmp_down  133    0   10     // if (tmp133 == false) goto 70; // REWRITE
 70:           assignment  141    5  254     // tmp141 = 'getHours': STRING;
 71:          prop_getter  142  254  141     // tmp142 = self[tmp141];
 72:           assignment  143    6  254     // tmp143 = self : TYPEOF(self);
 73:               call_n  253  142  253     // 
 74:                 meta    1    1  143     // 
 73:               call_n  144  142    0     //  // REWRITE
 75:           assignment  140    6  144     // tmp140 = tmp144 : TYPEOF(tmp144);
 69:             jmp_down    0    7          // goto 76; // REWRITE
 76:               retval  140               // return tmp140;
//         }  
 47:             jmp_down    0   30          // goto 77; // REWRITE
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  149    1     // var tmp128 .. tmp149; // REWRITE
 77:                  ret                    // ret;
  1:                 meta    7    0   77     // function end: 78; // REWRITE
//     function H() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function H (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // 24-hour format of an hour with leading zeros
// 
//         return new String(self.getHours()).length == 1?
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:           assignment  130    5  254     // tmp130 = 'getHours': STRING;
  6:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  7:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  8:               call_n  253  131  253     // 
  9:                 meta    1    1  132     // 
  8:               call_n  133  131    0     //  // REWRITE
 10:                 meta    2  133  255     // 
  4:          construct_n  130  254    1     //  // REWRITE
 11:           assignment  131    5  254     // tmp131 = 'length': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 13:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 14:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 15:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65036;
//         "0"+self.getHours() : self.getHours();
 16:           assignment  135    5  254     // tmp135 = '0': STRING;
 17:           assignment  136    5  254     // tmp136 = 'getHours': STRING;
 18:          prop_getter  137  254  136     // tmp137 = self[tmp136];
 19:           assignment  138    6  254     // tmp138 = self : TYPEOF(self);
 20:               call_n  253  137  253     // 
 21:                 meta    1    1  138     // 
 20:               call_n  139  137    0     //  // REWRITE
 22:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
 23:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
 24:             jmp_down  253  253          // goto 65045;
 15:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 25; // REWRITE
 25:           assignment  142    5  254     // tmp142 = 'getHours': STRING;
 26:          prop_getter  143  254  142     // tmp143 = self[tmp142];
 27:           assignment  144    6  254     // tmp144 = self : TYPEOF(self);
 28:               call_n  253  143  253     // 
 29:                 meta    1    1  144     // 
 28:               call_n  145  143    0     //  // REWRITE
 30:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
 24:             jmp_down    0    7          // goto 31; // REWRITE
 31:               retval  141               // return tmp141;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  145    0     // var tmp128 .. tmp145; // REWRITE
 32:                  ret                    // ret;
  1:                 meta    7    0   32     // function end: 33; // REWRITE
//     function i() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function i (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Minutes with leading zeros
// 
//         return new String(self.getMinutes()).length == 1? 
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:           assignment  130    5  254     // tmp130 = 'getMinutes': STRING;
  6:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  7:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  8:               call_n  253  131  253     // 
  9:                 meta    1    1  132     // 
  8:               call_n  133  131    0     //  // REWRITE
 10:                 meta    2  133  255     // 
  4:          construct_n  130  254    1     //  // REWRITE
 11:           assignment  131    5  254     // tmp131 = 'length': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 13:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 14:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 15:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65036;
//         "0"+self.getMinutes() : self.getMinutes(); 
 16:           assignment  135    5  254     // tmp135 = '0': STRING;
 17:           assignment  136    5  254     // tmp136 = 'getMinutes': STRING;
 18:          prop_getter  137  254  136     // tmp137 = self[tmp136];
 19:           assignment  138    6  254     // tmp138 = self : TYPEOF(self);
 20:               call_n  253  137  253     // 
 21:                 meta    1    1  138     // 
 20:               call_n  139  137    0     //  // REWRITE
 22:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
 23:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
 24:             jmp_down  253  253          // goto 65045;
 15:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 25; // REWRITE
 25:           assignment  142    5  254     // tmp142 = 'getMinutes': STRING;
 26:          prop_getter  143  254  142     // tmp143 = self[tmp142];
 27:           assignment  144    6  254     // tmp144 = self : TYPEOF(self);
 28:               call_n  253  143  253     // 
 29:                 meta    1    1  144     // 
 28:               call_n  145  143    0     //  // REWRITE
 30:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
 24:             jmp_down    0    7          // goto 31; // REWRITE
 31:               retval  141               // return tmp141;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  145    0     // var tmp128 .. tmp145; // REWRITE
 32:                  ret                    // ret;
  1:                 meta    7    0   32     // function end: 33; // REWRITE
//     function j() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function j (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Day of the month without leading zeros
// 
//         return self.getDate();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getDate': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:               retval  133               // return tmp133;
//     }    
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 10:                  ret                    // ret;
  1:                 meta    7    0   10     // function end: 11; // REWRITE
//     function l() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function l (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // A full textual representation of the day of the week
// 
//         return daysLong[self.getDay()];
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getDay': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:          prop_getter  134  254  133     // tmp134 = daysLong[tmp133];
 10:               retval  134               // return tmp134;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 11:                  ret                    // ret;
  1:                 meta    7    0   11     // function end: 12; // REWRITE
//     function L() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function L (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // leap year or not. 1 if leap year, 0 if not.
// 
//         // the logic should match iso's 8601 standard.
// 
//         var y_ = Y();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:               call_n  253  254  253     // 
  4:               call_n  130  254    0     //  // REWRITE
  5:           assignment  254    6  130     // y_ = tmp130 : TYPEOF(tmp130);
//         if (         
//             (y_ % 4 == 0 && y_ % 100 != 0) ||
  6:           assignment  130    6  254     // tmp130 = y_ : TYPEOF(y_);
  7:           assignment  131    1    4     // tmp131 = 4: SMALLINT;
  8:            remainder  132  130  131     // tmp132 = tmp130 %% tmp131;
  9:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 10:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 11:           assignment  135    6  134     // tmp135 = tmp134 : TYPEOF(tmp134);
 12:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65033;
 13:           assignment  136    6  254     // tmp136 = y_ : TYPEOF(y_);
 14:           assignment  137    1  100     // tmp137 = 100: SMALLINT;
 15:            remainder  138  136  137     // tmp138 = tmp136 %% tmp137;
 16:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
 17:      not_equal_value  140  138  139     // tmp140 = tmp138 != tmp139;
 18:           assignment  135    6  140     // tmp135 = tmp140 : TYPEOF(tmp140);
 12:    is_false_jmp_down  135    0    7     // if (tmp135 == false) goto 19; // REWRITE
 19:           assignment  141    6  135     // tmp141 = tmp135 : TYPEOF(tmp135);
 20:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65041;
//             (y_ % 4 == 0 && y_ % 100 == 0 && y_ % 400 == 0)
 21:           assignment  142    6  254     // tmp142 = y_ : TYPEOF(y_);
 22:           assignment  143    1    4     // tmp143 = 4: SMALLINT;
 23:            remainder  144  142  143     // tmp144 = tmp142 %% tmp143;
 24:           assignment  145    1    0     // tmp145 = 0: SMALLINT;
 25:          equal_value  146  144  145     // tmp146 = tmp144 == tmp145;
 26:           assignment  147    6  146     // tmp147 = tmp146 : TYPEOF(tmp146);
 27:    is_false_jmp_down  147  253  253     // if (tmp147 == false) goto 65048;
 28:           assignment  148    6  254     // tmp148 = y_ : TYPEOF(y_);
 29:           assignment  149    1  100     // tmp149 = 100: SMALLINT;
 30:            remainder  150  148  149     // tmp150 = tmp148 %% tmp149;
 31:           assignment  151    1    0     // tmp151 = 0: SMALLINT;
 32:          equal_value  152  150  151     // tmp152 = tmp150 == tmp151;
 33:           assignment  147    6  152     // tmp147 = tmp152 : TYPEOF(tmp152);
 34:    is_false_jmp_down  147  253  253     // if (tmp147 == false) goto 65055;
 35:           assignment  153    6  254     // tmp153 = y_ : TYPEOF(y_);
 36:           assignment  154    3  254     // tmp154 = 400: NUMBER;
 37:            remainder  155  153  154     // tmp155 = tmp153 %% tmp154;
 38:           assignment  156    1    0     // tmp156 = 0: SMALLINT;
 39:          equal_value  157  155  156     // tmp157 = tmp155 == tmp156;
 40:           assignment  147    6  157     // tmp147 = tmp157 : TYPEOF(tmp157);
 27:    is_false_jmp_down  147    0   14     // if (tmp147 == false) goto 41; // REWRITE
 34:    is_false_jmp_down  147    0    7     // if (tmp147 == false) goto 41; // REWRITE
//             ) {
 41:           assignment  141    6  147     // tmp141 = tmp147 : TYPEOF(tmp147);
 20:     is_true_jmp_down  141    0   22     // if (tmp141) goto 42; // REWRITE
 42:    is_false_jmp_down  141  253  253     // if (tmp141 == false) goto 65063;
//             return 1;
 43:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 44:               retval  130               // return tmp130;
//         } else {
 45:             jmp_down  253  253          // goto 65066;
 42:    is_false_jmp_down  141    0    4     // if (tmp141 == false) goto 46; // REWRITE
//             return 0;
 46:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 47:               retval  130               // return tmp130;
//         }
 45:             jmp_down    0    3          // goto 48; // REWRITE
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  158    1     // var tmp128 .. tmp158; // REWRITE
 48:                  ret                    // ret;
  1:                 meta    7    0   48     // function end: 49; // REWRITE
//     function m() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function m (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Numeric representation of a month, with leading zeros
// 
//         return self.getMonth() < 9?
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getMonth': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1    9     // tmp134 = 9: SMALLINT;
 10:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 11:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65032;
//         "0"+(self.getMonth()+1) : 
 12:           assignment  136    5  254     // tmp136 = '0': STRING;
 13:           assignment  137    5  254     // tmp137 = 'getMonth': STRING;
 14:          prop_getter  138  254  137     // tmp138 = self[tmp137];
 15:           assignment  139    6  254     // tmp139 = self : TYPEOF(self);
 16:               call_n  253  138  253     // 
 17:                 meta    1    1  139     // 
 16:               call_n  140  138    0     //  // REWRITE
 18:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 19:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 20:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
 21:           assignment  144    6  143     // tmp144 = tmp143 : TYPEOF(tmp143);
 22:             jmp_down  253  253          // goto 65043;
 11:    is_false_jmp_down  135    0   12     // if (tmp135 == false) goto 23; // REWRITE
//         self.getMonth()+1;
 23:           assignment  145    5  254     // tmp145 = 'getMonth': STRING;
 24:          prop_getter  146  254  145     // tmp146 = self[tmp145];
 25:           assignment  147    6  254     // tmp147 = self : TYPEOF(self);
 26:               call_n  253  146  253     // 
 27:                 meta    1    1  147     // 
 26:               call_n  148  146    0     //  // REWRITE
 28:           assignment  149    1    1     // tmp149 = 1: SMALLINT;
 29:             addition  150  148  149     // tmp150 = tmp148 + tmp149;
 30:           assignment  144    6  150     // tmp144 = tmp150 : TYPEOF(tmp150);
 22:             jmp_down    0    9          // goto 31; // REWRITE
 31:               retval  144               // return tmp144;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  150    0     // var tmp128 .. tmp150; // REWRITE
 32:                  ret                    // ret;
  1:                 meta    7    0   32     // function end: 33; // REWRITE
//     function M() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function M (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // A short textual representation of a month, three letters
// 
//         return monthsShort[self.getMonth()];
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getMonth': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:          prop_getter  134  254  133     // tmp134 = monthsShort[tmp133];
 10:               retval  134               // return tmp134;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 11:                  ret                    // ret;
  1:                 meta    7    0   11     // function end: 12; // REWRITE
//     function n() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function n (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Numeric representation of a month, without leading zeros
// 
//         return self.getMonth()+1;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getMonth': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 10:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
 11:               retval  135               // return tmp135;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  135    0     // var tmp128 .. tmp135; // REWRITE
 12:                  ret                    // ret;
  1:                 meta    7    0   12     // function end: 13; // REWRITE
//     function O() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function O (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Difference to Greenwich time (GMT) in hours
// 
//         var os = Math.abs(self.getTimezoneOffset());
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'abs': STRING;
  5:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  6:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  9:           assignment  133    5  254     // tmp133 = 'getTimezoneOffset': STRING;
 10:          prop_getter  134  254  133     // tmp134 = self[tmp133];
 11:           assignment  135    6  254     // tmp135 = self : TYPEOF(self);
 12:               call_n  253  134  253     // 
 13:                 meta    1    1  135     // 
 12:               call_n  136  134    0     //  // REWRITE
 14:                 meta    2  136  255     // 
  7:               call_n  133  131    1     //  // REWRITE
 15:           assignment  254    6  133     // os = tmp133 : TYPEOF(tmp133);
//         var h = ""+Math.floor(os/60);
 16:           assignment  130    5  254     // tmp130 = '': STRING;
 17:           assignment  131    5  254     // tmp131 = 'floor': STRING;
 18:          prop_getter  132  254  131     // tmp132 = Math[tmp131];
 19:           assignment  133    6  254     // tmp133 = Math : TYPEOF(Math);
 20:               call_n  253  132  253     // 
 21:                 meta    1    1  133     // 
 22:           assignment  134    6  254     // tmp134 = os : TYPEOF(os);
 23:           assignment  135    1   60     // tmp135 = 60: SMALLINT;
 24:             division  136  134  135     // tmp136 = tmp134 / tmp135;
 25:                 meta    2  136  255     // 
 20:               call_n  134  132    1     //  // REWRITE
 26:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
 27:           assignment  254    6  135     // h = tmp135 : TYPEOF(tmp135);
//         var m = ""+(os%60);
 28:           assignment  130    5  254     // tmp130 = '': STRING;
 29:           assignment  131    6  254     // tmp131 = os : TYPEOF(os);
 30:           assignment  132    1   60     // tmp132 = 60: SMALLINT;
 31:            remainder  133  131  132     // tmp133 = tmp131 %% tmp132;
 32:             addition  134  130  133     // tmp134 = tmp130 + tmp133;
 33:           assignment  254    6  134     // m = tmp134 : TYPEOF(tmp134);
//         h.length == 1? h = "0"+h:1;
 34:           assignment  130    5  254     // tmp130 = 'length': STRING;
 35:          prop_getter  131  254  130     // tmp131 = h[tmp130];
 36:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 37:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
 38:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65059;
 39:           assignment  134    5  254     // tmp134 = '0': STRING;
 40:             addition  135  134  254     // tmp135 = tmp134 + h;
 41:           assignment  254    6  135     // h = tmp135 : TYPEOF(tmp135);
 42:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 43:             jmp_down  253  253          // goto 65064;
 38:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 44; // REWRITE
 44:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
 45:           assignment  136    6  137     // tmp136 = tmp137 : TYPEOF(tmp137);
 43:             jmp_down    0    3          // goto 46; // REWRITE
//         m.length == 1? m = "0"+m:1;
 46:           assignment  130    5  254     // tmp130 = 'length': STRING;
 47:          prop_getter  131  254  130     // tmp131 = m[tmp130];
 48:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 49:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
 50:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65071;
 51:           assignment  134    5  254     // tmp134 = '0': STRING;
 52:             addition  135  134  254     // tmp135 = tmp134 + m;
 53:           assignment  254    6  135     // m = tmp135 : TYPEOF(tmp135);
 54:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 55:             jmp_down  253  253          // goto 65076;
 50:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 56; // REWRITE
 56:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
 57:           assignment  136    6  137     // tmp136 = tmp137 : TYPEOF(tmp137);
 55:             jmp_down    0    3          // goto 58; // REWRITE
//         return self.getTimezoneOffset() < 0 ? "+"+h+m : "-"+h+m;
 58:           assignment  130    5  254     // tmp130 = 'getTimezoneOffset': STRING;
 59:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 60:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 61:               call_n  253  131  253     // 
 62:                 meta    1    1  132     // 
 61:               call_n  133  131    0     //  // REWRITE
 63:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 64:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 65:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65086;
 66:           assignment  136    5  254     // tmp136 = '+': STRING;
 67:             addition  137  136  254     // tmp137 = tmp136 + h;
 68:             addition  138  137  254     // tmp138 = tmp137 + m;
 69:           assignment  139    6  138     // tmp139 = tmp138 : TYPEOF(tmp138);
 70:             jmp_down  253  253          // goto 65091;
 65:    is_false_jmp_down  135    0    6     // if (tmp135 == false) goto 71; // REWRITE
 71:           assignment  140    5  254     // tmp140 = '-': STRING;
 72:             addition  141  140  254     // tmp141 = tmp140 + h;
 73:             addition  142  141  254     // tmp142 = tmp141 + m;
 74:           assignment  139    6  142     // tmp139 = tmp142 : TYPEOF(tmp142);
 70:             jmp_down    0    5          // goto 75; // REWRITE
 75:               retval  139               // return tmp139;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  145    3     // var tmp128 .. tmp145; // REWRITE
 76:                  ret                    // ret;
  1:                 meta    7    0   76     // function end: 77; // REWRITE
//     function r() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function r (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // RFC 822 formatted date
// 
//         var r; // result
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
// 
//         //  Thu    ,     21          Dec         2000
// 
//         r = D() + ", " + j() + " " + M() + " " + Y() +
  4:               call_n  253  254  253     // 
  4:               call_n  130  254    0     //  // REWRITE
  5:           assignment  131    5  254     // tmp131 = ', ': STRING;
  6:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
  7:               call_n  253  254  253     // 
  7:               call_n  133  254    0     //  // REWRITE
  8:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
  9:           assignment  135    5  254     // tmp135 = ' ': STRING;
 10:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 11:               call_n  253  254  253     // 
 11:               call_n  137  254    0     //  // REWRITE
 12:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
 13:           assignment  139    5  254     // tmp139 = ' ': STRING;
 14:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
 15:               call_n  253  254  253     // 
 15:               call_n  141  254    0     //  // REWRITE
 16:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
//         //        16     :    01     :    07          +0200
// 
//             " " + H() + ":" + i() + ":" + s() + " " + O();
 17:           assignment  143    5  254     // tmp143 = ' ': STRING;
 18:             addition  144  142  143     // tmp144 = tmp142 + tmp143;
 19:               call_n  253  254  253     // 
 19:               call_n  145  254    0     //  // REWRITE
 20:             addition  146  144  145     // tmp146 = tmp144 + tmp145;
 21:           assignment  147    5  254     // tmp147 = ':': STRING;
 22:             addition  148  146  147     // tmp148 = tmp146 + tmp147;
 23:               call_n  253  254  253     // 
 23:               call_n  149  254    0     //  // REWRITE
 24:             addition  150  148  149     // tmp150 = tmp148 + tmp149;
 25:           assignment  151    5  254     // tmp151 = ':': STRING;
 26:             addition  152  150  151     // tmp152 = tmp150 + tmp151;
 27:               call_n  253  254  253     // 
 27:               call_n  153  254    0     //  // REWRITE
 28:             addition  154  152  153     // tmp154 = tmp152 + tmp153;
 29:           assignment  155    5  254     // tmp155 = ' ': STRING;
 30:             addition  156  154  155     // tmp156 = tmp154 + tmp155;
 31:               call_n  253  254  253     // 
 31:               call_n  157  254    0     //  // REWRITE
 32:             addition  158  156  157     // tmp158 = tmp156 + tmp157;
 33:           assignment  254    6  158     // r = tmp158 : TYPEOF(tmp158);
//         return r;
 34:               retval  254               // return r;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  159    1     // var tmp128 .. tmp159; // REWRITE
 35:                  ret                    // ret;
  1:                 meta    7    0   35     // function end: 36; // REWRITE
//     function S() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function S (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // English ordinal suffix for the day of the month, 2 characters
// 
//         return daysSuffix[self.getDate()-1];
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getDate': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 10:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
 11:          prop_getter  136  254  135     // tmp136 = daysSuffix[tmp135];
 12:               retval  136               // return tmp136;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  136    0     // var tmp128 .. tmp136; // REWRITE
 13:                  ret                    // ret;
  1:                 meta    7    0   13     // function end: 14; // REWRITE
//     function s() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function s (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Seconds, with leading zeros
// 
//         return new String(self.getSeconds()).length == 1?
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:           assignment  130    5  254     // tmp130 = 'getSeconds': STRING;
  6:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  7:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  8:               call_n  253  131  253     // 
  9:                 meta    1    1  132     // 
  8:               call_n  133  131    0     //  // REWRITE
 10:                 meta    2  133  255     // 
  4:          construct_n  130  254    1     //  // REWRITE
 11:           assignment  131    5  254     // tmp131 = 'length': STRING;
 12:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 13:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 14:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 15:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65036;
//         "0"+self.getSeconds() : self.getSeconds();
 16:           assignment  135    5  254     // tmp135 = '0': STRING;
 17:           assignment  136    5  254     // tmp136 = 'getSeconds': STRING;
 18:          prop_getter  137  254  136     // tmp137 = self[tmp136];
 19:           assignment  138    6  254     // tmp138 = self : TYPEOF(self);
 20:               call_n  253  137  253     // 
 21:                 meta    1    1  138     // 
 20:               call_n  139  137    0     //  // REWRITE
 22:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
 23:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
 24:             jmp_down  253  253          // goto 65045;
 15:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 25; // REWRITE
 25:           assignment  142    5  254     // tmp142 = 'getSeconds': STRING;
 26:          prop_getter  143  254  142     // tmp143 = self[tmp142];
 27:           assignment  144    6  254     // tmp144 = self : TYPEOF(self);
 28:               call_n  253  143  253     // 
 29:                 meta    1    1  144     // 
 28:               call_n  145  143    0     //  // REWRITE
 30:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
 24:             jmp_down    0    7          // goto 31; // REWRITE
 31:               retval  141               // return tmp141;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  145    0     // var tmp128 .. tmp145; // REWRITE
 32:                  ret                    // ret;
  1:                 meta    7    0   32     // function end: 33; // REWRITE
//     function t() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function t (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // thanks to Matt Bannon for some much needed code-fixes here!
// 
//         var daysinmonths = [null,31,28,31,30,31,30,31,31,30,31,30,31];
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           array_decl  253  253  255     // 
  5:           assignment  130    0    2     // tmp130 = null: SIMPLE;
  6:                 meta    2  130  255     // 
  7:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
  8:                 meta    2  130  255     // 
  9:           assignment  130    1   28     // tmp130 = 28: SMALLINT;
 10:                 meta    2  130  255     // 
 11:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
 12:                 meta    2  130  255     // 
 13:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
 14:                 meta    2  130  255     // 
 15:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
 16:                 meta    2  130  255     // 
 17:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
 18:                 meta    2  130  255     // 
 19:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
 20:                 meta    2  130  255     // 
 21:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
 22:                 meta    2  130  255     // 
 23:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
 24:                 meta    2  130  255     // 
 25:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
 26:                 meta    2  130  255     // 
 27:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
 28:                 meta    2  130  255     // 
 29:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
 30:                 meta    2  130  255     // 
  4:           array_decl  130    0   13     //  // REWRITE
 31:           assignment  254    6  130     // daysinmonths = tmp130 : TYPEOF(tmp130);
//         if (L()==1 && n()==2) return 29; // leap day
 32:               call_n  253  254  253     // 
 32:               call_n  130  254    0     //  // REWRITE
 33:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 34:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
 35:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
 36:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65057;
 37:               call_n  253  254  253     // 
 37:               call_n  134  254    0     //  // REWRITE
 38:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
 39:          equal_value  136  134  135     // tmp136 = tmp134 == tmp135;
 40:           assignment  133    6  136     // tmp133 = tmp136 : TYPEOF(tmp136);
 36:    is_false_jmp_down  133    0    5     // if (tmp133 == false) goto 41; // REWRITE
 41:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65062;
 42:           assignment  130    1   29     // tmp130 = 29: SMALLINT;
 43:               retval  130               // return tmp130;
// 
//         return daysinmonths[n()];
 41:    is_false_jmp_down  133    0    3     // if (tmp133 == false) goto 44; // REWRITE
 44:               call_n  253  254  253     // 
 44:               call_n  130  254    0     //  // REWRITE
 45:          prop_getter  131  254  130     // tmp131 = daysinmonths[tmp130];
 46:               retval  131               // return tmp131;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  137    1     // var tmp128 .. tmp137; // REWRITE
 47:                  ret                    // ret;
  1:                 meta    7    0   47     // function end: 48; // REWRITE
//     function U() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function U (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
// 
//         return Math.round(self.getTime()/1000);
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'round': STRING;
  5:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
  6:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  9:           assignment  133    5  254     // tmp133 = 'getTime': STRING;
 10:          prop_getter  134  254  133     // tmp134 = self[tmp133];
 11:           assignment  135    6  254     // tmp135 = self : TYPEOF(self);
 12:               call_n  253  134  253     // 
 13:                 meta    1    1  135     // 
 12:               call_n  136  134    0     //  // REWRITE
 14:           assignment  137    3  254     // tmp137 = 1000: NUMBER;
 15:             division  138  136  137     // tmp138 = tmp136 / tmp137;
 16:                 meta    2  138  255     // 
  7:               call_n  133  131    1     //  // REWRITE
 17:               retval  133               // return tmp133;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  138    0     // var tmp128 .. tmp138; // REWRITE
 18:                  ret                    // ret;
  1:                 meta    7    0   18     // function end: 19; // REWRITE
//     function W() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function W (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Weeknumber, as per ISO specification:
// 
//         // http://www.cl.cam.ac.uk/~mgk25/iso-time.html
// 
//         
//         // if the day is three days before newyears eve,
// 
//         // there's a chance it's "week 1" of next year.
// 
//         // here we check for that.
// 
//         var beforeNY = 364+L() - z();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    3  254     // tmp130 = 364: NUMBER;
  5:               call_n  253  254  253     // 
  5:               call_n  131  254    0     //  // REWRITE
  6:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
  7:               call_n  253  254  253     // 
  7:               call_n  133  254    0     //  // REWRITE
  8:         substraction  134  132  133     // tmp134 = tmp132 - tmp133;
  9:           assignment  254    6  134     // beforeNY = tmp134 : TYPEOF(tmp134);
//         var afterNY  = z();
 10:               call_n  253  254  253     // 
 10:               call_n  130  254    0     //  // REWRITE
 11:           assignment  254    6  130     // afterNY = tmp130 : TYPEOF(tmp130);
//         var weekday = w()!=0?w()-1:6; // makes sunday (0), into 6.
 12:               call_n  253  254  253     // 
 12:               call_n  130  254    0     //  // REWRITE
 13:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 14:      not_equal_value  132  130  131     // tmp132 = tmp130 != tmp131;
 15:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65036;
 16:               call_n  253  254  253     // 
 16:               call_n  133  254    0     //  // REWRITE
 17:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
 18:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
 19:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
 20:             jmp_down  253  253          // goto 65041;
 15:    is_false_jmp_down  132    0    6     // if (tmp132 == false) goto 21; // REWRITE
 21:           assignment  137    1    6     // tmp137 = 6: SMALLINT;
 22:           assignment  136    6  137     // tmp136 = tmp137 : TYPEOF(tmp137);
 20:             jmp_down    0    3          // goto 23; // REWRITE
 23:           assignment  254    6  136     // weekday = tmp136 : TYPEOF(tmp136);
// 
//         if (beforeNY <= 2 && weekday <= 2-beforeNY) {
 24:           assignment  130    6  254     // tmp130 = beforeNY : TYPEOF(beforeNY);
 25:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 26:   less_or_equal_than  132  130  131     // tmp132 = tmp130 <= tmp131;
 27:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
 28:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65049;
 29:           assignment  134    6  254     // tmp134 = weekday : TYPEOF(weekday);
 30:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
 31:         substraction  136  135  254     // tmp136 = tmp135 - beforeNY;
 32:   less_or_equal_than  137  134  136     // tmp137 = tmp134 <= tmp136;
 33:           assignment  133    6  137     // tmp133 = tmp137 : TYPEOF(tmp137);
 28:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 34; // REWRITE
 34:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65055;
//             return 1;
 35:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 36:               retval  130               // return tmp130;
//         }
//         // similarly, if the day is within threedays of newyears
// 
//         // there's a chance it belongs in the old year.
// 
//         var ny = new Date("January 1 " + Y() + " 00:00:00");
 34:    is_false_jmp_down  133    0    3     // if (tmp133 == false) goto 37; // REWRITE
 37:          construct_n  253  254  253     // 
 38:           assignment  130    5  254     // tmp130 = 'January 1 ': STRING;
 39:               call_n  253  254  253     // 
 39:               call_n  131  254    0     //  // REWRITE
 40:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 41:           assignment  133    5  254     // tmp133 = ' 00:00:00': STRING;
 42:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
 43:                 meta    2  134  255     // 
 37:          construct_n  130  254    1     //  // REWRITE
 44:           assignment  254    6  130     // ny = tmp130 : TYPEOF(tmp130);
//         var nyDay = ny.getDay()!=0?ny.getDay()-1:6;
 45:           assignment  130    5  254     // tmp130 = 'getDay': STRING;
 46:          prop_getter  131  254  130     // tmp131 = ny[tmp130];
 47:           assignment  132    6  254     // tmp132 = ny : TYPEOF(ny);
 48:               call_n  253  131  253     // 
 49:                 meta    1    1  132     // 
 48:               call_n  133  131    0     //  // REWRITE
 50:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 51:      not_equal_value  135  133  134     // tmp135 = tmp133 != tmp134;
 52:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65073;
 53:           assignment  136    5  254     // tmp136 = 'getDay': STRING;
 54:          prop_getter  137  254  136     // tmp137 = ny[tmp136];
 55:           assignment  138    6  254     // tmp138 = ny : TYPEOF(ny);
 56:               call_n  253  137  253     // 
 57:                 meta    1    1  138     // 
 56:               call_n  139  137    0     //  // REWRITE
 58:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
 59:         substraction  141  139  140     // tmp141 = tmp139 - tmp140;
 60:           assignment  142    6  141     // tmp142 = tmp141 : TYPEOF(tmp141);
 61:             jmp_down  253  253          // goto 65082;
 52:    is_false_jmp_down  135    0   10     // if (tmp135 == false) goto 62; // REWRITE
 62:           assignment  143    1    6     // tmp143 = 6: SMALLINT;
 63:           assignment  142    6  143     // tmp142 = tmp143 : TYPEOF(tmp143);
 61:             jmp_down    0    3          // goto 64; // REWRITE
 64:           assignment  254    6  142     // nyDay = tmp142 : TYPEOF(tmp142);
//         if (
//             (afterNY <= 2) && 
 65:           assignment  130    6  254     // tmp130 = afterNY : TYPEOF(afterNY);
 66:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
 67:   less_or_equal_than  132  130  131     // tmp132 = tmp130 <= tmp131;
 68:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
 69:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65090;
//             (nyDay >=4)  && 
 70:           assignment  134    6  254     // tmp134 = nyDay : TYPEOF(nyDay);
 71:           assignment  135    1    4     // tmp135 = 4: SMALLINT;
 72: greater_or_equal_than  136  134  135     // tmp136 = tmp134 >= tmp135;
 73:           assignment  133    6  136     // tmp133 = tmp136 : TYPEOF(tmp136);
 74:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65095;
//             (afterNY >= (6-nyDay))
 75:           assignment  137    6  254     // tmp137 = afterNY : TYPEOF(afterNY);
 76:           assignment  138    1    6     // tmp138 = 6: SMALLINT;
 77:         substraction  139  138  254     // tmp139 = tmp138 - nyDay;
 78: greater_or_equal_than  140  137  139     // tmp140 = tmp137 >= tmp139;
//             ) {
 79:           assignment  133    6  140     // tmp133 = tmp140 : TYPEOF(tmp140);
 69:    is_false_jmp_down  133    0   11     // if (tmp133 == false) goto 80; // REWRITE
 74:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 80; // REWRITE
 80:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65101;
//             // Since I'm not sure we can just always return 53,
// 
//             // i call the function here again, using the last day
// 
//             // of the previous year, as the date, and then just
// 
//             // return that week.
// 
//             var prevNY = new Date("December 31 " + (Y()-1) + " 00:00:00");
 81:          construct_n  253  254  253     // 
 82:           assignment  130    5  254     // tmp130 = 'December 31 ': STRING;
 83:               call_n  253  254  253     // 
 83:               call_n  131  254    0     //  // REWRITE
 84:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
 85:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
 86:             addition  134  130  133     // tmp134 = tmp130 + tmp133;
 87:           assignment  135    5  254     // tmp135 = ' 00:00:00': STRING;
 88:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 89:                 meta    2  136  255     // 
 81:          construct_n  130  254    1     //  // REWRITE
 90:           assignment  254    6  130     // prevNY = tmp130 : TYPEOF(tmp130);
//             return prevNY.formatDate("W");
 91:           assignment  130    5  254     // tmp130 = 'formatDate': STRING;
 92:          prop_getter  131  254  130     // tmp131 = prevNY[tmp130];
 93:           assignment  132    6  254     // tmp132 = prevNY : TYPEOF(prevNY);
 94:               call_n  253  131  253     // 
 95:                 meta    1    1  132     // 
 96:           assignment  133    5  254     // tmp133 = 'W': STRING;
 97:                 meta    2  133  255     // 
 94:               call_n  133  131    1     //  // REWRITE
 98:               retval  133               // return tmp133;
//         }
//         
//         // week 1, is the week that has the first thursday in it.
// 
//         // note that this value is not zero index.
// 
//         if (nyDay <= 3) {
 80:    is_false_jmp_down  133    0   19     // if (tmp133 == false) goto 99; // REWRITE
 99:           assignment  130    6  254     // tmp130 = nyDay : TYPEOF(nyDay);
100:           assignment  131    1    3     // tmp131 = 3: SMALLINT;
101:   less_or_equal_than  132  130  131     // tmp132 = tmp130 <= tmp131;
102:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65123;
//             // first day of the year fell on a thursday, or earlier.
// 
//             return 1 + Math.floor( ( z() + nyDay ) / 7 );
103:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
104:           assignment  131    5  254     // tmp131 = 'floor': STRING;
105:          prop_getter  132  254  131     // tmp132 = Math[tmp131];
106:           assignment  133    6  254     // tmp133 = Math : TYPEOF(Math);
107:               call_n  253  132  253     // 
108:                 meta    1    1  133     // 
109:               call_n  253  254  253     // 
109:               call_n  134  254    0     //  // REWRITE
110:             addition  135  134  254     // tmp135 = tmp134 + nyDay;
111:           assignment  136    1    7     // tmp136 = 7: SMALLINT;
112:             division  137  135  136     // tmp137 = tmp135 / tmp136;
113:                 meta    2  137  255     // 
107:               call_n  134  132    1     //  // REWRITE
114:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
115:               retval  135               // return tmp135;
//         } else {
116:             jmp_down  253  253          // goto 65137;
102:    is_false_jmp_down  132    0   15     // if (tmp132 == false) goto 117; // REWRITE
//             // first day of the year fell on a friday, or later.
// 
//             return 1 + Math.floor( ( z() - ( 7 - nyDay ) ) / 7 );
117:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
118:           assignment  131    5  254     // tmp131 = 'floor': STRING;
119:          prop_getter  132  254  131     // tmp132 = Math[tmp131];
120:           assignment  133    6  254     // tmp133 = Math : TYPEOF(Math);
121:               call_n  253  132  253     // 
122:                 meta    1    1  133     // 
123:               call_n  253  254  253     // 
123:               call_n  134  254    0     //  // REWRITE
124:           assignment  135    1    7     // tmp135 = 7: SMALLINT;
125:         substraction  136  135  254     // tmp136 = tmp135 - nyDay;
126:         substraction  137  134  136     // tmp137 = tmp134 - tmp136;
127:           assignment  138    1    7     // tmp138 = 7: SMALLINT;
128:             division  139  137  138     // tmp139 = tmp137 / tmp138;
129:                 meta    2  139  255     // 
121:               call_n  134  132    1     //  // REWRITE
130:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
131:               retval  135               // return tmp135;
//         }
116:             jmp_down    0   16          // goto 132; // REWRITE
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  149    6     // var tmp128 .. tmp149; // REWRITE
132:                  ret                    // ret;
  1:                 meta    7    0  132     // function end: 133; // REWRITE
//     function w() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function w (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // Numeric representation of the day of the week
// 
//         return self.getDay();
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getDay': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
  7:               call_n  253  131  253     // 
  8:                 meta    1    1  132     // 
  7:               call_n  133  131    0     //  // REWRITE
  9:               retval  133               // return tmp133;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 10:                  ret                    // ret;
  1:                 meta    7    0   10     // function end: 11; // REWRITE
//     
//     function Y() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Y (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // A full numeric representation of a year, 4 digits
// 
//         // we first check, if getFullYear is supported. if it
// 
//         // is, we just use that. ppks code is nice, but wont
// 
//         // work with dates outside 1900-2038, or something like that
// 
//         if (self.getFullYear) {
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:           assignment  130    5  254     // tmp130 = 'getFullYear': STRING;
  5:          prop_getter  131  254  130     // tmp131 = self[tmp130];
  6:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65027;
//             var newDate = new Date("January 1 2001 00:00:00 +0000");
  7:          construct_n  253  254  253     // 
  8:           assignment  130    5  254     // tmp130 = 'January 1 2001 00:00:00 +0000': STRING;
  9:                 meta    2  130  255     // 
  7:          construct_n  130  254    1     //  // REWRITE
 10:           assignment  254    6  130     // newDate = tmp130 : TYPEOF(tmp130);
//             var x = newDate .getFullYear();
 11:           assignment  130    5  254     // tmp130 = 'getFullYear': STRING;
 12:          prop_getter  131  254  130     // tmp131 = newDate[tmp130];
 13:           assignment  132    6  254     // tmp132 = newDate : TYPEOF(newDate);
 14:               call_n  253  131  253     // 
 15:                 meta    1    1  132     // 
 14:               call_n  133  131    0     //  // REWRITE
 16:           assignment  254    6  133     // x = tmp133 : TYPEOF(tmp133);
//             if (x == 2001) {              
 17:           assignment  130    6  254     // tmp130 = x : TYPEOF(x);
 18:           assignment  131    3  254     // tmp131 = 2001: NUMBER;
 19:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
 20:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65041;
//                 // i trust the method now
// 
//                 return self.getFullYear();
 21:           assignment  130    5  254     // tmp130 = 'getFullYear': STRING;
 22:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 23:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 24:               call_n  253  131  253     // 
 25:                 meta    1    1  132     // 
 24:               call_n  133  131    0     //  // REWRITE
 26:               retval  133               // return tmp133;
//             }
//         }
 20:    is_false_jmp_down  132    0    7     // if (tmp132 == false) goto 27; // REWRITE
//         // else, do this:
// 
//         // codes thanks to ppk:
// 
//         // http://www.xs4all.nl/~ppk/js/introdate.html
// 
//         var x = self.getYear();
  6:    is_false_jmp_down  131    0   21     // if (tmp131 == false) goto 27; // REWRITE
 27:           assignment  130    5  254     // tmp130 = 'getYear': STRING;
 28:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 29:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 30:               call_n  253  131  253     // 
 31:                 meta    1    1  132     // 
 30:               call_n  133  131    0     //  // REWRITE
 32:           assignment  254    6  133     // x = tmp133 : TYPEOF(tmp133);
//         var y = x % 100;
 33:           assignment  130    6  254     // tmp130 = x : TYPEOF(x);
 34:           assignment  131    1  100     // tmp131 = 100: SMALLINT;
 35:            remainder  132  130  131     // tmp132 = tmp130 %% tmp131;
 36:           assignment  254    6  132     // y = tmp132 : TYPEOF(tmp132);
//         y += (y < 38) ? 2000 : 1900;
 37:           assignment  130    6  254     // tmp130 = y : TYPEOF(y);
 38:           assignment  131    1   38     // tmp131 = 38: SMALLINT;
 39:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
 40:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65061;
 41:           assignment  133    3  254     // tmp133 = 2000: NUMBER;
 42:           assignment  134    6  133     // tmp134 = tmp133 : TYPEOF(tmp133);
 43:             jmp_down  253  253          // goto 65064;
 40:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 44; // REWRITE
 44:           assignment  135    3  254     // tmp135 = 1900: NUMBER;
 45:           assignment  134    6  135     // tmp134 = tmp135 : TYPEOF(tmp135);
 43:             jmp_down    0    3          // goto 46; // REWRITE
 46:             addition  254  254  134     // y = y + tmp134;
 47:           assignment  136    6  254     // tmp136 = y : TYPEOF(y);
//         return y;
 48:               retval  254               // return y;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  139    3     // var tmp128 .. tmp139; // REWRITE
 49:                  ret                    // ret;
  1:                 meta    7    0   49     // function end: 50; // REWRITE
//     function y() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function y (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // A two-digit representation of a year
// 
//         var y = Y()+"";
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:               call_n  253  254  253     // 
  4:               call_n  130  254    0     //  // REWRITE
  5:           assignment  131    5  254     // tmp131 = '': STRING;
  6:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
  7:           assignment  254    6  132     // y = tmp132 : TYPEOF(tmp132);
//         return y.substring(y.length-2,y.length);
  8:           assignment  130    5  254     // tmp130 = 'substring': STRING;
  9:          prop_getter  131  254  130     // tmp131 = y[tmp130];
 10:           assignment  132    6  254     // tmp132 = y : TYPEOF(y);
 11:               call_n  253  131  253     // 
 12:                 meta    1    1  132     // 
 13:           assignment  133    5  254     // tmp133 = 'length': STRING;
 14:          prop_getter  134  254  133     // tmp134 = y[tmp133];
 15:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
 16:         substraction  136  134  135     // tmp136 = tmp134 - tmp135;
 17:                 meta    2  136  255     // 
 18:           assignment  133    5  254     // tmp133 = 'length': STRING;
 19:          prop_getter  134  254  133     // tmp134 = y[tmp133];
 20:                 meta    2  134  255     // 
 11:               call_n  133  131    2     //  // REWRITE
 21:               retval  133               // return tmp133;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  137    1     // var tmp128 .. tmp137; // REWRITE
 22:                  ret                    // ret;
  1:                 meta    7    0   22     // function end: 23; // REWRITE
//     function z() {
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function z (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         // The day of the year, zero indexed! 0 through 366
// 
//         var t = new Date("January 1 " + Y() + " 00:00:00");
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:           assignment  130    5  254     // tmp130 = 'January 1 ': STRING;
  6:               call_n  253  254  253     // 
  6:               call_n  131  254    0     //  // REWRITE
  7:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
  8:           assignment  133    5  254     // tmp133 = ' 00:00:00': STRING;
  9:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
 10:                 meta    2  134  255     // 
  4:          construct_n  130  254    1     //  // REWRITE
 11:           assignment  254    6  130     // t = tmp130 : TYPEOF(tmp130);
//         var diff = self.getTime() - t.getTime();
 12:           assignment  130    5  254     // tmp130 = 'getTime': STRING;
 13:          prop_getter  131  254  130     // tmp131 = self[tmp130];
 14:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
 15:               call_n  253  131  253     // 
 16:                 meta    1    1  132     // 
 15:               call_n  133  131    0     //  // REWRITE
 17:           assignment  134    5  254     // tmp134 = 'getTime': STRING;
 18:          prop_getter  135  254  134     // tmp135 = t[tmp134];
 19:           assignment  136    6  254     // tmp136 = t : TYPEOF(t);
 20:               call_n  253  135  253     // 
 21:                 meta    1    1  136     // 
 20:               call_n  137  135    0     //  // REWRITE
 22:         substraction  138  133  137     // tmp138 = tmp133 - tmp137;
 23:           assignment  254    6  138     // diff = tmp138 : TYPEOF(tmp138);
//         return Math.floor(diff/1000/60/60/24);
 24:           assignment  130    5  254     // tmp130 = 'floor': STRING;
 25:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 26:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 27:               call_n  253  131  253     // 
 28:                 meta    1    1  132     // 
 29:           assignment  133    6  254     // tmp133 = diff : TYPEOF(diff);
 30:           assignment  134    3  254     // tmp134 = 1000: NUMBER;
 31:             division  135  133  134     // tmp135 = tmp133 / tmp134;
 32:           assignment  136    1   60     // tmp136 = 60: SMALLINT;
 33:             division  137  135  136     // tmp137 = tmp135 / tmp136;
 34:           assignment  138    1   60     // tmp138 = 60: SMALLINT;
 35:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 36:           assignment  140    1   24     // tmp140 = 24: SMALLINT;
 37:             division  141  139  140     // tmp141 = tmp139 / tmp140;
 38:                 meta    2  141  255     // 
 27:               call_n  133  131    1     //  // REWRITE
 39:               retval  133               // return tmp133;
//     }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  143    2     // var tmp128 .. tmp143; // REWRITE
 40:                  ret                    // ret;
  1:                 meta    7    0   40     // function end: 41; // REWRITE
//         
//     var self = this;
212:         this_binding  130               // tmp130 = this;
213:           assignment  254    6  130     // self = tmp130 : TYPEOF(tmp130);
//     if (time) {
214:    is_false_jmp_down  254  253  253     // if (time == false) goto 65235;
//         // save time
// 
//         var prevTime = self.getTime();
215:           assignment  130    5  254     // tmp130 = 'getTime': STRING;
216:          prop_getter  131  254  130     // tmp131 = self[tmp130];
217:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
218:               call_n  253  131  253     // 
219:                 meta    1    1  132     // 
218:               call_n  133  131    0     //  // REWRITE
220:           assignment  254    6  133     // prevTime = tmp133 : TYPEOF(tmp133);
//         self.setTime(time);
221:           assignment  130    5  254     // tmp130 = 'setTime': STRING;
222:          prop_getter  131  254  130     // tmp131 = self[tmp130];
223:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
224:               call_n  253  131  253     // 
225:                 meta    1    1  132     // 
226:                 meta    2  254  255     // 
224:               call_n  133  131    1     //  // REWRITE
//     }
//     
//     var ia = input.split("");
214:    is_false_jmp_down  254    0   13     // if (time == false) goto 227; // REWRITE
227:           assignment  130    5  254     // tmp130 = 'split': STRING;
228:          prop_getter  131  254  130     // tmp131 = input[tmp130];
229:           assignment  132    6  254     // tmp132 = input : TYPEOF(input);
230:               call_n  253  131  253     // 
231:                 meta    1    1  132     // 
232:           assignment  133    5  254     // tmp133 = '': STRING;
233:                 meta    2  133  255     // 
230:               call_n  133  131    1     //  // REWRITE
234:           assignment  254    6  133     // ia = tmp133 : TYPEOF(tmp133);
//     var ij = 0;
235:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
236:           assignment  254    6  130     // ij = tmp130 : TYPEOF(tmp130);
//     while (ia[ij]) {
237:             jmp_down  253  253          // goto 65258;
//         if (ia[ij] == "\\") {
238:          prop_getter  130  254  254     // tmp130 = ia[ij];
239:           assignment  131    5  254     // tmp131 = '\': STRING;
240:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
241:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65262;
//             // this is our way of allowing users to escape stuff
// 
//             ia.splice(ij,1);
242:           assignment  130    5  254     // tmp130 = 'splice': STRING;
243:          prop_getter  131  254  130     // tmp131 = ia[tmp130];
244:           assignment  132    6  254     // tmp132 = ia : TYPEOF(ia);
245:               call_n  253  131  253     // 
246:                 meta    1    1  132     // 
247:                 meta    2  254  255     // 
248:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
249:                 meta    2  133  255     // 
245:               call_n  133  131    2     //  // REWRITE
//         } else {
250:             jmp_down  253  253          // goto 65271;
241:    is_false_jmp_down  132    0   10     // if (tmp132 == false) goto 251; // REWRITE
//             if (arrayExists(switches,ia[ij])) {
251:               call_n  253  254  253     // 
252:                 meta    2  254  255     // 
253:          prop_getter  130  254  254     // tmp130 = ia[ij];
254:                 meta    2  130  255     // 
251:               call_n  130  254    2     //  // REWRITE
255:    is_false_jmp_down  130  253  253     // if (tmp130 == false) goto 65276;
//                 ia[ij] = eval(ia[ij] + "()");
256:          prop_getter  130  254  254     // tmp130 = ia[ij];
256:               call_n  253  254  253     // 
257:                 meta    1    2  255     // 
258:          prop_getter  131  254  254     // tmp131 = ia[ij];
259:           assignment  132    5  254     // tmp132 = '()': STRING;
260:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
261:                 meta    2  133  255     // 
256:               call_n  131  254    1     //  // REWRITE
262:          prop_setter  254  254  131     // ia[ij] = tmp131;
//             }
//         }
255:    is_false_jmp_down  130    0    8     // if (tmp130 == false) goto 263; // REWRITE
250:             jmp_down    0   13          // goto 263; // REWRITE
//         ij++;
263:            post_incr  130  254          // tmp130 = ij++;
//     }
237:             jmp_down    0   27          // goto 264; // REWRITE
264:          prop_getter  131  254  254     // tmp131 = ia[ij];
265:       is_true_jmp_up  131    0   27     // if (tmp131) goto 238;
//     // reset time, back to what it was
// 
//     if (prevTime) {
266:    is_false_jmp_down  254  253  253     // if (prevTime == false) goto 65287;
//         self.setTime(prevTime);
267:           assignment  130    5  254     // tmp130 = 'setTime': STRING;
268:          prop_getter  131  254  130     // tmp131 = self[tmp130];
269:           assignment  132    6  254     // tmp132 = self : TYPEOF(self);
270:               call_n  253  131  253     // 
271:                 meta    1    1  132     // 
272:                 meta    2  254  255     // 
270:               call_n  133  131    1     //  // REWRITE
//     }
//     return ia.join("");
266:    is_false_jmp_down  254    0    7     // if (prevTime == false) goto 273; // REWRITE
273:           assignment  130    5  254     // tmp130 = 'join': STRING;
274:          prop_getter  131  254  130     // tmp131 = ia[tmp130];
275:           assignment  132    6  254     // tmp132 = ia : TYPEOF(ia);
276:               call_n  253  131  253     // 
277:                 meta    1    1  132     // 
278:           assignment  133    5  254     // tmp133 = '': STRING;
279:                 meta    2  133  255     // 
276:               call_n  133  131    1     //  // REWRITE
280:               retval  133               // return tmp133;
// }
  4:                 meta   12    2  255     // [no 'arguments']  // REWRITE
  5:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
281:                  ret                    // ret;
  3:                 meta    7    4  242     // function end: 1269; // REWRITE
// var date = new Date("1/1/2007 1:11:11");
1274:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1275:          construct_n  253  254  253     // 
1276:           assignment  130    5  254     // tmp130 = '1/1/2007 1:11:11': STRING;
1277:                 meta    2  130  255     // 
1275:          construct_n  130  254    1     //  // REWRITE
1278:           assignment  254    6  130     // date = tmp130 : TYPEOF(tmp130);
// for (i = 0; i < 500; ++i) {
1279:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1280:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
1281:             jmp_down  253  253          // goto 66302;
//     var shortFormat = date.formatDate("Y-m-d");
1282:           assignment  130    5  254     // tmp130 = 'formatDate': STRING;
1283:          prop_getter  131  254  130     // tmp131 = date[tmp130];
1284:           assignment  132    6  254     // tmp132 = date : TYPEOF(date);
1285:               call_n  253  131  253     // 
1286:                 meta    1    1  132     // 
1287:           assignment  133    5  254     // tmp133 = 'Y-m-d': STRING;
1288:                 meta    2  133  255     // 
1285:               call_n  133  131    1     //  // REWRITE
1289:           assignment  254    6  133     // shortFormat = tmp133 : TYPEOF(tmp133);
//     var longFormat = date.formatDate("l, F d, Y g:i:s A");
1290:           assignment  130    5  254     // tmp130 = 'formatDate': STRING;
1291:          prop_getter  131  254  130     // tmp131 = date[tmp130];
1292:           assignment  132    6  254     // tmp132 = date : TYPEOF(date);
1293:               call_n  253  131  253     // 
1294:                 meta    1    1  132     // 
1295:           assignment  133    5  254     // tmp133 = 'l, F d, Y g:i:s A': STRING;
1296:                 meta    2  133  255     // 
1293:               call_n  133  131    1     //  // REWRITE
1297:           assignment  254    6  133     // longFormat = tmp133 : TYPEOF(tmp133);
//     date.setTime(date.getTime() + 84266956);
1298:           assignment  130    5  254     // tmp130 = 'setTime': STRING;
1299:          prop_getter  131  254  130     // tmp131 = date[tmp130];
1300:           assignment  132    6  254     // tmp132 = date : TYPEOF(date);
1301:               call_n  253  131  253     // 
1302:                 meta    1    1  132     // 
1303:           assignment  133    5  254     // tmp133 = 'getTime': STRING;
1304:          prop_getter  134  254  133     // tmp134 = date[tmp133];
1305:           assignment  135    6  254     // tmp135 = date : TYPEOF(date);
1306:               call_n  253  134  253     // 
1307:                 meta    1    1  135     // 
1306:               call_n  136  134    0     //  // REWRITE
1308:           assignment  137    3  254     // tmp137 = 84266956: NUMBER;
1309:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
1310:                 meta    2  138  255     // 
1301:               call_n  133  131    1     //  // REWRITE
// }
1311:             pre_incr  134  254          // tmp134 = ++i;
1281:             jmp_down    0   31          // goto 1312; // REWRITE
1312:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
1313:           assignment  136    3  254     // tmp136 = 500: NUMBER;
1314:            less_than  137  135  136     // tmp137 = tmp135 < tmp136;
1315:       is_true_jmp_up  137    0   33     // if (tmp137) goto 1282;
// // FIXME: Find a way to validate this test.
// 
// // https://bugs.webkit.org/show_bug.cgi?id=114849
// 
// 
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  138    0     // var tmp128 .. tmp138; // REWRITE
1316:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 20] arrayExists : STRING
0x8a54d8 [ 12] array : STRING
0x8a54e4 [  8] x : STRING
0x8a54ec [  4] i : MAGIC STRING [id=207] 
0x8a54f0 [  4] length : MAGIC STRING [id=15] 
0x8a54f4 [  4] Date : MAGIC STRING [id=34] 
0x8a54f8 [  4] prototype : MAGIC STRING [id=2] 
0x8a54fc [ 16] formatDate : STRING
0x8a5510 [  4] input : MAGIC STRING [id=21] 
0x8a5514 [ 12] time : STRING
0x8a5520 [ 16] switches : STRING
0x8a5530 [  8] a : STRING
0x8a5538 [  8] A : STRING
0x8a5544 [  8] B : STRING
0x8a554c [  8] d : STRING
0x8a5554 [  8] D : STRING
0x8a555c [  8] F : STRING
0x8a5564 [  4] g : MAGIC STRING [id=206] 
0x8a5568 [  8] G : STRING
0x8a5570 [  8] h : STRING
0x8a5578 [  8] H : STRING
0x8a5584 [  8] j : STRING
0x8a558c [  8] l : STRING
0x8a5594 [  8] L : STRING
0x8a559c [  4] m : MAGIC STRING [id=208] 
0x8a55a0 [  8] M : STRING
0x8a55a8 [  8] n : STRING
0x8a55b0 [  8] O : STRING
0x8a55b8 [  8] r : STRING
0x8a55c4 [  8] s : STRING
0x8a55cc [  8] S : STRING
0x8a55d4 [  8] t : STRING
0x8a55dc [  8] U : STRING
0x8a55e4 [  8] w : STRING
0x8a55ec [  8] W : STRING
0x8a55f4 [  8] y : STRING
0x8a55fc [  8] Y : STRING
0x8a5608 [  8] z : STRING
0x8a5610 [ 16] daysLong : STRING
0x8a5620 [ 12] Sunday : STRING
0x8a562c [ 12] Monday : STRING
0x8a5638 [ 16] Tuesday : STRING
0x8a564c [ 16] Wednesday : STRING
0x8a565c [ 16] Thursday : STRING
0x8a566c [ 12] Friday : STRING
0x8a5678 [ 16] Saturday : STRING
0x8a568c [ 16] daysShort : STRING
0x8a569c [ 12] Sun : STRING
0x8a56a8 [ 12] Mon : STRING
0x8a56b4 [ 12] Tue : STRING
0x8a56c4 [ 12] Wed : STRING
0x8a56d0 [ 12] Thu : STRING
0x8a56dc [ 12] Fri : STRING
0x8a56e8 [ 12] Sat : STRING
0x8a56f4 [ 20] monthsShort : STRING
0x8a570c [ 12] Jan : STRING
0x8a5718 [ 12] Feb : STRING
0x8a5724 [ 12] Mar : STRING
0x8a5730 [ 12] Apr : STRING
0x8a573c [ 12] May : STRING
0x8a574c [ 12] Jun : STRING
0x8a5758 [ 12] Jul : STRING
0x8a5764 [ 12] Aug : STRING
0x8a5770 [ 12] Sep : STRING
0x8a577c [ 12] Oct : STRING
0x8a578c [ 12] Nov : STRING
0x8a5798 [ 12] Dec : STRING
0x8a57a4 [ 16] monthsLong : STRING
0x8a57b4 [ 16] January : STRING
0x8a57c8 [ 16] February : STRING
0x8a57d8 [ 12] March : STRING
0x8a57e4 [ 12] April : STRING
0x8a57f0 [ 12] June : STRING
0x8a57fc [ 12] July : STRING
0x8a580c [ 12] August : STRING
0x8a5818 [ 16] September : STRING
0x8a5828 [ 16] October : STRING
0x8a5838 [ 16] November : STRING
0x8a584c [ 16] December : STRING
0x8a585c [ 16] daysSuffix : STRING
0x8a586c [  8] st : STRING
0x8a5874 [  8] nd : STRING
0x8a587c [  8] rd : STRING
0x8a5888 [  8] th : STRING
0x8a5890 [ 12] self : STRING
0x8a589c [  4] getHours : MAGIC STRING [id=162] 
0x8a58a0 [  8] pm : STRING
0x8a58a8 [  8] am : STRING
0x8a58b0 [  8] PM : STRING
0x8a58b8 [  8] AM : STRING
0x8a58c4 [ 12] off : STRING
0x8a58d0 [  4] getTimezoneOffset : MAGIC STRING [id=170] 
0x8a58d4 [ 16] theSeconds : STRING
0x8a58e4 [ 12] 3600 : NUMBER
0x8a58f0 [  4] getMinutes : MAGIC STRING [id=164] 
0x8a58f4 [  4] getSeconds : MAGIC STRING [id=166] 
0x8a58f8 [ 12] beat : STRING
0x8a5908 [  4] Math : MAGIC STRING [id=44] 
0x8a590c [  4] floor : MAGIC STRING [id=92] 
0x8a5910 [ 12] 86.4 : NUMBER
0x8a591c [ 12] 1000 : NUMBER
0x8a5928 [  4]  : MAGIC STRING [id=225] 
0x8a592c [  8] 00 : STRING
0x8a5934 [  8] 0 : STRING
0x8a593c [  4] String : MAGIC STRING [id=31] 
0x8a5944 [  4] getDate : MAGIC STRING [id=158] 
0x8a5948 [  4] getDay : MAGIC STRING [id=160] 
0x8a594c [  4] getMonth : MAGIC STRING [id=156] 
0x8a5950 [  8] y_ : STRING
0x8a5958 [ 12] 400 : NUMBER
0x8a5964 [  8] os : STRING
0x8a596c [  4] abs : MAGIC STRING [id=84] 
0x8a5970 [  8] + : STRING
0x8a5978 [  4] - : MAGIC STRING [id=218] 
0x8a597c [  8] ,  : STRING
0x8a5988 [  4]   : MAGIC STRING [id=224] 
0x8a598c [  4] : : MAGIC STRING [id=219] 
0x8a5990 [ 20] daysinmonths : STRING
0x8a59a4 [  4] round : MAGIC STRING [id=98] 
0x8a59a8 [  4] getTime : MAGIC STRING [id=151] 
0x8a59ac [ 16] beforeNY : STRING
0x8a59bc [ 12] 364 : NUMBER
0x8a59cc [ 16] afterNY : STRING
0x8a59dc [ 16] weekday : STRING
0x8a59ec [  8] ny : STRING
0x8a59f4 [ 16] January 1  : STRING
0x8a5a08 [ 16]  00:00:00 : STRING
0x8a5a18 [ 12] nyDay : STRING
0x8a5a24 [ 12] prevNY : STRING
0x8a5a30 [ 20] December 31  : STRING
0x8a5a48 [  4] getFullYear : MAGIC STRING [id=152] 
0x8a5a4c [ 16] newDate : STRING
0x8a5a5c [ 36] January 1 2001 00:00:00 +0000 : STRING
0x8a5a84 [ 12] 2001 : NUMBER
0x8a5a90 [  4] getYear : MAGIC STRING [id=155] 
0x8a5a94 [ 12] 2000 : NUMBER
0x8a5aa0 [ 12] 1900 : NUMBER
0x8a5aac [  4] substring : MAGIC STRING [id=137] 
0x8a5ab0 [ 12] diff : STRING
0x8a5abc [ 16] prevTime : STRING
0x8a5ad0 [  4] setTime : MAGIC STRING [id=171] 
0x8a5ad4 [  8] ia : STRING
0x8a5adc [  4] split : MAGIC STRING [id=135] 
0x8a5ae0 [  8] ij : STRING
0x8a5ae8 [  4] \ : MAGIC STRING [id=212] 
0x8a5aec [  4] splice : MAGIC STRING [id=118] 
0x8a5af0 [  4] eval : MAGIC STRING [id=1] 
0x8a5af4 [  8] () : STRING
0x8a5afc [  4] join : MAGIC STRING [id=112] 
0x8a5b04 [ 12] date : STRING
0x8a5b10 [ 24] 1/1/2007 1:11:11 : STRING
0x8a5b28 [ 12] 500 : NUMBER
0x8a5b34 [ 20] shortFormat : STRING
0x8a5b4c [ 12] Y-m-d : STRING
0x8a5b58 [ 16] longFormat : STRING
0x8a5b68 [ 24] l, F d, Y g:i:s A : STRING
0x8a5b84 [ 12] 84266956 : NUMBER
0x8a5b90 [ 48]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  138    0     // var tmp128 .. tmp138;
  2:             var_decl    0               // var date;
  3:             var_decl    1               // var shortFormat;
  4:             var_decl    2               // var longFormat;
  5:          func_decl_n    3    2          // 
  6:                 meta    2    4  255     // 
  7:                 meta    2    5  255     // function arrayExists (array, x);
  8:                 meta    7    0   20     // function end: 28;
  9:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 10:         reg_var_decl  128  136    1     // var tmp128 .. tmp136;
 11:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 12:           assignment  136    6  130     // tmp136 = tmp130 : TYPEOF(tmp130);
 13:             jmp_down    0    7          // goto 20;
 14:          prop_getter  130    4  136     // tmp130 = array[tmp136];
 15:          equal_value  131  130    5     // tmp131 = tmp130 == x;
 16:    is_false_jmp_down  131    0    3     // if (tmp131 == false) goto 19;
 17:           assignment  130    0    4     // tmp130 = true: SIMPLE;
 18:               retval  130               // return tmp130;
 19:            post_incr  131  136          // tmp131 = tmp136++;
 20:           assignment  132    6  136     // tmp132 = tmp136 : TYPEOF(tmp136);
 21:           assignment  133    5    6     // tmp133 = 'length': STRING;
 22:          prop_getter  134    4  133     // tmp134 = array[tmp133];
 23:            less_than  135  132  134     // tmp135 = tmp132 < tmp134;
 24:       is_true_jmp_up  135    0   10     // if (tmp135) goto 14;
 25:           assignment  130    0    3     // tmp130 = false: SIMPLE;
 26:               retval  130               // return tmp130;
 27:                  ret                    // ret;
 28:           assignment  130    5    7     // tmp130 = 'prototype': STRING;
 29:          prop_getter  131    8  130     // tmp131 = Date[tmp130];
 30:           assignment  132    5    9     // tmp132 = 'formatDate': STRING;
 31:          func_expr_n  134  255    2     // 
 32:                 meta    2   10  255     // 
 33:                 meta    2   11  255     // tmp134 = function (input, time);
 34:                 meta    7    4  242     // function end: 1300;
 35:                 meta   12    2  255     // [no 'arguments'] 
 36:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
 37:             var_decl   12               // var switches;
 38:             var_decl   13               // var daysLong;
 39:             var_decl   14               // var daysShort;
 40:             var_decl   15               // var monthsShort;
 41:             var_decl   16               // var monthsLong;
 42:             var_decl   17               // var daysSuffix;
 43:             var_decl   18               // var self;
 44:             var_decl   19               // var prevTime;
 45:             var_decl   20               // var ia;
 46:             var_decl   21               // var ij;
 47:          func_decl_n   22    0          // function a ();
 48:                 meta    7    0   18     // function end: 66;
 49:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 50:         reg_var_decl  128  138    0     // var tmp128 .. tmp138;
 51:           assignment  130    5   23     // tmp130 = 'getHours': STRING;
 52:          prop_getter  131   18  130     // tmp131 = self[tmp130];
 53:           assignment  132    6   18     // tmp132 = self : TYPEOF(self);
 54:               call_n  133  131    0     // 
 55:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
 56:           assignment  134    1   11     // tmp134 = 11: SMALLINT;
 57:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 58:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 62;
 59:           assignment  136    5   24     // tmp136 = 'pm': STRING;
 60:           assignment  137    6  136     // tmp137 = tmp136 : TYPEOF(tmp136);
 61:             jmp_down    0    3          // goto 64;
 62:           assignment  138    5   25     // tmp138 = 'am': STRING;
 63:           assignment  137    6  138     // tmp137 = tmp138 : TYPEOF(tmp138);
 64:               retval  137               // return tmp137;
 65:                  ret                    // ret;
 66:          func_decl_n    0    0          // function A ();
 67:                 meta    7    0   18     // function end: 85;
 68:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 69:         reg_var_decl  128  138    0     // var tmp128 .. tmp138;
 70:           assignment  130    5    1     // tmp130 = 'getHours': STRING;
 71:          prop_getter  131    2  130     // tmp131 = self[tmp130];
 72:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
 73:               call_n  133  131    0     // 
 74:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
 75:           assignment  134    1   11     // tmp134 = 11: SMALLINT;
 76:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 77:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 81;
 78:           assignment  136    5    3     // tmp136 = 'PM': STRING;
 79:           assignment  137    6  136     // tmp137 = tmp136 : TYPEOF(tmp136);
 80:             jmp_down    0    3          // goto 83;
 81:           assignment  138    5    4     // tmp138 = 'AM': STRING;
 82:           assignment  137    6  138     // tmp137 = tmp138 : TYPEOF(tmp138);
 83:               retval  137               // return tmp137;
 84:                  ret                    // ret;
 85:          func_decl_n    5    0          // function B ();
 86:                 meta    7    0   82     // function end: 168;
 87:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 88:         reg_var_decl  128  151    3     // var tmp128 .. tmp151;
 89:           assignment  130    5    6     // tmp130 = 'getTimezoneOffset': STRING;
 90:          prop_getter  131    2  130     // tmp131 = self[tmp130];
 91:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
 92:               call_n  133  131    0     // 
 93:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
 94:           assignment  134    1   60     // tmp134 = 60: SMALLINT;
 95:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
 96:           assignment  136    1   60     // tmp136 = 60: SMALLINT;
 97:       multiplication  137  135  136     // tmp137 = tmp135 * tmp136;
 98:           assignment  149    6  137     // tmp149 = tmp137 : TYPEOF(tmp137);
 99:           assignment  130    5    1     // tmp130 = 'getHours': STRING;
100:          prop_getter  131    2  130     // tmp131 = self[tmp130];
101:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
102:               call_n  133  131    0     // 
103:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
104:           assignment  134    3    7     // tmp134 = 3600: NUMBER;
105:       multiplication  135  133  134     // tmp135 = tmp133 * tmp134;
106:           assignment  136    5    8     // tmp136 = 'getMinutes': STRING;
107:          prop_getter  137    2  136     // tmp137 = self[tmp136];
108:           assignment  138    6    2     // tmp138 = self : TYPEOF(self);
109:               call_n  139  137    0     // 
110:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
111:           assignment  140    1   60     // tmp140 = 60: SMALLINT;
112:       multiplication  141  139  140     // tmp141 = tmp139 * tmp140;
113:             addition  142  135  141     // tmp142 = tmp135 + tmp141;
114:           assignment  143    5    9     // tmp143 = 'getSeconds': STRING;
115:          prop_getter  144    2  143     // tmp144 = self[tmp143];
116:           assignment  145    6    2     // tmp145 = self : TYPEOF(self);
117:               call_n  146  144    0     // 
118:                 meta    1    1  145     // tmp146 = tmp144 (this_arg = tmp145);
119:             addition  147  142  146     // tmp147 = tmp142 + tmp146;
120:             addition  148  147  149     // tmp148 = tmp147 + tmp149;
121:           assignment  150    6  148     // tmp150 = tmp148 : TYPEOF(tmp148);
122:           assignment  130    5   10     // tmp130 = 'floor': STRING;
123:          prop_getter  131   11  130     // tmp131 = Math[tmp130];
124:           assignment  132    6   11     // tmp132 = Math : TYPEOF(Math);
125:               call_n  133  131    1     // 
126:                 meta    1    1  132     // 
127:           assignment  133    6  150     // tmp133 = tmp150 : TYPEOF(tmp150);
128:           assignment  134    3    0     // tmp134 = 86.4: NUMBER;
129:             division  135  133  134     // tmp135 = tmp133 / tmp134;
130:                 meta    2  135  255     // tmp133 = tmp131 (this_arg = tmp132, tmp135);
131:           assignment  151    6  133     // tmp151 = tmp133 : TYPEOF(tmp133);
132:           assignment  130    6  151     // tmp130 = tmp151 : TYPEOF(tmp151);
133:           assignment  131    3    1     // tmp131 = 1000: NUMBER;
134:         greater_than  132  130  131     // tmp132 = tmp130 > tmp131;
135:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 139;
136:           assignment  130    3    1     // tmp130 = 1000: NUMBER;
137:         substraction  151  151  130     // tmp151 = tmp151 - tmp130;
138:           assignment  131    6  151     // tmp131 = tmp151 : TYPEOF(tmp151);
139:           assignment  130    6  151     // tmp130 = tmp151 : TYPEOF(tmp151);
140:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
141:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
142:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 146;
143:           assignment  130    3    1     // tmp130 = 1000: NUMBER;
144:             addition  151  151  130     // tmp151 = tmp151 + tmp130;
145:           assignment  131    6  151     // tmp131 = tmp151 : TYPEOF(tmp151);
146:           assignment  130    5    2     // tmp130 = '': STRING;
147:             addition  131  130  151     // tmp131 = tmp130 + tmp151;
148:           assignment  132    5    3     // tmp132 = 'length': STRING;
149:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
150:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
151:          equal_value  135  133  134     // tmp135 = tmp133 == tmp134;
152:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 156;
153:           assignment  130    5    4     // tmp130 = '00': STRING;
154:             addition  131  130  151     // tmp131 = tmp130 + tmp151;
155:           assignment  151    6  131     // tmp151 = tmp131 : TYPEOF(tmp131);
156:           assignment  130    5    2     // tmp130 = '': STRING;
157:             addition  131  130  151     // tmp131 = tmp130 + tmp151;
158:           assignment  132    5    3     // tmp132 = 'length': STRING;
159:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
160:           assignment  134    1    2     // tmp134 = 2: SMALLINT;
161:          equal_value  135  133  134     // tmp135 = tmp133 == tmp134;
162:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 166;
163:           assignment  130    5    5     // tmp130 = '0': STRING;
164:             addition  131  130  151     // tmp131 = tmp130 + tmp151;
165:           assignment  151    6  131     // tmp151 = tmp131 : TYPEOF(tmp131);
166:               retval  151               // return tmp151;
167:                  ret                    // ret;
168:          func_decl_n    6    0          // function d ();
169:                 meta    7    0   32     // function end: 201;
170:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
171:         reg_var_decl  128  145    0     // var tmp128 .. tmp145;
172:          construct_n  130    7    1     // 
173:           assignment  130    5    8     // tmp130 = 'getDate': STRING;
174:          prop_getter  131    9  130     // tmp131 = self[tmp130];
175:           assignment  132    6    9     // tmp132 = self : TYPEOF(self);
176:               call_n  133  131    0     // 
177:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
178:                 meta    2  133  255     // 
179:           assignment  131    5    3     // tmp131 = 'length': STRING;
180:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
181:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
182:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
183:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 193;
184:           assignment  135    5    5     // tmp135 = '0': STRING;
185:           assignment  136    5    8     // tmp136 = 'getDate': STRING;
186:          prop_getter  137    9  136     // tmp137 = self[tmp136];
187:           assignment  138    6    9     // tmp138 = self : TYPEOF(self);
188:               call_n  139  137    0     // 
189:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
190:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
191:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
192:             jmp_down    0    7          // goto 199;
193:           assignment  142    5    0     // tmp142 = 'getDate': STRING;
194:          prop_getter  143    1  142     // tmp143 = self[tmp142];
195:           assignment  144    6    1     // tmp144 = self : TYPEOF(self);
196:               call_n  145  143    0     // 
197:                 meta    1    1  144     // tmp145 = tmp143 (this_arg = tmp144);
198:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
199:               retval  141               // return tmp141;
200:                  ret                    // ret;
201:          func_decl_n    2    0          // function D ();
202:                 meta    7    0   11     // function end: 213;
203:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
204:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
205:           assignment  130    5    3     // tmp130 = 'getDay': STRING;
206:          prop_getter  131    1  130     // tmp131 = self[tmp130];
207:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
208:               call_n  133  131    0     // 
209:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
210:          prop_getter  134    4  133     // tmp134 = daysShort[tmp133];
211:               retval  134               // return tmp134;
212:                  ret                    // ret;
213:          func_decl_n    5    0          // function F ();
214:                 meta    7    0   11     // function end: 225;
215:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
216:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
217:           assignment  130    5    6     // tmp130 = 'getMonth': STRING;
218:          prop_getter  131    1  130     // tmp131 = self[tmp130];
219:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
220:               call_n  133  131    0     // 
221:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
222:          prop_getter  134    7  133     // tmp134 = monthsLong[tmp133];
223:               retval  134               // return tmp134;
224:                  ret                    // ret;
225:          func_decl_n    8    0          // function g ();
226:                 meta    7    0   28     // function end: 254;
227:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
228:         reg_var_decl  128  146    0     // var tmp128 .. tmp146;
229:           assignment  130    5    9     // tmp130 = 'getHours': STRING;
230:          prop_getter  131    1  130     // tmp131 = self[tmp130];
231:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
232:               call_n  133  131    0     // 
233:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
234:           assignment  134    1   12     // tmp134 = 12: SMALLINT;
235:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
236:    is_false_jmp_down  135    0   10     // if (tmp135 == false) goto 246;
237:           assignment  136    5    9     // tmp136 = 'getHours': STRING;
238:          prop_getter  137    1  136     // tmp137 = self[tmp136];
239:           assignment  138    6    1     // tmp138 = self : TYPEOF(self);
240:               call_n  139  137    0     // 
241:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
242:           assignment  140    1   12     // tmp140 = 12: SMALLINT;
243:         substraction  141  139  140     // tmp141 = tmp139 - tmp140;
244:           assignment  142    6  141     // tmp142 = tmp141 : TYPEOF(tmp141);
245:             jmp_down    0    7          // goto 252;
246:           assignment  143    5    9     // tmp143 = 'getHours': STRING;
247:          prop_getter  144    1  143     // tmp144 = self[tmp143];
248:           assignment  145    6    1     // tmp145 = self : TYPEOF(self);
249:               call_n  146  144    0     // 
250:                 meta    1    1  145     // tmp146 = tmp144 (this_arg = tmp145);
251:           assignment  142    6  146     // tmp142 = tmp146 : TYPEOF(tmp146);
252:               retval  142               // return tmp142;
253:                  ret                    // ret;
254:          func_decl_n   10    0          // function G ();
255:                 meta    7    0   10     // function end: 265;
256:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
257:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
258:           assignment  130    5    0     // tmp130 = 'getHours': STRING;
259:          prop_getter  131    1  130     // tmp131 = self[tmp130];
260:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
261:               call_n  133  131    0     // 
262:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
263:               retval  133               // return tmp133;
264:                  ret                    // ret;
265:          func_decl_n    2    0          // function h ();
266:                 meta    7    0   77     // function end: 343;
267:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
268:         reg_var_decl  128  149    1     // var tmp128 .. tmp149;
269:           assignment  130    5    0     // tmp130 = 'getHours': STRING;
270:          prop_getter  131    1  130     // tmp131 = self[tmp130];
271:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
272:               call_n  133  131    0     // 
273:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
274:           assignment  134    1   12     // tmp134 = 12: SMALLINT;
275:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
276:    is_false_jmp_down  135    0   37     // if (tmp135 == false) goto 313;
277:          construct_n  130    3    1     // 
278:           assignment  130    5    0     // tmp130 = 'getHours': STRING;
279:          prop_getter  131    1  130     // tmp131 = self[tmp130];
280:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
281:               call_n  133  131    0     // 
282:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
283:           assignment  134    1   12     // tmp134 = 12: SMALLINT;
284:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
285:                 meta    2  135  255     // 
286:           assignment  149    6  130     // tmp149 = tmp130 : TYPEOF(tmp130);
287:           assignment  130    5    4     // tmp130 = 'length': STRING;
288:          prop_getter  131  149  130     // tmp131 = tmp149[tmp130];
289:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
290:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
291:    is_false_jmp_down  133    0   12     // if (tmp133 == false) goto 303;
292:           assignment  134    5    5     // tmp134 = '0': STRING;
293:           assignment  135    5    0     // tmp135 = 'getHours': STRING;
294:          prop_getter  136    1  135     // tmp136 = self[tmp135];
295:           assignment  137    6    1     // tmp137 = self : TYPEOF(self);
296:               call_n  138  136    0     // 
297:                 meta    1    1  137     // tmp138 = tmp136 (this_arg = tmp137);
298:           assignment  139    1   12     // tmp139 = 12: SMALLINT;
299:         substraction  140  138  139     // tmp140 = tmp138 - tmp139;
300:             addition  141  134  140     // tmp141 = tmp134 + tmp140;
301:           assignment  142    6  141     // tmp142 = tmp141 : TYPEOF(tmp141);
302:             jmp_down    0    9          // goto 311;
303:           assignment  143    5    0     // tmp143 = 'getHours': STRING;
304:          prop_getter  144    1  143     // tmp144 = self[tmp143];
305:           assignment  145    6    1     // tmp145 = self : TYPEOF(self);
306:               call_n  146  144    0     // 
307:                 meta    1    1  145     // tmp146 = tmp144 (this_arg = tmp145);
308:           assignment  147    1   12     // tmp147 = 12: SMALLINT;
309:         substraction  148  146  147     // tmp148 = tmp146 - tmp147;
310:           assignment  142    6  148     // tmp142 = tmp148 : TYPEOF(tmp148);
311:               retval  142               // return tmp142;
312:             jmp_down    0   30          // goto 342;
313:          construct_n  130    3    1     // 
314:           assignment  130    5    0     // tmp130 = 'getHours': STRING;
315:          prop_getter  131    1  130     // tmp131 = self[tmp130];
316:           assignment  132    6    1     // tmp132 = self : TYPEOF(self);
317:               call_n  133  131    0     // 
318:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
319:                 meta    2  133  255     // 
320:           assignment  149    6  130     // tmp149 = tmp130 : TYPEOF(tmp130);
321:           assignment  130    5    0     // tmp130 = 'length': STRING;
322:          prop_getter  131  149  130     // tmp131 = tmp149[tmp130];
323:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
324:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
325:    is_false_jmp_down  133    0   10     // if (tmp133 == false) goto 335;
326:           assignment  134    5    1     // tmp134 = '0': STRING;
327:           assignment  135    5    2     // tmp135 = 'getHours': STRING;
328:          prop_getter  136    3  135     // tmp136 = self[tmp135];
329:           assignment  137    6    3     // tmp137 = self : TYPEOF(self);
330:               call_n  138  136    0     // 
331:                 meta    1    1  137     // tmp138 = tmp136 (this_arg = tmp137);
332:             addition  139  134  138     // tmp139 = tmp134 + tmp138;
333:           assignment  140    6  139     // tmp140 = tmp139 : TYPEOF(tmp139);
334:             jmp_down    0    7          // goto 341;
335:           assignment  141    5    2     // tmp141 = 'getHours': STRING;
336:          prop_getter  142    3  141     // tmp142 = self[tmp141];
337:           assignment  143    6    3     // tmp143 = self : TYPEOF(self);
338:               call_n  144  142    0     // 
339:                 meta    1    1  143     // tmp144 = tmp142 (this_arg = tmp143);
340:           assignment  140    6  144     // tmp140 = tmp144 : TYPEOF(tmp144);
341:               retval  140               // return tmp140;
342:                  ret                    // ret;
343:          func_decl_n    4    0          // function H ();
344:                 meta    7    0   32     // function end: 376;
345:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
346:         reg_var_decl  128  145    0     // var tmp128 .. tmp145;
347:          construct_n  130    5    1     // 
348:           assignment  130    5    2     // tmp130 = 'getHours': STRING;
349:          prop_getter  131    3  130     // tmp131 = self[tmp130];
350:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
351:               call_n  133  131    0     // 
352:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
353:                 meta    2  133  255     // 
354:           assignment  131    5    0     // tmp131 = 'length': STRING;
355:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
356:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
357:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
358:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 368;
359:           assignment  135    5    1     // tmp135 = '0': STRING;
360:           assignment  136    5    2     // tmp136 = 'getHours': STRING;
361:          prop_getter  137    3  136     // tmp137 = self[tmp136];
362:           assignment  138    6    3     // tmp138 = self : TYPEOF(self);
363:               call_n  139  137    0     // 
364:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
365:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
366:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
367:             jmp_down    0    7          // goto 374;
368:           assignment  142    5    2     // tmp142 = 'getHours': STRING;
369:          prop_getter  143    3  142     // tmp143 = self[tmp142];
370:           assignment  144    6    3     // tmp144 = self : TYPEOF(self);
371:               call_n  145  143    0     // 
372:                 meta    1    1  144     // tmp145 = tmp143 (this_arg = tmp144);
373:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
374:               retval  141               // return tmp141;
375:                  ret                    // ret;
376:          func_decl_n    6    0          // function i ();
377:                 meta    7    0   32     // function end: 409;
378:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
379:         reg_var_decl  128  145    0     // var tmp128 .. tmp145;
380:          construct_n  130    5    1     // 
381:           assignment  130    5    7     // tmp130 = 'getMinutes': STRING;
382:          prop_getter  131    3  130     // tmp131 = self[tmp130];
383:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
384:               call_n  133  131    0     // 
385:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
386:                 meta    2  133  255     // 
387:           assignment  131    5    0     // tmp131 = 'length': STRING;
388:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
389:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
390:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
391:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 401;
392:           assignment  135    5    1     // tmp135 = '0': STRING;
393:           assignment  136    5    2     // tmp136 = 'getMinutes': STRING;
394:          prop_getter  137    3  136     // tmp137 = self[tmp136];
395:           assignment  138    6    3     // tmp138 = self : TYPEOF(self);
396:               call_n  139  137    0     // 
397:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
398:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
399:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
400:             jmp_down    0    7          // goto 407;
401:           assignment  142    5    2     // tmp142 = 'getMinutes': STRING;
402:          prop_getter  143    3  142     // tmp143 = self[tmp142];
403:           assignment  144    6    3     // tmp144 = self : TYPEOF(self);
404:               call_n  145  143    0     // 
405:                 meta    1    1  144     // tmp145 = tmp143 (this_arg = tmp144);
406:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
407:               retval  141               // return tmp141;
408:                  ret                    // ret;
409:          func_decl_n    4    0          // function j ();
410:                 meta    7    0   10     // function end: 420;
411:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
412:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
413:           assignment  130    5    5     // tmp130 = 'getDate': STRING;
414:          prop_getter  131    3  130     // tmp131 = self[tmp130];
415:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
416:               call_n  133  131    0     // 
417:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
418:               retval  133               // return tmp133;
419:                  ret                    // ret;
420:          func_decl_n    6    0          // function l ();
421:                 meta    7    0   11     // function end: 432;
422:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
423:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
424:           assignment  130    5    7     // tmp130 = 'getDay': STRING;
425:          prop_getter  131    3  130     // tmp131 = self[tmp130];
426:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
427:               call_n  133  131    0     // 
428:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
429:          prop_getter  134    8  133     // tmp134 = daysLong[tmp133];
430:               retval  134               // return tmp134;
431:                  ret                    // ret;
432:          func_decl_n    9    0          // function L ();
433:                 meta    7    0   48     // function end: 481;
434:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
435:         reg_var_decl  128  158    1     // var tmp128 .. tmp158;
436:               call_n  130   10    0     // 
437:           assignment  158    6  130     // tmp158 = tmp130 : TYPEOF(tmp130);
438:           assignment  130    6  158     // tmp130 = tmp158 : TYPEOF(tmp158);
439:           assignment  131    1    4     // tmp131 = 4: SMALLINT;
440:            remainder  132  130  131     // tmp132 = tmp130 %% tmp131;
441:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
442:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
443:           assignment  135    6  134     // tmp135 = tmp134 : TYPEOF(tmp134);
444:    is_false_jmp_down  135    0    7     // if (tmp135 == false) goto 451;
445:           assignment  136    6  158     // tmp136 = tmp158 : TYPEOF(tmp158);
446:           assignment  137    1  100     // tmp137 = 100: SMALLINT;
447:            remainder  138  136  137     // tmp138 = tmp136 %% tmp137;
448:           assignment  139    1    0     // tmp139 = 0: SMALLINT;
449:      not_equal_value  140  138  139     // tmp140 = tmp138 != tmp139;
450:           assignment  135    6  140     // tmp135 = tmp140 : TYPEOF(tmp140);
451:           assignment  141    6  135     // tmp141 = tmp135 : TYPEOF(tmp135);
452:     is_true_jmp_down  141    0   22     // if (tmp141) goto 474;
453:           assignment  142    6  158     // tmp142 = tmp158 : TYPEOF(tmp158);
454:           assignment  143    1    4     // tmp143 = 4: SMALLINT;
455:            remainder  144  142  143     // tmp144 = tmp142 %% tmp143;
456:           assignment  145    1    0     // tmp145 = 0: SMALLINT;
457:          equal_value  146  144  145     // tmp146 = tmp144 == tmp145;
458:           assignment  147    6  146     // tmp147 = tmp146 : TYPEOF(tmp146);
459:    is_false_jmp_down  147    0   14     // if (tmp147 == false) goto 473;
460:           assignment  148    6  158     // tmp148 = tmp158 : TYPEOF(tmp158);
461:           assignment  149    1  100     // tmp149 = 100: SMALLINT;
462:            remainder  150  148  149     // tmp150 = tmp148 %% tmp149;
463:           assignment  151    1    0     // tmp151 = 0: SMALLINT;
464:          equal_value  152  150  151     // tmp152 = tmp150 == tmp151;
465:           assignment  147    6  152     // tmp147 = tmp152 : TYPEOF(tmp152);
466:    is_false_jmp_down  147    0    7     // if (tmp147 == false) goto 473;
467:           assignment  153    6  158     // tmp153 = tmp158 : TYPEOF(tmp158);
468:           assignment  154    3    0     // tmp154 = 400: NUMBER;
469:            remainder  155  153  154     // tmp155 = tmp153 %% tmp154;
470:           assignment  156    1    0     // tmp156 = 0: SMALLINT;
471:          equal_value  157  155  156     // tmp157 = tmp155 == tmp156;
472:           assignment  147    6  157     // tmp147 = tmp157 : TYPEOF(tmp157);
473:           assignment  141    6  147     // tmp141 = tmp147 : TYPEOF(tmp147);
474:    is_false_jmp_down  141    0    4     // if (tmp141 == false) goto 478;
475:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
476:               retval  130               // return tmp130;
477:             jmp_down    0    3          // goto 480;
478:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
479:               retval  130               // return tmp130;
480:                  ret                    // ret;
481:          func_decl_n    1    0          // function m ();
482:                 meta    7    0   32     // function end: 514;
483:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
484:         reg_var_decl  128  150    0     // var tmp128 .. tmp150;
485:           assignment  130    5    2     // tmp130 = 'getMonth': STRING;
486:          prop_getter  131    3  130     // tmp131 = self[tmp130];
487:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
488:               call_n  133  131    0     // 
489:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
490:           assignment  134    1    9     // tmp134 = 9: SMALLINT;
491:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
492:    is_false_jmp_down  135    0   12     // if (tmp135 == false) goto 504;
493:           assignment  136    5    4     // tmp136 = '0': STRING;
494:           assignment  137    5    2     // tmp137 = 'getMonth': STRING;
495:          prop_getter  138    3  137     // tmp138 = self[tmp137];
496:           assignment  139    6    3     // tmp139 = self : TYPEOF(self);
497:               call_n  140  138    0     // 
498:                 meta    1    1  139     // tmp140 = tmp138 (this_arg = tmp139);
499:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
500:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
501:             addition  143  136  142     // tmp143 = tmp136 + tmp142;
502:           assignment  144    6  143     // tmp144 = tmp143 : TYPEOF(tmp143);
503:             jmp_down    0    9          // goto 512;
504:           assignment  145    5    2     // tmp145 = 'getMonth': STRING;
505:          prop_getter  146    3  145     // tmp146 = self[tmp145];
506:           assignment  147    6    3     // tmp147 = self : TYPEOF(self);
507:               call_n  148  146    0     // 
508:                 meta    1    1  147     // tmp148 = tmp146 (this_arg = tmp147);
509:           assignment  149    1    1     // tmp149 = 1: SMALLINT;
510:             addition  150  148  149     // tmp150 = tmp148 + tmp149;
511:           assignment  144    6  150     // tmp144 = tmp150 : TYPEOF(tmp150);
512:               retval  144               // return tmp144;
513:                  ret                    // ret;
514:          func_decl_n    0    0          // function M ();
515:                 meta    7    0   11     // function end: 526;
516:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
517:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
518:           assignment  130    5    1     // tmp130 = 'getMonth': STRING;
519:          prop_getter  131    2  130     // tmp131 = self[tmp130];
520:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
521:               call_n  133  131    0     // 
522:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
523:          prop_getter  134    3  133     // tmp134 = monthsShort[tmp133];
524:               retval  134               // return tmp134;
525:                  ret                    // ret;
526:          func_decl_n    4    0          // function n ();
527:                 meta    7    0   12     // function end: 539;
528:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
529:         reg_var_decl  128  135    0     // var tmp128 .. tmp135;
530:           assignment  130    5    1     // tmp130 = 'getMonth': STRING;
531:          prop_getter  131    2  130     // tmp131 = self[tmp130];
532:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
533:               call_n  133  131    0     // 
534:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
535:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
536:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
537:               retval  135               // return tmp135;
538:                  ret                    // ret;
539:          func_decl_n    5    0          // function O ();
540:                 meta    7    0   76     // function end: 616;
541:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
542:         reg_var_decl  128  145    3     // var tmp128 .. tmp145;
543:           assignment  130    5    6     // tmp130 = 'abs': STRING;
544:          prop_getter  131    7  130     // tmp131 = Math[tmp130];
545:           assignment  132    6    7     // tmp132 = Math : TYPEOF(Math);
546:               call_n  133  131    1     // 
547:                 meta    1    1  132     // 
548:           assignment  133    5    8     // tmp133 = 'getTimezoneOffset': STRING;
549:          prop_getter  134    2  133     // tmp134 = self[tmp133];
550:           assignment  135    6    2     // tmp135 = self : TYPEOF(self);
551:               call_n  136  134    0     // 
552:                 meta    1    1  135     // tmp136 = tmp134 (this_arg = tmp135);
553:                 meta    2  136  255     // 
554:           assignment  143    6  133     // tmp143 = tmp133 : TYPEOF(tmp133);
555:           assignment  130    5    9     // tmp130 = '': STRING;
556:           assignment  131    5   10     // tmp131 = 'floor': STRING;
557:          prop_getter  132    7  131     // tmp132 = Math[tmp131];
558:           assignment  133    6    7     // tmp133 = Math : TYPEOF(Math);
559:               call_n  134  132    1     // 
560:                 meta    1    1  133     // 
561:           assignment  134    6  143     // tmp134 = tmp143 : TYPEOF(tmp143);
562:           assignment  135    1   60     // tmp135 = 60: SMALLINT;
563:             division  136  134  135     // tmp136 = tmp134 / tmp135;
564:                 meta    2  136  255     // tmp134 = tmp132 (this_arg = tmp133, tmp136);
565:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
566:           assignment  144    6  135     // tmp144 = tmp135 : TYPEOF(tmp135);
567:           assignment  130    5    9     // tmp130 = '': STRING;
568:           assignment  131    6  143     // tmp131 = tmp143 : TYPEOF(tmp143);
569:           assignment  132    1   60     // tmp132 = 60: SMALLINT;
570:            remainder  133  131  132     // tmp133 = tmp131 %% tmp132;
571:             addition  134  130  133     // tmp134 = tmp130 + tmp133;
572:           assignment  145    6  134     // tmp145 = tmp134 : TYPEOF(tmp134);
573:           assignment  130    5   11     // tmp130 = 'length': STRING;
574:          prop_getter  131  144  130     // tmp131 = tmp144[tmp130];
575:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
576:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
577:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 583;
578:           assignment  134    5    0     // tmp134 = '0': STRING;
579:             addition  135  134  144     // tmp135 = tmp134 + tmp144;
580:           assignment  144    6  135     // tmp144 = tmp135 : TYPEOF(tmp135);
581:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
582:             jmp_down    0    3          // goto 585;
583:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
584:           assignment  136    6  137     // tmp136 = tmp137 : TYPEOF(tmp137);
585:           assignment  130    5    1     // tmp130 = 'length': STRING;
586:          prop_getter  131  145  130     // tmp131 = tmp145[tmp130];
587:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
588:          equal_value  133  131  132     // tmp133 = tmp131 == tmp132;
589:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 595;
590:           assignment  134    5    0     // tmp134 = '0': STRING;
591:             addition  135  134  145     // tmp135 = tmp134 + tmp145;
592:           assignment  145    6  135     // tmp145 = tmp135 : TYPEOF(tmp135);
593:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
594:             jmp_down    0    3          // goto 597;
595:           assignment  137    1    1     // tmp137 = 1: SMALLINT;
596:           assignment  136    6  137     // tmp136 = tmp137 : TYPEOF(tmp137);
597:           assignment  130    5    2     // tmp130 = 'getTimezoneOffset': STRING;
598:          prop_getter  131    3  130     // tmp131 = self[tmp130];
599:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
600:               call_n  133  131    0     // 
601:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
602:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
603:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
604:    is_false_jmp_down  135    0    6     // if (tmp135 == false) goto 610;
605:           assignment  136    5    4     // tmp136 = '+': STRING;
606:             addition  137  136  144     // tmp137 = tmp136 + tmp144;
607:             addition  138  137  145     // tmp138 = tmp137 + tmp145;
608:           assignment  139    6  138     // tmp139 = tmp138 : TYPEOF(tmp138);
609:             jmp_down    0    5          // goto 614;
610:           assignment  140    5    5     // tmp140 = '-': STRING;
611:             addition  141  140  144     // tmp141 = tmp140 + tmp144;
612:             addition  142  141  145     // tmp142 = tmp141 + tmp145;
613:           assignment  139    6  142     // tmp139 = tmp142 : TYPEOF(tmp142);
614:               retval  139               // return tmp139;
615:                  ret                    // ret;
616:          func_decl_n  159    0          // function tmp159 ();
617:                 meta    7    0   35     // function end: 652;
618:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
619:         reg_var_decl  128  159    1     // var tmp128 .. tmp159;
620:               call_n  130    6    0     // 
621:           assignment  131    5    7     // tmp131 = ', ': STRING;
622:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
623:               call_n  133    8    0     // 
624:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
625:           assignment  135    5    9     // tmp135 = ' ': STRING;
626:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
627:               call_n  137   10    0     // 
628:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
629:           assignment  139    5    9     // tmp139 = ' ': STRING;
630:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
631:               call_n  141   11    0     // 
632:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
633:           assignment  143    5    9     // tmp143 = ' ': STRING;
634:             addition  144  142  143     // tmp144 = tmp142 + tmp143;
635:               call_n  145   12    0     // 
636:             addition  146  144  145     // tmp146 = tmp144 + tmp145;
637:           assignment  147    5   13     // tmp147 = ':': STRING;
638:             addition  148  146  147     // tmp148 = tmp146 + tmp147;
639:               call_n  149   14    0     // 
640:             addition  150  148  149     // tmp150 = tmp148 + tmp149;
641:           assignment  151    5    0     // tmp151 = ':': STRING;
642:             addition  152  150  151     // tmp152 = tmp150 + tmp151;
643:               call_n  153    1    0     // 
644:             addition  154  152  153     // tmp154 = tmp152 + tmp153;
645:           assignment  155    5    2     // tmp155 = ' ': STRING;
646:             addition  156  154  155     // tmp156 = tmp154 + tmp155;
647:               call_n  157    3    0     // 
648:             addition  158  156  157     // tmp158 = tmp156 + tmp157;
649:           assignment  159    6  158     // tmp159 = tmp158 : TYPEOF(tmp158);
650:               retval  159               // return tmp159;
651:                  ret                    // ret;
652:          func_decl_n    4    0          // function S ();
653:                 meta    7    0   13     // function end: 666;
654:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
655:         reg_var_decl  128  136    0     // var tmp128 .. tmp136;
656:           assignment  130    5    5     // tmp130 = 'getDate': STRING;
657:          prop_getter  131    6  130     // tmp131 = self[tmp130];
658:           assignment  132    6    6     // tmp132 = self : TYPEOF(self);
659:               call_n  133  131    0     // 
660:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
661:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
662:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
663:          prop_getter  136    7  135     // tmp136 = daysSuffix[tmp135];
664:               retval  136               // return tmp136;
665:                  ret                    // ret;
666:          func_decl_n    1    0          // function s ();
667:                 meta    7    0   32     // function end: 699;
668:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
669:         reg_var_decl  128  145    0     // var tmp128 .. tmp145;
670:          construct_n  130    8    1     // 
671:           assignment  130    5    9     // tmp130 = 'getSeconds': STRING;
672:          prop_getter  131    6  130     // tmp131 = self[tmp130];
673:           assignment  132    6    6     // tmp132 = self : TYPEOF(self);
674:               call_n  133  131    0     // 
675:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
676:                 meta    2  133  255     // 
677:           assignment  131    5   10     // tmp131 = 'length': STRING;
678:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
679:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
680:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
681:    is_false_jmp_down  134    0   10     // if (tmp134 == false) goto 691;
682:           assignment  135    5   11     // tmp135 = '0': STRING;
683:           assignment  136    5    9     // tmp136 = 'getSeconds': STRING;
684:          prop_getter  137    6  136     // tmp137 = self[tmp136];
685:           assignment  138    6    6     // tmp138 = self : TYPEOF(self);
686:               call_n  139  137    0     // 
687:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
688:             addition  140  135  139     // tmp140 = tmp135 + tmp139;
689:           assignment  141    6  140     // tmp141 = tmp140 : TYPEOF(tmp140);
690:             jmp_down    0    7          // goto 697;
691:           assignment  142    5    9     // tmp142 = 'getSeconds': STRING;
692:          prop_getter  143    6  142     // tmp143 = self[tmp142];
693:           assignment  144    6    6     // tmp144 = self : TYPEOF(self);
694:               call_n  145  143    0     // 
695:                 meta    1    1  144     // tmp145 = tmp143 (this_arg = tmp144);
696:           assignment  141    6  145     // tmp141 = tmp145 : TYPEOF(tmp145);
697:               retval  141               // return tmp141;
698:                  ret                    // ret;
699:          func_decl_n   12    0          // function t ();
700:                 meta    7    0   47     // function end: 747;
701:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
702:         reg_var_decl  128  137    1     // var tmp128 .. tmp137;
703:           array_decl  130    0   13     // 
704:           assignment  130    0    2     // tmp130 = null: SIMPLE;
705:                 meta    2  130  255     // 
706:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
707:                 meta    2  130  255     // 
708:           assignment  130    1   28     // tmp130 = 28: SMALLINT;
709:                 meta    2  130  255     // 
710:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
711:                 meta    2  130  255     // 
712:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
713:                 meta    2  130  255     // 
714:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
715:                 meta    2  130  255     // 
716:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
717:                 meta    2  130  255     // 
718:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
719:                 meta    2  130  255     // 
720:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
721:                 meta    2  130  255     // 
722:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
723:                 meta    2  130  255     // 
724:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
725:                 meta    2  130  255     // 
726:           assignment  130    1   30     // tmp130 = 30: SMALLINT;
727:                 meta    2  130  255     // 
728:           assignment  130    1   31     // tmp130 = 31: SMALLINT;
729:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
730:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
731:               call_n  130    0    0     // 
732:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
733:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
734:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
735:    is_false_jmp_down  133    0    5     // if (tmp133 == false) goto 740;
736:               call_n  134    1    0     // 
737:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
738:          equal_value  136  134  135     // tmp136 = tmp134 == tmp135;
739:           assignment  133    6  136     // tmp133 = tmp136 : TYPEOF(tmp136);
740:    is_false_jmp_down  133    0    3     // if (tmp133 == false) goto 743;
741:           assignment  130    1   29     // tmp130 = 29: SMALLINT;
742:               retval  130               // return tmp130;
743:               call_n  130    1    0     // 
744:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
745:               retval  131               // return tmp131;
746:                  ret                    // ret;
747:          func_decl_n    2    0          // function U ();
748:                 meta    7    0   18     // function end: 766;
749:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
750:         reg_var_decl  128  138    0     // var tmp128 .. tmp138;
751:           assignment  130    5    3     // tmp130 = 'round': STRING;
752:          prop_getter  131    4  130     // tmp131 = Math[tmp130];
753:           assignment  132    6    4     // tmp132 = Math : TYPEOF(Math);
754:               call_n  133  131    1     // 
755:                 meta    1    1  132     // 
756:           assignment  133    5    5     // tmp133 = 'getTime': STRING;
757:          prop_getter  134    6  133     // tmp134 = self[tmp133];
758:           assignment  135    6    6     // tmp135 = self : TYPEOF(self);
759:               call_n  136  134    0     // 
760:                 meta    1    1  135     // tmp136 = tmp134 (this_arg = tmp135);
761:           assignment  137    3    7     // tmp137 = 1000: NUMBER;
762:             division  138  136  137     // tmp138 = tmp136 / tmp137;
763:                 meta    2  138  255     // 
764:               retval  133               // return tmp133;
765:                  ret                    // ret;
766:          func_decl_n    8    0          // function W ();
767:                 meta    7    0  132     // function end: 899;
768:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
769:         reg_var_decl  128  149    6     // var tmp128 .. tmp149;
770:           assignment  130    3    0     // tmp130 = 364: NUMBER;
771:               call_n  131    1    0     // 
772:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
773:               call_n  133    2    0     // 
774:         substraction  134  132  133     // tmp134 = tmp132 - tmp133;
775:           assignment  144    6  134     // tmp144 = tmp134 : TYPEOF(tmp134);
776:               call_n  130    2    0     // 
777:           assignment  145    6  130     // tmp145 = tmp130 : TYPEOF(tmp130);
778:               call_n  130    3    0     // 
779:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
780:      not_equal_value  132  130  131     // tmp132 = tmp130 != tmp131;
781:    is_false_jmp_down  132    0    6     // if (tmp132 == false) goto 787;
782:               call_n  133    3    0     // 
783:           assignment  134    1    1     // tmp134 = 1: SMALLINT;
784:         substraction  135  133  134     // tmp135 = tmp133 - tmp134;
785:           assignment  136    6  135     // tmp136 = tmp135 : TYPEOF(tmp135);
786:             jmp_down    0    3          // goto 789;
787:           assignment  137    1    6     // tmp137 = 6: SMALLINT;
788:           assignment  136    6  137     // tmp136 = tmp137 : TYPEOF(tmp137);
789:           assignment  146    6  136     // tmp146 = tmp136 : TYPEOF(tmp136);
790:           assignment  130    6  144     // tmp130 = tmp144 : TYPEOF(tmp144);
791:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
792:   less_or_equal_than  132  130  131     // tmp132 = tmp130 <= tmp131;
793:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
794:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 800;
795:           assignment  134    6  146     // tmp134 = tmp146 : TYPEOF(tmp146);
796:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
797:         substraction  136  135  144     // tmp136 = tmp135 - tmp144;
798:   less_or_equal_than  137  134  136     // tmp137 = tmp134 <= tmp136;
799:           assignment  133    6  137     // tmp133 = tmp137 : TYPEOF(tmp137);
800:    is_false_jmp_down  133    0    3     // if (tmp133 == false) goto 803;
801:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
802:               retval  130               // return tmp130;
803:          construct_n  130    4    1     // 
804:           assignment  130    5    5     // tmp130 = 'January 1 ': STRING;
805:               call_n  131    6    0     // 
806:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
807:           assignment  133    5    7     // tmp133 = ' 00:00:00': STRING;
808:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
809:                 meta    2  134  255     // 
810:           assignment  147    6  130     // tmp147 = tmp130 : TYPEOF(tmp130);
811:           assignment  130    5    8     // tmp130 = 'getDay': STRING;
812:          prop_getter  131  147  130     // tmp131 = tmp147[tmp130];
813:           assignment  132    6  147     // tmp132 = tmp147 : TYPEOF(tmp147);
814:               call_n  133  131    0     // 
815:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
816:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
817:      not_equal_value  135  133  134     // tmp135 = tmp133 != tmp134;
818:    is_false_jmp_down  135    0   10     // if (tmp135 == false) goto 828;
819:           assignment  136    5    8     // tmp136 = 'getDay': STRING;
820:          prop_getter  137  147  136     // tmp137 = tmp147[tmp136];
821:           assignment  138    6  147     // tmp138 = tmp147 : TYPEOF(tmp147);
822:               call_n  139  137    0     // 
823:                 meta    1    1  138     // tmp139 = tmp137 (this_arg = tmp138);
824:           assignment  140    1    1     // tmp140 = 1: SMALLINT;
825:         substraction  141  139  140     // tmp141 = tmp139 - tmp140;
826:           assignment  142    6  141     // tmp142 = tmp141 : TYPEOF(tmp141);
827:             jmp_down    0    3          // goto 830;
828:           assignment  143    1    6     // tmp143 = 6: SMALLINT;
829:           assignment  142    6  143     // tmp142 = tmp143 : TYPEOF(tmp143);
830:           assignment  148    6  142     // tmp148 = tmp142 : TYPEOF(tmp142);
831:           assignment  130    6  145     // tmp130 = tmp145 : TYPEOF(tmp145);
832:           assignment  131    1    2     // tmp131 = 2: SMALLINT;
833:   less_or_equal_than  132  130  131     // tmp132 = tmp130 <= tmp131;
834:           assignment  133    6  132     // tmp133 = tmp132 : TYPEOF(tmp132);
835:    is_false_jmp_down  133    0   11     // if (tmp133 == false) goto 846;
836:           assignment  134    6  148     // tmp134 = tmp148 : TYPEOF(tmp148);
837:           assignment  135    1    4     // tmp135 = 4: SMALLINT;
838: greater_or_equal_than  136  134  135     // tmp136 = tmp134 >= tmp135;
839:           assignment  133    6  136     // tmp133 = tmp136 : TYPEOF(tmp136);
840:    is_false_jmp_down  133    0    6     // if (tmp133 == false) goto 846;
841:           assignment  137    6  145     // tmp137 = tmp145 : TYPEOF(tmp145);
842:           assignment  138    1    6     // tmp138 = 6: SMALLINT;
843:         substraction  139  138  148     // tmp139 = tmp138 - tmp148;
844: greater_or_equal_than  140  137  139     // tmp140 = tmp137 >= tmp139;
845:           assignment  133    6  140     // tmp133 = tmp140 : TYPEOF(tmp140);
846:    is_false_jmp_down  133    0   19     // if (tmp133 == false) goto 865;
847:          construct_n  130    0    1     // 
848:           assignment  130    5    1     // tmp130 = 'December 31 ': STRING;
849:               call_n  131    2    0     // 
850:           assignment  132    1    1     // tmp132 = 1: SMALLINT;
851:         substraction  133  131  132     // tmp133 = tmp131 - tmp132;
852:             addition  134  130  133     // tmp134 = tmp130 + tmp133;
853:           assignment  135    5    3     // tmp135 = ' 00:00:00': STRING;
854:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
855:                 meta    2  136  255     // 
856:           assignment  149    6  130     // tmp149 = tmp130 : TYPEOF(tmp130);
857:           assignment  130    5    4     // tmp130 = 'formatDate': STRING;
858:          prop_getter  131  149  130     // tmp131 = tmp149[tmp130];
859:           assignment  132    6  149     // tmp132 = tmp149 : TYPEOF(tmp149);
860:               call_n  133  131    1     // 
861:                 meta    1    1  132     // 
862:           assignment  133    5    5     // tmp133 = 'W': STRING;
863:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
864:               retval  133               // return tmp133;
865:           assignment  130    6  148     // tmp130 = tmp148 : TYPEOF(tmp148);
866:           assignment  131    1    3     // tmp131 = 3: SMALLINT;
867:   less_or_equal_than  132  130  131     // tmp132 = tmp130 <= tmp131;
868:    is_false_jmp_down  132    0   15     // if (tmp132 == false) goto 883;
869:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
870:           assignment  131    5    6     // tmp131 = 'floor': STRING;
871:          prop_getter  132    7  131     // tmp132 = Math[tmp131];
872:           assignment  133    6    7     // tmp133 = Math : TYPEOF(Math);
873:               call_n  134  132    1     // 
874:                 meta    1    1  133     // 
875:               call_n  134    8    0     // 
876:             addition  135  134  148     // tmp135 = tmp134 + tmp148;
877:           assignment  136    1    7     // tmp136 = 7: SMALLINT;
878:             division  137  135  136     // tmp137 = tmp135 / tmp136;
879:                 meta    2  137  255     // 
880:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
881:               retval  135               // return tmp135;
882:             jmp_down    0   16          // goto 898;
883:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
884:           assignment  131    5    6     // tmp131 = 'floor': STRING;
885:          prop_getter  132    7  131     // tmp132 = Math[tmp131];
886:           assignment  133    6    7     // tmp133 = Math : TYPEOF(Math);
887:               call_n  134  132    1     // 
888:                 meta    1    1  133     // 
889:               call_n  134    8    0     // 
890:           assignment  135    1    7     // tmp135 = 7: SMALLINT;
891:         substraction  136  135  148     // tmp136 = tmp135 - tmp148;
892:         substraction  137  134  136     // tmp137 = tmp134 - tmp136;
893:           assignment  138    1    7     // tmp138 = 7: SMALLINT;
894:             division  139  137  138     // tmp139 = tmp137 / tmp138;
895:                 meta    2  139  255     // 
896:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
897:               retval  135               // return tmp135;
898:                  ret                    // ret;
899:          func_decl_n    0    0          // function w ();
900:                 meta    7    0   10     // function end: 910;
901:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
902:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
903:           assignment  130    5    1     // tmp130 = 'getDay': STRING;
904:          prop_getter  131    2  130     // tmp131 = self[tmp130];
905:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
906:               call_n  133  131    0     // 
907:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
908:               retval  133               // return tmp133;
909:                  ret                    // ret;
910:          func_decl_n    3    0          // function Y ();
911:                 meta    7    0   49     // function end: 960;
912:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
913:         reg_var_decl  128  139    3     // var tmp128 .. tmp139;
914:           assignment  130    5    4     // tmp130 = 'getFullYear': STRING;
915:          prop_getter  131    2  130     // tmp131 = self[tmp130];
916:    is_false_jmp_down  131    0   21     // if (tmp131 == false) goto 937;
917:          construct_n  130    5    1     // 
918:           assignment  130    5    6     // tmp130 = 'January 1 2001 00:00:00 +0000': STRING;
919:                 meta    2  130  255     // tmp130 = new Date (tmp130);
920:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
921:           assignment  130    5    4     // tmp130 = 'getFullYear': STRING;
922:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
923:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
924:               call_n  133  131    0     // 
925:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
926:           assignment  138    6  133     // tmp138 = tmp133 : TYPEOF(tmp133);
927:           assignment  130    6  138     // tmp130 = tmp138 : TYPEOF(tmp138);
928:           assignment  131    3    7     // tmp131 = 2001: NUMBER;
929:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
930:    is_false_jmp_down  132    0    7     // if (tmp132 == false) goto 937;
931:           assignment  130    5    4     // tmp130 = 'getFullYear': STRING;
932:          prop_getter  131    2  130     // tmp131 = self[tmp130];
933:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
934:               call_n  133  131    0     // 
935:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
936:               retval  133               // return tmp133;
937:           assignment  130    5    8     // tmp130 = 'getYear': STRING;
938:          prop_getter  131    2  130     // tmp131 = self[tmp130];
939:           assignment  132    6    2     // tmp132 = self : TYPEOF(self);
940:               call_n  133  131    0     // 
941:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
942:           assignment  138    6  133     // tmp138 = tmp133 : TYPEOF(tmp133);
943:           assignment  130    6  138     // tmp130 = tmp138 : TYPEOF(tmp138);
944:           assignment  131    1  100     // tmp131 = 100: SMALLINT;
945:            remainder  132  130  131     // tmp132 = tmp130 %% tmp131;
946:           assignment  139    6  132     // tmp139 = tmp132 : TYPEOF(tmp132);
947:           assignment  130    6  139     // tmp130 = tmp139 : TYPEOF(tmp139);
948:           assignment  131    1   38     // tmp131 = 38: SMALLINT;
949:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
950:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 954;
951:           assignment  133    3    9     // tmp133 = 2000: NUMBER;
952:           assignment  134    6  133     // tmp134 = tmp133 : TYPEOF(tmp133);
953:             jmp_down    0    3          // goto 956;
954:           assignment  135    3   10     // tmp135 = 1900: NUMBER;
955:           assignment  134    6  135     // tmp134 = tmp135 : TYPEOF(tmp135);
956:             addition  139  139  134     // tmp139 = tmp139 + tmp134;
957:           assignment  136    6  139     // tmp136 = tmp139 : TYPEOF(tmp139);
958:               retval  139               // return tmp139;
959:                  ret                    // ret;
960:          func_decl_n  137    0          // function tmp137 ();
961:                 meta    7    0   22     // function end: 983;
962:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
963:         reg_var_decl  128  137    1     // var tmp128 .. tmp137;
964:               call_n  130    0    0     // 
965:           assignment  131    5    1     // tmp131 = '': STRING;
966:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
967:           assignment  137    6  132     // tmp137 = tmp132 : TYPEOF(tmp132);
968:           assignment  130    5    2     // tmp130 = 'substring': STRING;
969:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
970:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
971:               call_n  133  131    2     // 
972:                 meta    1    1  132     // 
973:           assignment  133    5    3     // tmp133 = 'length': STRING;
974:          prop_getter  134  137  133     // tmp134 = tmp137[tmp133];
975:           assignment  135    1    2     // tmp135 = 2: SMALLINT;
976:         substraction  136  134  135     // tmp136 = tmp134 - tmp135;
977:                 meta    2  136  255     // 
978:           assignment  133    5    3     // tmp133 = 'length': STRING;
979:          prop_getter  134  137  133     // tmp134 = tmp137[tmp133];
980:                 meta    2  134  255     // tmp133 = tmp131 (this_arg = tmp132, tmp136, tmp134);
981:               retval  133               // return tmp133;
982:                  ret                    // ret;
983:          func_decl_n    4    0          // function z ();
984:                 meta    7    0   40     // function end: 1024;
985:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
986:         reg_var_decl  128  143    2     // var tmp128 .. tmp143;
987:          construct_n  130    5    1     // 
988:           assignment  130    5    6     // tmp130 = 'January 1 ': STRING;
989:               call_n  131    0    0     // 
990:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
991:           assignment  133    5    7     // tmp133 = ' 00:00:00': STRING;
992:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
993:                 meta    2  134  255     // 
994:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
995:           assignment  130    5    8     // tmp130 = 'getTime': STRING;
996:          prop_getter  131    9  130     // tmp131 = self[tmp130];
997:           assignment  132    6    9     // tmp132 = self : TYPEOF(self);
998:               call_n  133  131    0     // 
999:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
1000:           assignment  134    5    8     // tmp134 = 'getTime': STRING;
1001:          prop_getter  135  142  134     // tmp135 = tmp142[tmp134];
1002:           assignment  136    6  142     // tmp136 = tmp142 : TYPEOF(tmp142);
1003:               call_n  137  135    0     // 
1004:                 meta    1    1  136     // tmp137 = tmp135 (this_arg = tmp136);
1005:         substraction  138  133  137     // tmp138 = tmp133 - tmp137;
1006:           assignment  143    6  138     // tmp143 = tmp138 : TYPEOF(tmp138);
1007:           assignment  130    5   10     // tmp130 = 'floor': STRING;
1008:          prop_getter  131   11  130     // tmp131 = Math[tmp130];
1009:           assignment  132    6   11     // tmp132 = Math : TYPEOF(Math);
1010:               call_n  133  131    1     // 
1011:                 meta    1    1  132     // 
1012:           assignment  133    6  143     // tmp133 = tmp143 : TYPEOF(tmp143);
1013:           assignment  134    3   12     // tmp134 = 1000: NUMBER;
1014:             division  135  133  134     // tmp135 = tmp133 / tmp134;
1015:           assignment  136    1   60     // tmp136 = 60: SMALLINT;
1016:             division  137  135  136     // tmp137 = tmp135 / tmp136;
1017:           assignment  138    1   60     // tmp138 = 60: SMALLINT;
1018:             division  139  137  138     // tmp139 = tmp137 / tmp138;
1019:           assignment  140    1   24     // tmp140 = 24: SMALLINT;
1020:             division  141  139  140     // tmp141 = tmp139 / tmp140;
1021:                 meta    2  141  255     // tmp133 = tmp131 (this_arg = tmp132, tmp141);
1022:               retval  133               // return tmp133;
1023:                  ret                    // ret;
1024:           array_decl  130    0   28     // 
1025:           assignment  130    5    0     // tmp130 = 'a': STRING;
1026:                 meta    2  130  255     // 
1027:           assignment  130    5    1     // tmp130 = 'A': STRING;
1028:                 meta    2  130  255     // 
1029:           assignment  130    5    2     // tmp130 = 'B': STRING;
1030:                 meta    2  130  255     // 
1031:           assignment  130    5    3     // tmp130 = 'd': STRING;
1032:                 meta    2  130  255     // 
1033:           assignment  130    5    4     // tmp130 = 'D': STRING;
1034:                 meta    2  130  255     // 
1035:           assignment  130    5    5     // tmp130 = 'F': STRING;
1036:                 meta    2  130  255     // 
1037:           assignment  130    5    6     // tmp130 = 'g': STRING;
1038:                 meta    2  130  255     // 
1039:           assignment  130    5    7     // tmp130 = 'G': STRING;
1040:                 meta    2  130  255     // 
1041:           assignment  130    5    8     // tmp130 = 'h': STRING;
1042:                 meta    2  130  255     // 
1043:           assignment  130    5    9     // tmp130 = 'H': STRING;
1044:                 meta    2  130  255     // 
1045:           assignment  130    5   10     // tmp130 = 'i': STRING;
1046:                 meta    2  130  255     // 
1047:           assignment  130    5   11     // tmp130 = 'j': STRING;
1048:                 meta    2  130  255     // 
1049:           assignment  130    5   12     // tmp130 = 'l': STRING;
1050:                 meta    2  130  255     // 
1051:           assignment  130    5   13     // tmp130 = 'L': STRING;
1052:                 meta    2  130  255     // 
1053:           assignment  130    5   14     // tmp130 = 'm': STRING;
1054:                 meta    2  130  255     // 
1055:           assignment  130    5   15     // tmp130 = 'M': STRING;
1056:                 meta    2  130  255     // 
1057:           assignment  130    5   16     // tmp130 = 'n': STRING;
1058:                 meta    2  130  255     // 
1059:           assignment  130    5   17     // tmp130 = 'O': STRING;
1060:                 meta    2  130  255     // 
1061:           assignment  130    5   18     // tmp130 = 'r': STRING;
1062:                 meta    2  130  255     // 
1063:           assignment  130    5   19     // tmp130 = 's': STRING;
1064:                 meta    2  130  255     // 
1065:           assignment  130    5   20     // tmp130 = 'S': STRING;
1066:                 meta    2  130  255     // 
1067:           assignment  130    5   21     // tmp130 = 't': STRING;
1068:                 meta    2  130  255     // 
1069:           assignment  130    5   22     // tmp130 = 'U': STRING;
1070:                 meta    2  130  255     // 
1071:           assignment  130    5   23     // tmp130 = 'w': STRING;
1072:                 meta    2  130  255     // 
1073:           assignment  130    5   24     // tmp130 = 'W': STRING;
1074:                 meta    2  130  255     // 
1075:           assignment  130    5   25     // tmp130 = 'y': STRING;
1076:                 meta    2  130  255     // 
1077:           assignment  130    5   26     // tmp130 = 'Y': STRING;
1078:                 meta    2  130  255     // 
1079:           assignment  130    5   27     // tmp130 = 'z': STRING;
1080:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
1081:           assignment   28    6  130     // switches = tmp130 : TYPEOF(tmp130);
1082:           array_decl  130    0    7     // 
1083:           assignment  130    5   29     // tmp130 = 'Sunday': STRING;
1084:                 meta    2  130  255     // 
1085:           assignment  130    5   30     // tmp130 = 'Monday': STRING;
1086:                 meta    2  130  255     // 
1087:           assignment  130    5   31     // tmp130 = 'Tuesday': STRING;
1088:                 meta    2  130  255     // 
1089:           assignment  130    5    0     // tmp130 = 'Wednesday': STRING;
1090:                 meta    2  130  255     // 
1091:           assignment  130    5    1     // tmp130 = 'Thursday': STRING;
1092:                 meta    2  130  255     // 
1093:           assignment  130    5    2     // tmp130 = 'Friday': STRING;
1094:                 meta    2  130  255     // 
1095:           assignment  130    5    3     // tmp130 = 'Saturday': STRING;
1096:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
1097:           assignment    4    6  130     // daysLong = tmp130 : TYPEOF(tmp130);
1098:           array_decl  130    0    7     // 
1099:           assignment  130    5    5     // tmp130 = 'Sun': STRING;
1100:                 meta    2  130  255     // 
1101:           assignment  130    5    6     // tmp130 = 'Mon': STRING;
1102:                 meta    2  130  255     // 
1103:           assignment  130    5    7     // tmp130 = 'Tue': STRING;
1104:                 meta    2  130  255     // 
1105:           assignment  130    5    8     // tmp130 = 'Wed': STRING;
1106:                 meta    2  130  255     // 
1107:           assignment  130    5    9     // tmp130 = 'Thu': STRING;
1108:                 meta    2  130  255     // 
1109:           assignment  130    5   10     // tmp130 = 'Fri': STRING;
1110:                 meta    2  130  255     // 
1111:           assignment  130    5   11     // tmp130 = 'Sat': STRING;
1112:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
1113:           assignment   12    6  130     // daysShort = tmp130 : TYPEOF(tmp130);
1114:           array_decl  130    0   12     // 
1115:           assignment  130    5   13     // tmp130 = 'Jan': STRING;
1116:                 meta    2  130  255     // 
1117:           assignment  130    5   14     // tmp130 = 'Feb': STRING;
1118:                 meta    2  130  255     // 
1119:           assignment  130    5   15     // tmp130 = 'Mar': STRING;
1120:                 meta    2  130  255     // 
1121:           assignment  130    5   16     // tmp130 = 'Apr': STRING;
1122:                 meta    2  130  255     // 
1123:           assignment  130    5   17     // tmp130 = 'May': STRING;
1124:                 meta    2  130  255     // 
1125:           assignment  130    5   18     // tmp130 = 'Jun': STRING;
1126:                 meta    2  130  255     // 
1127:           assignment  130    5   19     // tmp130 = 'Jul': STRING;
1128:                 meta    2  130  255     // 
1129:           assignment  130    5   20     // tmp130 = 'Aug': STRING;
1130:                 meta    2  130  255     // 
1131:           assignment  130    5   21     // tmp130 = 'Sep': STRING;
1132:                 meta    2  130  255     // 
1133:           assignment  130    5   22     // tmp130 = 'Oct': STRING;
1134:                 meta    2  130  255     // 
1135:           assignment  130    5   23     // tmp130 = 'Nov': STRING;
1136:                 meta    2  130  255     // 
1137:           assignment  130    5   24     // tmp130 = 'Dec': STRING;
1138:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
1139:           assignment   25    6  130     // monthsShort = tmp130 : TYPEOF(tmp130);
1140:           array_decl  130    0   12     // 
1141:           assignment  130    5   26     // tmp130 = 'January': STRING;
1142:                 meta    2  130  255     // 
1143:           assignment  130    5   27     // tmp130 = 'February': STRING;
1144:                 meta    2  130  255     // 
1145:           assignment  130    5   28     // tmp130 = 'March': STRING;
1146:                 meta    2  130  255     // 
1147:           assignment  130    5   29     // tmp130 = 'April': STRING;
1148:                 meta    2  130  255     // 
1149:           assignment  130    5   17     // tmp130 = 'May': STRING;
1150:                 meta    2  130  255     // 
1151:           assignment  130    5   30     // tmp130 = 'June': STRING;
1152:                 meta    2  130  255     // 
1153:           assignment  130    5    0     // tmp130 = 'July': STRING;
1154:                 meta    2  130  255     // 
1155:           assignment  130    5    1     // tmp130 = 'August': STRING;
1156:                 meta    2  130  255     // 
1157:           assignment  130    5    2     // tmp130 = 'September': STRING;
1158:                 meta    2  130  255     // 
1159:           assignment  130    5    3     // tmp130 = 'October': STRING;
1160:                 meta    2  130  255     // 
1161:           assignment  130    5    4     // tmp130 = 'November': STRING;
1162:                 meta    2  130  255     // 
1163:           assignment  130    5    5     // tmp130 = 'December': STRING;
1164:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
1165:           assignment    6    6  130     // monthsLong = tmp130 : TYPEOF(tmp130);
1166:           array_decl  130    0   31     // 
1167:           assignment  130    5    7     // tmp130 = 'st': STRING;
1168:                 meta    2  130  255     // 
1169:           assignment  130    5    8     // tmp130 = 'nd': STRING;
1170:                 meta    2  130  255     // 
1171:           assignment  130    5    9     // tmp130 = 'rd': STRING;
1172:                 meta    2  130  255     // 
1173:           assignment  130    5   10     // tmp130 = 'th': STRING;
1174:                 meta    2  130  255     // 
1175:           assignment  130    5   10     // tmp130 = 'th': STRING;
1176:                 meta    2  130  255     // 
1177:           assignment  130    5   10     // tmp130 = 'th': STRING;
1178:                 meta    2  130  255     // 
1179:           assignment  130    5   10     // tmp130 = 'th': STRING;
1180:                 meta    2  130  255     // 
1181:           assignment  130    5   10     // tmp130 = 'th': STRING;
1182:                 meta    2  130  255     // 
1183:           assignment  130    5   10     // tmp130 = 'th': STRING;
1184:                 meta    2  130  255     // 
1185:           assignment  130    5   10     // tmp130 = 'th': STRING;
1186:                 meta    2  130  255     // 
1187:           assignment  130    5   10     // tmp130 = 'th': STRING;
1188:                 meta    2  130  255     // 
1189:           assignment  130    5   10     // tmp130 = 'th': STRING;
1190:                 meta    2  130  255     // 
1191:           assignment  130    5   10     // tmp130 = 'th': STRING;
1192:                 meta    2  130  255     // 
1193:           assignment  130    5   10     // tmp130 = 'th': STRING;
1194:                 meta    2  130  255     // 
1195:           assignment  130    5   10     // tmp130 = 'th': STRING;
1196:                 meta    2  130  255     // 
1197:           assignment  130    5   10     // tmp130 = 'th': STRING;
1198:                 meta    2  130  255     // 
1199:           assignment  130    5   10     // tmp130 = 'th': STRING;
1200:                 meta    2  130  255     // 
1201:           assignment  130    5   10     // tmp130 = 'th': STRING;
1202:                 meta    2  130  255     // 
1203:           assignment  130    5   10     // tmp130 = 'th': STRING;
1204:                 meta    2  130  255     // 
1205:           assignment  130    5   10     // tmp130 = 'th': STRING;
1206:                 meta    2  130  255     // 
1207:           assignment  130    5    7     // tmp130 = 'st': STRING;
1208:                 meta    2  130  255     // 
1209:           assignment  130    5    8     // tmp130 = 'nd': STRING;
1210:                 meta    2  130  255     // 
1211:           assignment  130    5    9     // tmp130 = 'rd': STRING;
1212:                 meta    2  130  255     // 
1213:           assignment  130    5   10     // tmp130 = 'th': STRING;
1214:                 meta    2  130  255     // 
1215:           assignment  130    5   10     // tmp130 = 'th': STRING;
1216:                 meta    2  130  255     // 
1217:           assignment  130    5    0     // tmp130 = 'th': STRING;
1218:                 meta    2  130  255     // 
1219:           assignment  130    5    0     // tmp130 = 'th': STRING;
1220:                 meta    2  130  255     // 
1221:           assignment  130    5    0     // tmp130 = 'th': STRING;
1222:                 meta    2  130  255     // 
1223:           assignment  130    5    0     // tmp130 = 'th': STRING;
1224:                 meta    2  130  255     // 
1225:           assignment  130    5    0     // tmp130 = 'th': STRING;
1226:                 meta    2  130  255     // 
1227:           assignment  130    5    1     // tmp130 = 'st': STRING;
1228:                 meta    2  130  255     // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, tmp130];
1229:           assignment    2    6  130     // daysSuffix = tmp130 : TYPEOF(tmp130);
1230:         this_binding  130               // tmp130 = this;
1231:           assignment    3    6  130     // self = tmp130 : TYPEOF(tmp130);
1232:    is_false_jmp_down    4    0   13     // if (time == false) goto 1245;
1233:           assignment  130    5    5     // tmp130 = 'getTime': STRING;
1234:          prop_getter  131    3  130     // tmp131 = self[tmp130];
1235:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
1236:               call_n  133  131    0     // 
1237:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
1238:           assignment    6    6  133     // prevTime = tmp133 : TYPEOF(tmp133);
1239:           assignment  130    5    7     // tmp130 = 'setTime': STRING;
1240:          prop_getter  131    3  130     // tmp131 = self[tmp130];
1241:           assignment  132    6    3     // tmp132 = self : TYPEOF(self);
1242:               call_n  133  131    1     // 
1243:                 meta    1    1  132     // 
1244:                 meta    2    4  255     // tmp133 = tmp131 (this_arg = tmp132, time);
1245:           assignment  130    5    8     // tmp130 = 'split': STRING;
1246:          prop_getter  131    9  130     // tmp131 = input[tmp130];
1247:           assignment  132    6    9     // tmp132 = input : TYPEOF(input);
1248:               call_n  133  131    1     // 
1249:                 meta    1    1  132     // 
1250:           assignment  133    5   10     // tmp133 = '': STRING;
1251:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
1252:           assignment   11    6  133     // ia = tmp133 : TYPEOF(tmp133);
1253:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1254:           assignment   12    6  130     // ij = tmp130 : TYPEOF(tmp130);
1255:             jmp_down    0   27          // goto 1282;
1256:          prop_getter  130   11   12     // tmp130 = ia[ij];
1257:           assignment  131    5   13     // tmp131 = '\': STRING;
1258:          equal_value  132  130  131     // tmp132 = tmp130 == tmp131;
1259:    is_false_jmp_down  132    0   10     // if (tmp132 == false) goto 1269;
1260:           assignment  130    5   14     // tmp130 = 'splice': STRING;
1261:          prop_getter  131   11  130     // tmp131 = ia[tmp130];
1262:           assignment  132    6   11     // tmp132 = ia : TYPEOF(ia);
1263:               call_n  133  131    2     // 
1264:                 meta    1    1  132     // 
1265:                 meta    2   12  255     // 
1266:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
1267:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, ij, tmp133);
1268:             jmp_down    0   13          // goto 1281;
1269:               call_n  130   15    2     // 
1270:                 meta    2   16  255     // 
1271:          prop_getter  130   11   12     // tmp130 = ia[ij];
1272:                 meta    2  130  255     // tmp130 = arrayExists (switches, tmp130);
1273:    is_false_jmp_down  130    0    8     // if (tmp130 == false) goto 1281;
1274:               call_n  131   17    1     // 
1275:                 meta    1    2  255     // 
1276:          prop_getter  131   11   12     // tmp131 = ia[ij];
1277:           assignment  132    5   18     // tmp132 = '()': STRING;
1278:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
1279:                 meta    2  133  255     // tmp131 = eval (['direct call to eval' form], tmp133);
1280:          prop_setter    0    1  131     // ia[ij] = tmp131;
1281:            post_incr  130    1          // tmp130 = ij++;
1282:          prop_getter  131    0    1     // tmp131 = ia[ij];
1283:       is_true_jmp_up  131    0   27     // if (tmp131) goto 1256;
1284:    is_false_jmp_down    2    0    7     // if (prevTime == false) goto 1291;
1285:           assignment  130    5    3     // tmp130 = 'setTime': STRING;
1286:          prop_getter  131    4  130     // tmp131 = self[tmp130];
1287:           assignment  132    6    4     // tmp132 = self : TYPEOF(self);
1288:               call_n  133  131    1     // 
1289:                 meta    1    1  132     // 
1290:                 meta    2    2  255     // tmp133 = tmp131 (this_arg = tmp132, prevTime);
1291:           assignment  130    5    5     // tmp130 = 'join': STRING;
1292:          prop_getter  131    0  130     // tmp131 = ia[tmp130];
1293:           assignment  132    6    0     // tmp132 = ia : TYPEOF(ia);
1294:               call_n  133  131    1     // 
1295:                 meta    1    1  132     // 
1296:           assignment  133    5    6     // tmp133 = '': STRING;
1297:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
1298:               retval  133               // return tmp133;
1299:                  ret                    // ret;
1300:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
1301:          construct_n  130    7    1     // 
1302:           assignment  130    5    8     // tmp130 = '1/1/2007 1:11:11': STRING;
1303:                 meta    2  130  255     // tmp130 = new Date (tmp130);
1304:           assignment    9    6  130     // date = tmp130 : TYPEOF(tmp130);
1305:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
1306:           assignment   10    6  130     // i = tmp130 : TYPEOF(tmp130);
1307:             jmp_down    0   31          // goto 1338;
1308:           assignment  130    5   11     // tmp130 = 'formatDate': STRING;
1309:          prop_getter  131    9  130     // tmp131 = date[tmp130];
1310:           assignment  132    6    9     // tmp132 = date : TYPEOF(date);
1311:               call_n  133  131    1     // 
1312:                 meta    1    1  132     // 
1313:           assignment  133    5   12     // tmp133 = 'Y-m-d': STRING;
1314:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
1315:           assignment   13    6  133     // shortFormat = tmp133 : TYPEOF(tmp133);
1316:           assignment  130    5   11     // tmp130 = 'formatDate': STRING;
1317:          prop_getter  131    9  130     // tmp131 = date[tmp130];
1318:           assignment  132    6    9     // tmp132 = date : TYPEOF(date);
1319:               call_n  133  131    1     // 
1320:                 meta    1    1  132     // 
1321:           assignment  133    5   14     // tmp133 = 'l, F d, Y g:i:s A': STRING;
1322:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
1323:           assignment   15    6  133     // longFormat = tmp133 : TYPEOF(tmp133);
1324:           assignment  130    5    3     // tmp130 = 'setTime': STRING;
1325:          prop_getter  131    9  130     // tmp131 = date[tmp130];
1326:           assignment  132    6    9     // tmp132 = date : TYPEOF(date);
1327:               call_n  133  131    1     // 
1328:                 meta    1    1  132     // 
1329:           assignment  133    5   16     // tmp133 = 'getTime': STRING;
1330:          prop_getter  134    9  133     // tmp134 = date[tmp133];
1331:           assignment  135    6    9     // tmp135 = date : TYPEOF(date);
1332:               call_n  136  134    0     // 
1333:                 meta    1    1  135     // tmp136 = tmp134 (this_arg = tmp135);
1334:           assignment  137    3   17     // tmp137 = 84266956: NUMBER;
1335:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
1336:                 meta    2  138  255     // 
1337:             pre_incr  134   10          // tmp134 = ++i;
1338:           assignment  135    6   10     // tmp135 = i : TYPEOF(i);
1339:           assignment  136    3   18     // tmp136 = 500: NUMBER;
1340:            less_than  137  135  136     // tmp137 = tmp135 < tmp136;
1341:       is_true_jmp_up  137    0   33     // if (tmp137) goto 1308;
1342:                  ret                    // ret;
ICE: Assertion 'lit_cp.packed_value != MEM_CP_NULL' failed at /home/john/git/jerry/jerry-core/lit/lit-literal.cpp(lit_get_literal_by_cp):552.
Error: ERR_FAILED_INTERNAL_ASSERTION
