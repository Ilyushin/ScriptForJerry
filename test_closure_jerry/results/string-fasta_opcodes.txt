// // The Great Computer Language Shootout
// 
// //  http://shootout.alioth.debian.org
// 
// //
// 
// //  Contributed by Ian Osgood
// 
// var last = 42, A = 3877, C = 29573, M = 139968;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    1   42     // tmp130 = 42: SMALLINT;
  3:           assignment  254    6  130     // last = tmp130 : TYPEOF(tmp130);
  4:           assignment  131    3  254     // tmp131 = 3877: NUMBER;
  5:           assignment  254    6  131     // A = tmp131 : TYPEOF(tmp131);
  6:           assignment  132    3  254     // tmp132 = 29573: NUMBER;
  7:           assignment  254    6  132     // C = tmp132 : TYPEOF(tmp132);
  8:           assignment  133    3  254     // tmp133 = 139968: NUMBER;
  9:           assignment  254    6  133     // M = tmp133 : TYPEOF(tmp133);
// function rand(max) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//   last = (last * A + C) % M;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    6  254     // tmp130 = last : TYPEOF(last);
  6:       multiplication  131  130  254     // tmp131 = tmp130 * A;
  7:             addition  132  131  254     // tmp132 = tmp131 + C;
  8:            remainder  133  132  254     // tmp133 = tmp132 %% M;
  9:           assignment  254    6  133     // last = tmp133 : TYPEOF(tmp133);
//   return max * last / M;
 10:           assignment  130    6  254     // tmp130 = max : TYPEOF(max);
 11:       multiplication  131  130  254     // tmp131 = tmp130 * last;
 12:             division  132  131  254     // tmp132 = tmp131 / M;
 13:               retval  132               // return tmp132;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  133    0     // var tmp128 .. tmp133; // REWRITE
 14:                  ret                    // ret;
  2:                 meta    7    0   13     // function end: 15; // REWRITE
// var ALU =
//   "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG" +
 10:           assignment  130    5  254     // tmp130 = 'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG': STRING;
//   "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA" +
 11:           assignment  131    5  254     // tmp131 = 'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA': STRING;
 12:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
//   "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT" +
 13:           assignment  133    5  254     // tmp133 = 'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT': STRING;
 14:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
//   "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA" +
 15:           assignment  135    5  254     // tmp135 = 'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA': STRING;
 16:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
//   "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG" +
 17:           assignment  137    5  254     // tmp137 = 'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG': STRING;
 18:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
//   "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC" +
 19:           assignment  139    5  254     // tmp139 = 'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC': STRING;
 20:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
//   "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";
 21:           assignment  141    5  254     // tmp141 = 'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA': STRING;
 22:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 23:           assignment  254    6  142     // ALU = tmp142 : TYPEOF(tmp142);
// var IUB = {
 24:             obj_decl  253  253  255     // 
//   a:0.27, c:0.12, g:0.12, t:0.27,
 25:           assignment  130    3  254     // tmp130 = 0.27: NUMBER;
 26:           assignment  131    5  254     // tmp131 = 'a': STRING;
 27:                 meta    3  131  130     // 
 28:           assignment  130    3  254     // tmp130 = 0.12: NUMBER;
 29:           assignment  131    5  254     // tmp131 = 'c': STRING;
 30:                 meta    3  131  130     // 
 31:           assignment  130    3  254     // tmp130 = 0.12: NUMBER;
 32:           assignment  131    5  254     // tmp131 = 'g': STRING;
 33:                 meta    3  131  130     // 
 34:           assignment  130    3  254     // tmp130 = 0.27: NUMBER;
 35:           assignment  131    5  254     // tmp131 = 't': STRING;
 36:                 meta    3  131  130     // 
//   B:0.02, D:0.02, H:0.02, K:0.02,
 37:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 38:           assignment  131    5  254     // tmp131 = 'B': STRING;
 39:                 meta    3  131  130     // 
 40:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 41:           assignment  131    5  254     // tmp131 = 'D': STRING;
 42:                 meta    3  131  130     // 
 43:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 44:           assignment  131    5  254     // tmp131 = 'H': STRING;
 45:                 meta    3  131  130     // 
 46:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 47:           assignment  131    5  254     // tmp131 = 'K': STRING;
 48:                 meta    3  131  130     // 
//   M:0.02, N:0.02, R:0.02, S:0.02,
 49:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 50:           assignment  131    5  254     // tmp131 = 'M': STRING;
 51:                 meta    3  131  130     // 
 52:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 53:           assignment  131    5  254     // tmp131 = 'N': STRING;
 54:                 meta    3  131  130     // 
 55:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 56:           assignment  131    5  254     // tmp131 = 'R': STRING;
 57:                 meta    3  131  130     // 
 58:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 59:           assignment  131    5  254     // tmp131 = 'S': STRING;
 60:                 meta    3  131  130     // 
//   V:0.02, W:0.02, Y:0.02
 61:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 62:           assignment  131    5  254     // tmp131 = 'V': STRING;
 63:                 meta    3  131  130     // 
 64:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
 65:           assignment  131    5  254     // tmp131 = 'W': STRING;
 66:                 meta    3  131  130     // 
 67:           assignment  130    3  254     // tmp130 = 0.02: NUMBER;
// }
 68:           assignment  131    5  254     // tmp131 = 'Y': STRING;
 69:                 meta    3  131  130     // 
 24:             obj_decl  130    0   15     //  // REWRITE
// var HomoSap = {
 70:           assignment  254    6  130     // IUB = tmp130 : TYPEOF(tmp130);
 71:             obj_decl  253  253  255     // 
//   a: 0.3029549426680,
 72:           assignment  130    3  254     // tmp130 = 0.302954942668: NUMBER;
 73:           assignment  131    5  254     // tmp131 = 'a': STRING;
 74:                 meta    3  131  130     // 
//   c: 0.1979883004921,
 75:           assignment  130    3  254     // tmp130 = 0.1979883004921: NUMBER;
 76:           assignment  131    5  254     // tmp131 = 'c': STRING;
 77:                 meta    3  131  130     // 
//   g: 0.1975473066391,
 78:           assignment  130    3  254     // tmp130 = 0.1975473066391: NUMBER;
 79:           assignment  131    5  254     // tmp131 = 'g': STRING;
 80:                 meta    3  131  130     // 
//   t: 0.3015094502008
 81:           assignment  130    3  254     // tmp130 = 0.3015094502008: NUMBER;
// }
 82:           assignment  131    5  254     // tmp131 = 't': STRING;
 83:                 meta    3  131  130     // 
 71:             obj_decl  130    0    4     //  // REWRITE
// function makeCumulative(table) {
 84:           assignment  254    6  130     // HomoSap = tmp130 : TYPEOF(tmp130);
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//   var last = null;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    0    2     // tmp130 = null: SIMPLE;
  6:           assignment  254    6  130     // last = tmp130 : TYPEOF(tmp130);
//   for (var c in table) {
  7:               for_in  254  253  253     // for_in (table);
  8:           assignment  254    6  129     // c = tmp129 : TYPEOF(tmp129);
//     if (last) table[c] += table[last];
  9:    is_false_jmp_down  254  253  253     // if (last == false) goto 65030;
 10:          prop_getter  130  254  254     // tmp130 = table[c];
 10:          prop_getter  131  254  254     // tmp131 = table[last];
 11:          prop_getter  132  254  254     // tmp132 = table[c];
 12:             addition  132  132  131     // tmp132 = tmp132 + tmp131;
 13:          prop_setter  254  254  132     // table[c] = tmp132;
//     last = c;
  9:    is_false_jmp_down  254    0    5     // if (last == false) goto 14; // REWRITE
 14:           assignment  254    6  254     // last = c : TYPEOF(c);
 15:           assignment  130    6  254     // tmp130 = c : TYPEOF(c);
//   }
  7:               for_in  254    0    9     // for_in (table); // REWRITE
 16:                 meta   13  255  255     // end for-in;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  134    2     // var tmp128 .. tmp134; // REWRITE
 17:                  ret                    // ret;
  2:                 meta    7    0   16     // function end: 18; // REWRITE
// function fastaRepeat(n, seq) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var seqi = 0, lenOut = 60;
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // seqi = tmp130 : TYPEOF(tmp130);
  8:           assignment  131    1   60     // tmp131 = 60: SMALLINT;
  9:           assignment  254    6  131     // lenOut = tmp131 : TYPEOF(tmp131);
//   while (n>0) {
 10:             jmp_down  253  253          // goto 65031;
//     if (n<lenOut) lenOut = n;
 11:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 12:            less_than  131  130  254     // tmp131 = tmp130 < lenOut;
 13:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65034;
 14:           assignment  254    6  254     // lenOut = n : TYPEOF(n);
 15:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
//     if (seqi + lenOut < seq.length) {
 13:    is_false_jmp_down  131    0    3     // if (tmp131 == false) goto 16; // REWRITE
 16:           assignment  130    6  254     // tmp130 = seqi : TYPEOF(seqi);
 17:             addition  131  130  254     // tmp131 = tmp130 + lenOut;
 18:           assignment  132    5  254     // tmp132 = 'length': STRING;
 19:          prop_getter  133  254  132     // tmp133 = seq[tmp132];
 20:            less_than  134  131  133     // tmp134 = tmp131 < tmp133;
 21:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65042;
//       ret += seq.substring(seqi, seqi+lenOut).length;
 22:           assignment  130    5  254     // tmp130 = 'substring': STRING;
 23:          prop_getter  131  254  130     // tmp131 = seq[tmp130];
 24:           assignment  132    6  254     // tmp132 = seq : TYPEOF(seq);
 25:               call_n  253  131  253     // 
 26:                 meta    1    1  132     // 
 27:                 meta    2  254  255     // 
 28:           assignment  133    6  254     // tmp133 = seqi : TYPEOF(seqi);
 29:             addition  134  133  254     // tmp134 = tmp133 + lenOut;
 30:                 meta    2  134  255     // 
 25:               call_n  133  131    2     //  // REWRITE
 31:           assignment  134    5  254     // tmp134 = 'length': STRING;
 32:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 33:             addition  254  254  135     // ret = ret + tmp135;
 34:           assignment  136    6  254     // tmp136 = ret : TYPEOF(ret);
//       seqi += lenOut;
 35:             addition  254  254  254     // seqi = seqi + lenOut;
 36:           assignment  130    6  254     // tmp130 = seqi : TYPEOF(seqi);
//     } else {
 37:             jmp_down  253  253          // goto 65058;
 21:    is_false_jmp_down  134    0   17     // if (tmp134 == false) goto 38; // REWRITE
//       var s = seq.substring(seqi);
 38:           assignment  130    5  254     // tmp130 = 'substring': STRING;
 39:          prop_getter  131  254  130     // tmp131 = seq[tmp130];
 40:           assignment  132    6  254     // tmp132 = seq : TYPEOF(seq);
 41:               call_n  253  131  253     // 
 42:                 meta    1    1  132     // 
 43:                 meta    2  254  255     // 
 41:               call_n  133  131    1     //  // REWRITE
 44:           assignment  254    6  133     // s = tmp133 : TYPEOF(tmp133);
//       seqi = lenOut - s.length;
 45:           assignment  130    6  254     // tmp130 = lenOut : TYPEOF(lenOut);
 46:           assignment  131    5  254     // tmp131 = 'length': STRING;
 47:          prop_getter  132  254  131     // tmp132 = s[tmp131];
 48:         substraction  133  130  132     // tmp133 = tmp130 - tmp132;
 49:           assignment  254    6  133     // seqi = tmp133 : TYPEOF(tmp133);
//       ret += (s + seq.substring(0, seqi)).length;
 50:           assignment  130    6  254     // tmp130 = s : TYPEOF(s);
 51:           assignment  131    5  254     // tmp131 = 'substring': STRING;
 52:          prop_getter  132  254  131     // tmp132 = seq[tmp131];
 53:           assignment  133    6  254     // tmp133 = seq : TYPEOF(seq);
 54:               call_n  253  132  253     // 
 55:                 meta    1    1  133     // 
 56:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 57:                 meta    2  134  255     // 
 58:                 meta    2  254  255     // 
 54:               call_n  134  132    2     //  // REWRITE
 59:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
 60:           assignment  136    5  254     // tmp136 = 'length': STRING;
 61:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
 62:             addition  254  254  137     // ret = ret + tmp137;
 63:           assignment  138    6  254     // tmp138 = ret : TYPEOF(ret);
//     }
 37:             jmp_down    0   27          // goto 64; // REWRITE
//     n -= lenOut;
 64:         substraction  254  254  254     // n = n - lenOut;
 65:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
//   }
 10:             jmp_down    0   56          // goto 66; // REWRITE
 66:           assignment  131    6  254     // tmp131 = n : TYPEOF(n);
 67:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 68:         greater_than  133  131  132     // tmp133 = tmp131 > tmp132;
 69:       is_true_jmp_up  133    0   58     // if (tmp133) goto 11;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  141    3     // var tmp128 .. tmp141; // REWRITE
 70:                  ret                    // ret;
  3:                 meta    7    0   68     // function end: 71; // REWRITE
// function fastaRandom(n, table) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   var line = new Array(60);
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:          construct_n  253  254  253     // 
  7:           assignment  130    1   60     // tmp130 = 60: SMALLINT;
  8:                 meta    2  130  255     // 
  6:          construct_n  130  254    1     //  // REWRITE
  9:           assignment  254    6  130     // line = tmp130 : TYPEOF(tmp130);
//   makeCumulative(table);
 10:               call_n  253  254  253     // 
 11:                 meta    2  254  255     // 
 10:               call_n  130  254    1     //  // REWRITE
//   while (n>0) {
 12:             jmp_down  253  253          // goto 65033;
//     if (n<line.length) line = new Array(n);
 13:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 14:           assignment  131    5  254     // tmp131 = 'length': STRING;
 15:          prop_getter  132  254  131     // tmp132 = line[tmp131];
 16:            less_than  133  130  132     // tmp133 = tmp130 < tmp132;
 17:    is_false_jmp_down  133  253  253     // if (tmp133 == false) goto 65038;
 18:          construct_n  253  254  253     // 
 19:                 meta    2  254  255     // 
 18:          construct_n  130  254    1     //  // REWRITE
 20:           assignment  254    6  130     // line = tmp130 : TYPEOF(tmp130);
//     for (var i=0; i<line.length; i++) {
 17:    is_false_jmp_down  133    0    4     // if (tmp133 == false) goto 21; // REWRITE
 21:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 22:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 23:             jmp_down  253  253          // goto 65044;
//       var r = rand(1);
 24:               call_n  253  254  253     // 
 25:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 26:                 meta    2  130  255     // 
 24:               call_n  130  254    1     //  // REWRITE
 27:           assignment  254    6  130     // r = tmp130 : TYPEOF(tmp130);
//       for (var c in table) {
 28:               for_in  254  253  253     // for_in (table);
 29:           assignment  254    6  129     // c = tmp129 : TYPEOF(tmp129);
//         if (r < table[c]) {
 30:           assignment  130    6  254     // tmp130 = r : TYPEOF(r);
 31:          prop_getter  131  254  254     // tmp131 = table[c];
 32:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
 33:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65054;
//           line[i] = c;
 34:          prop_getter  130  254  254     // tmp130 = line[i];
 34:          prop_setter  254  254  254     // line[i] = c;
 35:           assignment  131    6  254     // tmp131 = c : TYPEOF(c);
//           break;
 36:   jmp_break_continue  255  255          // goto_nested 65571;
//         }
//       }
 33:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 37; // REWRITE
 28:               for_in  254    0    9     // for_in (table); // REWRITE
 37:                 meta   13  255  255     // end for-in;
 36:   jmp_break_continue    0    2          // goto_nested 38; // REWRITE
//     }
 38:            post_incr  130  254          // tmp130 = i++;
 23:             jmp_down    0   16          // goto 39; // REWRITE
 39:           assignment  131    6  254     // tmp131 = i : TYPEOF(i);
 40:           assignment  132    5  254     // tmp132 = 'length': STRING;
 41:          prop_getter  133  254  132     // tmp133 = line[tmp132];
 42:            less_than  134  131  133     // tmp134 = tmp131 < tmp133;
 43:       is_true_jmp_up  134    0   19     // if (tmp134) goto 24;
//     ret += line.join('').length;
 44:           assignment  130    5  254     // tmp130 = 'join': STRING;
 45:          prop_getter  131  254  130     // tmp131 = line[tmp130];
 46:           assignment  132    6  254     // tmp132 = line : TYPEOF(line);
 47:               call_n  253  131  253     // 
 48:                 meta    1    1  132     // 
 49:           assignment  133    5  254     // tmp133 = '': STRING;
 50:                 meta    2  133  255     // 
 47:               call_n  133  131    1     //  // REWRITE
 51:           assignment  134    5  254     // tmp134 = 'length': STRING;
 52:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 53:             addition  254  254  135     // ret = ret + tmp135;
 54:           assignment  136    6  254     // tmp136 = ret : TYPEOF(ret);
//     n -= line.length;
 55:           assignment  130    5  254     // tmp130 = 'length': STRING;
 56:          prop_getter  131  254  130     // tmp131 = line[tmp130];
 57:         substraction  254  254  131     // n = n - tmp131;
 58:           assignment  132    6  254     // tmp132 = n : TYPEOF(n);
//   }
 12:             jmp_down    0   47          // goto 59; // REWRITE
 59:           assignment  133    6  254     // tmp133 = n : TYPEOF(n);
 60:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 61:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
 62:       is_true_jmp_up  135    0   49     // if (tmp135) goto 13;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  140    4     // var tmp128 .. tmp140; // REWRITE
 63:                  ret                    // ret;
  3:                 meta    7    0   61     // function end: 64; // REWRITE
// var ret = 0;
 85:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 86:           assignment  254    6  130     // ret = tmp130 : TYPEOF(tmp130);
// var count = 7;
 87:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
 88:           assignment  254    6  130     // count = tmp130 : TYPEOF(tmp130);
// fastaRepeat(2*count*100000, ALU);
 89:               call_n  253  254  253     // 
 90:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 91:       multiplication  131  130  254     // tmp131 = tmp130 * count;
 92:           assignment  132    3  254     // tmp132 = 100000: NUMBER;
 93:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
 94:                 meta    2  133  255     // 
 95:                 meta    2  254  255     // 
 89:               call_n  130  254    2     //  // REWRITE
// fastaRandom(3*count*1000, IUB);
 96:               call_n  253  254  253     // 
 97:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 98:       multiplication  131  130  254     // tmp131 = tmp130 * count;
 99:           assignment  132    3  254     // tmp132 = 1000: NUMBER;
100:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
101:                 meta    2  133  255     // 
102:                 meta    2  254  255     // 
 96:               call_n  130  254    2     //  // REWRITE
// fastaRandom(5*count*1000, HomoSap);
103:               call_n  253  254  253     // 
104:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
105:       multiplication  131  130  254     // tmp131 = tmp130 * count;
106:           assignment  132    3  254     // tmp132 = 1000: NUMBER;
107:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
108:                 meta    2  133  255     // 
109:                 meta    2  254  255     // 
103:               call_n  130  254    2     //  // REWRITE
// var expected = 1456000;
110:           assignment  130    3  254     // tmp130 = 1456000: NUMBER;
111:           assignment  254    6  130     // expected = tmp130 : TYPEOF(tmp130);
// if (ret != expected)
112:           assignment  130    6  254     // tmp130 = ret : TYPEOF(ret);
113:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
114:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65135;
//     throw "ERROR: bad result: expected " + expected + " but got " + ret;
115:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
116:             addition  131  130  254     // tmp131 = tmp130 + expected;
117:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
118:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
119:             addition  134  133  254     // tmp134 = tmp133 + ret;
120:          throw_value  134               // throw tmp134;
// 
114:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 121; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  142    0     // var tmp128 .. tmp142; // REWRITE
121:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 12] last : STRING
0x8a54d0 [  8] A : STRING
0x8a54d8 [ 12] 3877 : NUMBER
0x8a54e4 [  8] C : STRING
0x8a54ec [ 12] 29573 : NUMBER
0x8a54f8 [  8] M : STRING
0x8a5504 [ 12] 139968 : NUMBER
0x8a5510 [ 12] rand : STRING
0x8a551c [  4] max : MAGIC STRING [id=94] 
0x8a5520 [ 12] ALU : STRING
0x8a552c [ 48] GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG : STRING
0x8a5560 [ 48] GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA : STRING
0x8a5594 [ 48] CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT : STRING
0x8a55c8 [ 48] ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA : STRING
0x8a55f8 [ 48] GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG : STRING
0x8a562c [ 48] AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC : STRING
0x8a5660 [ 44] AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA : STRING
0x8a5690 [ 12] IUB : STRING
0x8a569c [  8] a : STRING
0x8a56a4 [ 12] 0.27 : NUMBER
0x8a56b0 [  8] c : STRING
0x8a56b8 [ 12] 0.12 : NUMBER
0x8a56c8 [  4] g : MAGIC STRING [id=206] 
0x8a56cc [  8] t : STRING
0x8a56d4 [  8] B : STRING
0x8a56dc [ 12] 0.02 : NUMBER
0x8a56e8 [  8] D : STRING
0x8a56f0 [  8] H : STRING
0x8a56f8 [  8] K : STRING
0x8a5704 [  8] N : STRING
0x8a570c [  8] R : STRING
0x8a5714 [  8] S : STRING
0x8a571c [  8] V : STRING
0x8a5724 [  8] W : STRING
0x8a572c [  8] Y : STRING
0x8a5734 [ 16] HomoSap : STRING
0x8a5748 [ 12] 0.302954942668 : NUMBER
0x8a5754 [ 12] 0.1979883004921 : NUMBER
0x8a5760 [ 12] 0.1975473066391 : NUMBER
0x8a576c [ 12] 0.3015094502008 : NUMBER
0x8a5778 [ 20] makeCumulative : STRING
0x8a5790 [ 12] table : STRING
0x8a579c [ 20] fastaRepeat : STRING
0x8a57b0 [  8] n : STRING
0x8a57b8 [ 12] seq : STRING
0x8a57c8 [ 12] seqi : STRING
0x8a57d4 [ 12] lenOut : STRING
0x8a57e0 [  4] length : MAGIC STRING [id=15] 
0x8a57e4 [ 12] ret : STRING
0x8a57f0 [  4] substring : MAGIC STRING [id=137] 
0x8a57f4 [  8] s : STRING
0x8a57fc [ 20] fastaRandom : STRING
0x8a5814 [ 12] line : STRING
0x8a5820 [  4] Array : MAGIC STRING [id=29] 
0x8a5824 [  4] i : MAGIC STRING [id=207] 
0x8a5828 [  8] r : STRING
0x8a5830 [  4] join : MAGIC STRING [id=112] 
0x8a5834 [  4]  : MAGIC STRING [id=225] 
0x8a5838 [ 12] count : STRING
0x8a5848 [ 12] 100000 : NUMBER
0x8a5854 [ 12] 1000 : NUMBER
0x8a5860 [ 16] expected : STRING
0x8a5870 [ 12] 1456000 : NUMBER
0x8a587c [ 36] ERROR: bad result: expected  : STRING
0x8a58a4 [ 16]  but got  : STRING
0x8a58b4 [ 12]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  142    0     // var tmp128 .. tmp142;
  2:             var_decl    0               // var last;
  3:             var_decl    1               // var A;
  4:             var_decl    2               // var C;
  5:             var_decl    3               // var M;
  6:             var_decl    4               // var ALU;
  7:             var_decl    5               // var IUB;
  8:             var_decl    6               // var HomoSap;
  9:             var_decl    7               // var ret;
 10:             var_decl    8               // var count;
 11:             var_decl    9               // var expected;
 12:          func_decl_n   10    1          // 
 13:                 meta    2   11  255     // function rand (max);
 14:                 meta    7    0   13     // function end: 27;
 15:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 16:         reg_var_decl  128  133    0     // var tmp128 .. tmp133;
 17:           assignment  130    6    0     // tmp130 = last : TYPEOF(last);
 18:       multiplication  131  130    1     // tmp131 = tmp130 * A;
 19:             addition  132  131    2     // tmp132 = tmp131 + C;
 20:            remainder  133  132    3     // tmp133 = tmp132 %% M;
 21:           assignment    0    6  133     // last = tmp133 : TYPEOF(tmp133);
 22:           assignment  130    6   11     // tmp130 = max : TYPEOF(max);
 23:       multiplication  131  130    0     // tmp131 = tmp130 * last;
 24:             division  132  131    3     // tmp132 = tmp131 / M;
 25:               retval  132               // return tmp132;
 26:                  ret                    // ret;
 27:          func_decl_n   12    1          // 
 28:                 meta    2   13  255     // function makeCumulative (table);
 29:                 meta    7    0   16     // function end: 45;
 30:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 31:         reg_var_decl  128  134    2     // var tmp128 .. tmp134;
 32:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 33:           assignment  133    6  130     // tmp133 = tmp130 : TYPEOF(tmp130);
 34:               for_in   13    0    9     // for_in (table);
 35:           assignment  134    6  129     // tmp134 = tmp129 : TYPEOF(tmp129);
 36:    is_false_jmp_down  133    0    5     // if (tmp133 == false) goto 41;
 37:          prop_getter  131   13  133     // tmp131 = table[tmp133];
 38:          prop_getter  132   13  134     // tmp132 = table[tmp134];
 39:             addition  132  132  131     // tmp132 = tmp132 + tmp131;
 40:          prop_setter   13  134  132     // table[tmp134] = tmp132;
 41:           assignment  133    6  134     // tmp133 = tmp134 : TYPEOF(tmp134);
 42:           assignment  130    6  134     // tmp130 = tmp134 : TYPEOF(tmp134);
 43:                 meta   13  255  255     // end for-in;
 44:                  ret                    // ret;
 45:          func_decl_n   14    2          // 
 46:                 meta    2   15  255     // 
 47:                 meta    2   16  255     // function fastaRepeat (n, seq);
 48:                 meta    7    0   68     // function end: 116;
 49:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 50:         reg_var_decl  128  141    3     // var tmp128 .. tmp141;
 51:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 52:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
 53:           assignment  131    1   60     // tmp131 = 60: SMALLINT;
 54:           assignment  140    6  131     // tmp140 = tmp131 : TYPEOF(tmp131);
 55:             jmp_down    0   56          // goto 111;
 56:           assignment  130    6   15     // tmp130 = n : TYPEOF(n);
 57:            less_than  131  130  140     // tmp131 = tmp130 < tmp140;
 58:    is_false_jmp_down  131    0    3     // if (tmp131 == false) goto 61;
 59:           assignment  140    6   15     // tmp140 = n : TYPEOF(n);
 60:           assignment  130    6   15     // tmp130 = n : TYPEOF(n);
 61:           assignment  130    6  139     // tmp130 = tmp139 : TYPEOF(tmp139);
 62:             addition  131  130  140     // tmp131 = tmp130 + tmp140;
 63:           assignment  132    5   17     // tmp132 = 'length': STRING;
 64:          prop_getter  133    0  132     // tmp133 = seq[tmp132];
 65:            less_than  134  131  133     // tmp134 = tmp131 < tmp133;
 66:    is_false_jmp_down  134    0   17     // if (tmp134 == false) goto 83;
 67:           assignment  130    5    1     // tmp130 = 'substring': STRING;
 68:          prop_getter  131    0  130     // tmp131 = seq[tmp130];
 69:           assignment  132    6    0     // tmp132 = seq : TYPEOF(seq);
 70:               call_n  133  131    2     // 
 71:                 meta    1    1  132     // 
 72:                 meta    2  139  255     // 
 73:           assignment  133    6  139     // tmp133 = tmp139 : TYPEOF(tmp139);
 74:             addition  134  133  140     // tmp134 = tmp133 + tmp140;
 75:                 meta    2  134  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139, tmp134);
 76:           assignment  134    5    2     // tmp134 = 'length': STRING;
 77:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
 78:             addition    3    3  135     // ret = ret + tmp135;
 79:           assignment  136    6    3     // tmp136 = ret : TYPEOF(ret);
 80:             addition  139  139  140     // tmp139 = tmp139 + tmp140;
 81:           assignment  130    6  139     // tmp130 = tmp139 : TYPEOF(tmp139);
 82:             jmp_down    0   27          // goto 109;
 83:           assignment  130    5    1     // tmp130 = 'substring': STRING;
 84:          prop_getter  131    0  130     // tmp131 = seq[tmp130];
 85:           assignment  132    6    0     // tmp132 = seq : TYPEOF(seq);
 86:               call_n  133  131    1     // 
 87:                 meta    1    1  132     // 
 88:                 meta    2  139  255     // tmp133 = tmp131 (this_arg = tmp132, tmp139);
 89:           assignment  141    6  133     // tmp141 = tmp133 : TYPEOF(tmp133);
 90:           assignment  130    6  140     // tmp130 = tmp140 : TYPEOF(tmp140);
 91:           assignment  131    5    2     // tmp131 = 'length': STRING;
 92:          prop_getter  132  141  131     // tmp132 = tmp141[tmp131];
 93:         substraction  133  130  132     // tmp133 = tmp130 - tmp132;
 94:           assignment  139    6  133     // tmp139 = tmp133 : TYPEOF(tmp133);
 95:           assignment  130    6  141     // tmp130 = tmp141 : TYPEOF(tmp141);
 96:           assignment  131    5    1     // tmp131 = 'substring': STRING;
 97:          prop_getter  132    0  131     // tmp132 = seq[tmp131];
 98:           assignment  133    6    0     // tmp133 = seq : TYPEOF(seq);
 99:               call_n  134  132    2     // 
100:                 meta    1    1  133     // 
101:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
102:                 meta    2  134  255     // 
103:                 meta    2  139  255     // tmp134 = tmp132 (this_arg = tmp133, tmp134, tmp139);
104:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
105:           assignment  136    5    2     // tmp136 = 'length': STRING;
106:          prop_getter  137  135  136     // tmp137 = tmp135[tmp136];
107:             addition    3    3  137     // ret = ret + tmp137;
108:           assignment  138    6    3     // tmp138 = ret : TYPEOF(ret);
109:         substraction    4    4  140     // n = n - tmp140;
110:           assignment  130    6    4     // tmp130 = n : TYPEOF(n);
111:           assignment  131    6    4     // tmp131 = n : TYPEOF(n);
112:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
113:         greater_than  133  131  132     // tmp133 = tmp131 > tmp132;
114:       is_true_jmp_up  133    0   58     // if (tmp133) goto 56;
115:                  ret                    // ret;
116:          func_decl_n    5    2          // 
117:                 meta    2    4  255     // 
118:                 meta    2    6  255     // function fastaRandom (n, table);
119:                 meta    7    0   61     // function end: 180;
120:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
121:         reg_var_decl  128  140    4     // var tmp128 .. tmp140;
122:          construct_n  130    7    1     // 
123:           assignment  130    1   60     // tmp130 = 60: SMALLINT;
124:                 meta    2  130  255     // tmp130 = new Array (tmp130);
125:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
126:               call_n  130    8    1     // 
127:                 meta    2    6  255     // tmp130 = makeCumulative (table);
128:             jmp_down    0   47          // goto 175;
129:           assignment  130    6    0     // tmp130 = n : TYPEOF(n);
130:           assignment  131    5    1     // tmp131 = 'length': STRING;
131:          prop_getter  132  137  131     // tmp132 = tmp137[tmp131];
132:            less_than  133  130  132     // tmp133 = tmp130 < tmp132;
133:    is_false_jmp_down  133    0    4     // if (tmp133 == false) goto 137;
134:          construct_n  130    2    1     // 
135:                 meta    2    0  255     // tmp130 = new Array (n);
136:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
137:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
138:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
139:             jmp_down    0   16          // goto 155;
140:               call_n  130    3    1     // 
141:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
142:                 meta    2  130  255     // tmp130 = rand (tmp130);
143:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
144:               for_in    4    0    9     // for_in (table);
145:           assignment  140    6  129     // tmp140 = tmp129 : TYPEOF(tmp129);
146:           assignment  130    6  139     // tmp130 = tmp139 : TYPEOF(tmp139);
147:          prop_getter  131    4  140     // tmp131 = table[tmp140];
148:            less_than  132  130  131     // tmp132 = tmp130 < tmp131;
149:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 153;
150:          prop_setter  137  138  140     // tmp137[tmp138] = tmp140;
151:           assignment  131    6  140     // tmp131 = tmp140 : TYPEOF(tmp140);
152:   jmp_break_continue    0    2          // goto_nested 154;
153:                 meta   13  255  255     // end for-in;
154:            post_incr  130  138          // tmp130 = tmp138++;
155:           assignment  131    6  138     // tmp131 = tmp138 : TYPEOF(tmp138);
156:           assignment  132    5    1     // tmp132 = 'length': STRING;
157:          prop_getter  133  137  132     // tmp133 = tmp137[tmp132];
158:            less_than  134  131  133     // tmp134 = tmp131 < tmp133;
159:       is_true_jmp_up  134    0   19     // if (tmp134) goto 140;
160:           assignment  130    5    5     // tmp130 = 'join': STRING;
161:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
162:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
163:               call_n  133  131    1     // 
164:                 meta    1    1  132     // 
165:           assignment  133    5    6     // tmp133 = '': STRING;
166:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
167:           assignment  134    5    1     // tmp134 = 'length': STRING;
168:          prop_getter  135  133  134     // tmp135 = tmp133[tmp134];
169:             addition    7    7  135     // ret = ret + tmp135;
170:           assignment  136    6    7     // tmp136 = ret : TYPEOF(ret);
171:           assignment  130    5    1     // tmp130 = 'length': STRING;
172:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
173:         substraction    0    0  131     // n = n - tmp131;
174:           assignment  132    6    0     // tmp132 = n : TYPEOF(n);
175:           assignment  133    6    0     // tmp133 = n : TYPEOF(n);
176:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
177:         greater_than  135  133  134     // tmp135 = tmp133 > tmp134;
178:       is_true_jmp_up  135    0   49     // if (tmp135) goto 129;
179:                  ret                    // ret;
180:           assignment  130    1   42     // tmp130 = 42: SMALLINT;
181:           assignment    8    6  130     // last = tmp130 : TYPEOF(tmp130);
182:           assignment  131    3    9     // tmp131 = 3877: NUMBER;
183:           assignment   10    6  131     // A = tmp131 : TYPEOF(tmp131);
184:           assignment  132    3   11     // tmp132 = 29573: NUMBER;
185:           assignment   12    6  132     // C = tmp132 : TYPEOF(tmp132);
186:           assignment  133    3   13     // tmp133 = 139968: NUMBER;
187:           assignment   14    6  133     // M = tmp133 : TYPEOF(tmp133);
188:           assignment  130    5   15     // tmp130 = 'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG': STRING;
189:           assignment  131    5   16     // tmp131 = 'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA': STRING;
190:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
191:           assignment  133    5   17     // tmp133 = 'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT': STRING;
192:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
193:           assignment  135    5    0     // tmp135 = 'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA': STRING;
194:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
195:           assignment  137    5    1     // tmp137 = 'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG': STRING;
196:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
197:           assignment  139    5    2     // tmp139 = 'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC': STRING;
198:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
199:           assignment  141    5    3     // tmp141 = 'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA': STRING;
200:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
201:           assignment    4    6  142     // ALU = tmp142 : TYPEOF(tmp142);
202:             obj_decl  130    0   15     // 
203:           assignment  130    3    5     // tmp130 = 0.27: NUMBER;
204:           assignment  131    5    6     // tmp131 = 'a': STRING;
205:                 meta    3  131  130     // 
206:           assignment  130    3    7     // tmp130 = 0.12: NUMBER;
207:           assignment  131    5    8     // tmp131 = 'c': STRING;
208:                 meta    3  131  130     // 
209:           assignment  130    3    7     // tmp130 = 0.12: NUMBER;
210:           assignment  131    5    9     // tmp131 = 'g': STRING;
211:                 meta    3  131  130     // 
212:           assignment  130    3    5     // tmp130 = 0.27: NUMBER;
213:           assignment  131    5   10     // tmp131 = 't': STRING;
214:                 meta    3  131  130     // 
215:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
216:           assignment  131    5   12     // tmp131 = 'B': STRING;
217:                 meta    3  131  130     // 
218:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
219:           assignment  131    5   13     // tmp131 = 'D': STRING;
220:                 meta    3  131  130     // 
221:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
222:           assignment  131    5   14     // tmp131 = 'H': STRING;
223:                 meta    3  131  130     // 
224:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
225:           assignment  131    5   15     // tmp131 = 'K': STRING;
226:                 meta    3  131  130     // 
227:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
228:           assignment  131    5   16     // tmp131 = 'M': STRING;
229:                 meta    3  131  130     // 
230:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
231:           assignment  131    5   17     // tmp131 = 'N': STRING;
232:                 meta    3  131  130     // 
233:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
234:           assignment  131    5   18     // tmp131 = 'R': STRING;
235:                 meta    3  131  130     // 
236:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
237:           assignment  131    5   19     // tmp131 = 'S': STRING;
238:                 meta    3  131  130     // 
239:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
240:           assignment  131    5   20     // tmp131 = 'V': STRING;
241:                 meta    3  131  130     // 
242:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
243:           assignment  131    5   21     // tmp131 = 'W': STRING;
244:                 meta    3  131  130     // 
245:           assignment  130    3   11     // tmp130 = 0.02: NUMBER;
246:           assignment  131    5   22     // tmp131 = 'Y': STRING;
247:                 meta    3  131  130     // tmp130 = {tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130};
248:           assignment   23    6  130     // IUB = tmp130 : TYPEOF(tmp130);
249:             obj_decl  130    0    4     // 
250:           assignment  130    3   24     // tmp130 = 0.302954942668: NUMBER;
251:           assignment  131    5    6     // tmp131 = 'a': STRING;
252:                 meta    3  131  130     // 
253:           assignment  130    3   25     // tmp130 = 0.1979883004921: NUMBER;
254:           assignment  131    5    8     // tmp131 = 'c': STRING;
255:                 meta    3  131  130     // 
256:           assignment  130    3    0     // tmp130 = 0.1975473066391: NUMBER;
257:           assignment  131    5    1     // tmp131 = 'g': STRING;
258:                 meta    3  131  130     // 
259:           assignment  130    3    2     // tmp130 = 0.3015094502008: NUMBER;
260:           assignment  131    5    3     // tmp131 = 't': STRING;
261:                 meta    3  131  130     // tmp130 = {tmp131:tmp130, tmp131:tmp130, tmp131:tmp130, tmp131:tmp130};
262:           assignment    4    6  130     // HomoSap = tmp130 : TYPEOF(tmp130);
263:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
264:           assignment    5    6  130     // ret = tmp130 : TYPEOF(tmp130);
265:           assignment  130    1    7     // tmp130 = 7: SMALLINT;
266:           assignment    6    6  130     // count = tmp130 : TYPEOF(tmp130);
267:               call_n  130    7    2     // 
268:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
269:       multiplication  131  130    6     // tmp131 = tmp130 * count;
270:           assignment  132    3    8     // tmp132 = 100000: NUMBER;
271:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
272:                 meta    2  133  255     // 
273:                 meta    2    9  255     // tmp130 = fastaRepeat (tmp133, ALU);
274:               call_n  130   10    2     // 
275:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
276:       multiplication  131  130    6     // tmp131 = tmp130 * count;
277:           assignment  132    3   11     // tmp132 = 1000: NUMBER;
278:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
279:                 meta    2  133  255     // 
280:                 meta    2   12  255     // tmp130 = fastaRandom (tmp133, IUB);
281:               call_n  130   10    2     // 
282:           assignment  130    1    5     // tmp130 = 5: SMALLINT;
283:       multiplication  131  130    6     // tmp131 = tmp130 * count;
284:           assignment  132    3   11     // tmp132 = 1000: NUMBER;
285:       multiplication  133  131  132     // tmp133 = tmp131 * tmp132;
286:                 meta    2  133  255     // 
287:                 meta    2    4  255     // tmp130 = fastaRandom (tmp133, HomoSap);
288:           assignment  130    3   13     // tmp130 = 1456000: NUMBER;
289:           assignment   14    6  130     // expected = tmp130 : TYPEOF(tmp130);
290:           assignment  130    6    5     // tmp130 = ret : TYPEOF(ret);
291:      not_equal_value  131  130   14     // tmp131 = tmp130 != expected;
292:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 299;
293:           assignment  130    5   15     // tmp130 = 'ERROR: bad result: expected ': STRING;
294:             addition  131  130   14     // tmp131 = tmp130 + expected;
295:           assignment  132    5   16     // tmp132 = ' but got ': STRING;
296:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
297:             addition  134  133    5     // tmp134 = tmp133 + ret;
298:          throw_value  134               // throw tmp134;
299:                  ret                    // ret;
