// // Copyright (c) 2004 by Arthur Langereis (arthur_ext at domain xfinitegames, tld com
// 
// var result = 0;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // result = tmp130 : TYPEOF(tmp130);
// // 1 op = 6 ANDs, 3 SHRs, 3 SHLs, 4 assigns, 2 ADDs
// 
// // O(1)
// 
// function fast3bitlookup(b) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
// var c, bi3b = 0xE994; // 0b1110 1001 1001 0100; // 3 2 2 1  2 1 1 0
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    3  254     // tmp130 = 59796: NUMBER;
  6:           assignment  254    6  130     // bi3b = tmp130 : TYPEOF(tmp130);
// 
// c  = 3 & (bi3b >> ((b << 1) & 14));
  7:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
  8:           assignment  131    6  254     // tmp131 = bi3b : TYPEOF(bi3b);
  9:           assignment  132    6  254     // tmp132 = b : TYPEOF(b);
 10:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 11:         b_shift_left  134  132  133     // tmp134 = tmp132 << tmp133;
 12:           assignment  135    1   14     // tmp135 = 14: SMALLINT;
 13:                b_and  136  134  135     // tmp136 = tmp134 & tmp135;
 14:        b_shift_right  137  131  136     // tmp137 = tmp131 >> tmp136;
 15:                b_and  138  130  137     // tmp138 = tmp130 & tmp137;
 16:           assignment  254    6  138     // c = tmp138 : TYPEOF(tmp138);
// c += 3 & (bi3b >> ((b >> 2) & 14));
 17:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 18:           assignment  131    6  254     // tmp131 = bi3b : TYPEOF(bi3b);
 19:           assignment  132    6  254     // tmp132 = b : TYPEOF(b);
 20:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
 21:        b_shift_right  134  132  133     // tmp134 = tmp132 >> tmp133;
 22:           assignment  135    1   14     // tmp135 = 14: SMALLINT;
 23:                b_and  136  134  135     // tmp136 = tmp134 & tmp135;
 24:        b_shift_right  137  131  136     // tmp137 = tmp131 >> tmp136;
 25:                b_and  138  130  137     // tmp138 = tmp130 & tmp137;
 26:             addition  254  254  138     // c = c + tmp138;
 27:           assignment  139    6  254     // tmp139 = c : TYPEOF(c);
// c += 3 & (bi3b >> ((b >> 5) & 6));
 28:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 29:           assignment  131    6  254     // tmp131 = bi3b : TYPEOF(bi3b);
 30:           assignment  132    6  254     // tmp132 = b : TYPEOF(b);
 31:           assignment  133    1    5     // tmp133 = 5: SMALLINT;
 32:        b_shift_right  134  132  133     // tmp134 = tmp132 >> tmp133;
 33:           assignment  135    1    6     // tmp135 = 6: SMALLINT;
 34:                b_and  136  134  135     // tmp136 = tmp134 & tmp135;
 35:        b_shift_right  137  131  136     // tmp137 = tmp131 >> tmp136;
 36:                b_and  138  130  137     // tmp138 = tmp130 & tmp137;
 37:             addition  254  254  138     // c = c + tmp138;
 38:           assignment  139    6  254     // tmp139 = c : TYPEOF(c);
// return c;
 39:               retval  254               // return c;
// /*
// 
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  141    2     // var tmp128 .. tmp141; // REWRITE
 40:                  ret                    // ret;
  2:                 meta    7    0   39     // function end: 41; // REWRITE
// function TimeFunc(func) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
// var x, y, t;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
// var sum = 0;
  5:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  6:           assignment  254    6  130     // sum = tmp130 : TYPEOF(tmp130);
// for(var x=0; x<500; x++)
// for(var y=0; y<256; y++) sum += func(y);
  7:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  8:           assignment  254    6  130     // x = tmp130 : TYPEOF(tmp130);
  9:             jmp_down  253  253          // goto 65030;
 10:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 11:           assignment  254    6  130     // y = tmp130 : TYPEOF(tmp130);
 12:             jmp_down  253  253          // goto 65033;
 13:               call_n  253  254  253     // 
 14:                 meta    2  254  255     // 
 13:               call_n  130  254    1     //  // REWRITE
 15:             addition  254  254  130     // sum = sum + tmp130;
 16:           assignment  131    6  254     // tmp131 = sum : TYPEOF(sum);
 17:            post_incr  132  254          // tmp132 = y++;
 12:             jmp_down    0    6          // goto 18; // REWRITE
 18:           assignment  133    6  254     // tmp133 = y : TYPEOF(y);
 19:           assignment  134    3  254     // tmp134 = 256: NUMBER;
 20:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 21:       is_true_jmp_up  135    0    8     // if (tmp135) goto 13;
 22:            post_incr  136  254          // tmp136 = x++;
  9:             jmp_down    0   14          // goto 23; // REWRITE
 23:           assignment  137    6  254     // tmp137 = x : TYPEOF(x);
 24:           assignment  138    3  254     // tmp138 = 500: NUMBER;
 25:            less_than  139  137  138     // tmp139 = tmp137 < tmp138;
 26:       is_true_jmp_up  139    0   16     // if (tmp139) goto 10;
// return sum;
 27:               retval  254               // return sum;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  143    4     // var tmp128 .. tmp143; // REWRITE
 28:                  ret                    // ret;
  2:                 meta    7    0   27     // function end: 29; // REWRITE
// sum = TimeFunc(fast3bitlookup);
  4:               call_n  253  254  253     // 
  5:                 meta    2  254  255     // 
  4:               call_n  130  254    1     //  // REWRITE
  6:           assignment  254    6  130     // sum = tmp130 : TYPEOF(tmp130);
// var expected = 512000;
  7:           assignment  130    3  254     // tmp130 = 512000: NUMBER;
  8:           assignment  254    6  130     // expected = tmp130 : TYPEOF(tmp130);
// if (sum != expected)
  9:           assignment  130    6  254     // tmp130 = sum : TYPEOF(sum);
 10:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
 11:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65032;
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
 12:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
 13:             addition  131  130  254     // tmp131 = tmp130 + expected;
 14:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 15:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 16:             addition  134  133  254     // tmp134 = tmp133 + sum;
 17:          throw_value  134               // throw tmp134;
// 
 11:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 18; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 18:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 12] result : STRING
0x8a54d0 [ 20] fast3bitlookup : STRING
0x8a54e4 [  8] b : STRING
0x8a54ec [  8] c : STRING
0x8a54f4 [ 12] bi3b : STRING
0x8a5504 [ 12] 59796 : NUMBER
0x8a5510 [ 16] TimeFunc : STRING
0x8a5520 [ 12] func : STRING
0x8a552c [  8] x : STRING
0x8a5534 [  8] y : STRING
0x8a553c [  8] t : STRING
0x8a5548 [ 12] sum : STRING
0x8a5554 [ 12] 500 : NUMBER
0x8a5560 [ 12] 256 : NUMBER
0x8a556c [ 16] expected : STRING
0x8a557c [ 12] 512000 : NUMBER
0x8a558c [ 36] ERROR: bad result: expected  : STRING
0x8a55b0 [ 16]  but got  : STRING
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
  2:             var_decl    0               // var result;
  3:             var_decl    1               // var expected;
  4:          func_decl_n    2    1          // 
  5:                 meta    2    3  255     // function fast3bitlookup (b);
  6:                 meta    7    0   39     // function end: 45;
  7:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  8:         reg_var_decl  128  141    2     // var tmp128 .. tmp141;
  9:           assignment  130    3    4     // tmp130 = 59796: NUMBER;
 10:           assignment  141    6  130     // tmp141 = tmp130 : TYPEOF(tmp130);
 11:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 12:           assignment  131    6  141     // tmp131 = tmp141 : TYPEOF(tmp141);
 13:           assignment  132    6    3     // tmp132 = b : TYPEOF(b);
 14:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 15:         b_shift_left  134  132  133     // tmp134 = tmp132 << tmp133;
 16:           assignment  135    1   14     // tmp135 = 14: SMALLINT;
 17:                b_and  136  134  135     // tmp136 = tmp134 & tmp135;
 18:        b_shift_right  137  131  136     // tmp137 = tmp131 >> tmp136;
 19:                b_and  138  130  137     // tmp138 = tmp130 & tmp137;
 20:           assignment  140    6  138     // tmp140 = tmp138 : TYPEOF(tmp138);
 21:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 22:           assignment  131    6  141     // tmp131 = tmp141 : TYPEOF(tmp141);
 23:           assignment  132    6    3     // tmp132 = b : TYPEOF(b);
 24:           assignment  133    1    2     // tmp133 = 2: SMALLINT;
 25:        b_shift_right  134  132  133     // tmp134 = tmp132 >> tmp133;
 26:           assignment  135    1   14     // tmp135 = 14: SMALLINT;
 27:                b_and  136  134  135     // tmp136 = tmp134 & tmp135;
 28:        b_shift_right  137  131  136     // tmp137 = tmp131 >> tmp136;
 29:                b_and  138  130  137     // tmp138 = tmp130 & tmp137;
 30:             addition  140  140  138     // tmp140 = tmp140 + tmp138;
 31:           assignment  139    6  140     // tmp139 = tmp140 : TYPEOF(tmp140);
 32:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 33:           assignment  131    6  141     // tmp131 = tmp141 : TYPEOF(tmp141);
 34:           assignment  132    6    3     // tmp132 = b : TYPEOF(b);
 35:           assignment  133    1    5     // tmp133 = 5: SMALLINT;
 36:        b_shift_right  134  132  133     // tmp134 = tmp132 >> tmp133;
 37:           assignment  135    1    6     // tmp135 = 6: SMALLINT;
 38:                b_and  136  134  135     // tmp136 = tmp134 & tmp135;
 39:        b_shift_right  137  131  136     // tmp137 = tmp131 >> tmp136;
 40:                b_and  138  130  137     // tmp138 = tmp130 & tmp137;
 41:             addition  140  140  138     // tmp140 = tmp140 + tmp138;
 42:           assignment  139    6  140     // tmp139 = tmp140 : TYPEOF(tmp140);
 43:               retval  140               // return tmp140;
 44:                  ret                    // ret;
 45:          func_decl_n    5    1          // 
 46:                 meta    2    6  255     // function TimeFunc (func);
 47:                 meta    7    0   27     // function end: 74;
 48:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 49:         reg_var_decl  128  143    4     // var tmp128 .. tmp143;
 50:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 51:           assignment  143    6  130     // tmp143 = tmp130 : TYPEOF(tmp130);
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:           assignment  140    6  130     // tmp140 = tmp130 : TYPEOF(tmp130);
 54:             jmp_down    0   14          // goto 68;
 55:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 56:           assignment  141    6  130     // tmp141 = tmp130 : TYPEOF(tmp130);
 57:             jmp_down    0    6          // goto 63;
 58:               call_n  130    6    1     // 
 59:                 meta    2  141  255     // tmp130 = func (tmp141);
 60:             addition  143  143  130     // tmp143 = tmp143 + tmp130;
 61:           assignment  131    6  143     // tmp131 = tmp143 : TYPEOF(tmp143);
 62:            post_incr  132  141          // tmp132 = tmp141++;
 63:           assignment  133    6  141     // tmp133 = tmp141 : TYPEOF(tmp141);
 64:           assignment  134    3    0     // tmp134 = 256: NUMBER;
 65:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 66:       is_true_jmp_up  135    0    8     // if (tmp135) goto 58;
 67:            post_incr  136  140          // tmp136 = tmp140++;
 68:           assignment  137    6  140     // tmp137 = tmp140 : TYPEOF(tmp140);
 69:           assignment  138    3    1     // tmp138 = 500: NUMBER;
 70:            less_than  139  137  138     // tmp139 = tmp137 < tmp138;
 71:       is_true_jmp_up  139    0   16     // if (tmp139) goto 55;
 72:               retval  143               // return tmp143;
 73:                  ret                    // ret;
 74:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 75:           assignment    2    6  130     // result = tmp130 : TYPEOF(tmp130);
 76:               call_n  130    3    1     // 
 77:                 meta    2    4  255     // tmp130 = TimeFunc (fast3bitlookup);
 78:           assignment    5    6  130     // sum = tmp130 : TYPEOF(tmp130);
 79:           assignment  130    3    6     // tmp130 = 512000: NUMBER;
 80:           assignment    7    6  130     // expected = tmp130 : TYPEOF(tmp130);
 81:           assignment  130    6    5     // tmp130 = sum : TYPEOF(sum);
 82:      not_equal_value  131  130    7     // tmp131 = tmp130 != expected;
 83:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 90;
 84:           assignment  130    5    8     // tmp130 = 'ERROR: bad result: expected ': STRING;
 85:             addition  131  130    7     // tmp131 = tmp130 + expected;
 86:           assignment  132    5    9     // tmp132 = ' but got ': STRING;
 87:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 88:             addition  134  133    5     // tmp134 = tmp133 + sum;
 89:          throw_value  134               // throw tmp134;
 90:                  ret                    // ret;
