// /*
// 
// bitwiseAndValue = 4294967296;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    3  254     // tmp130 = 4294967296: NUMBER;
  3:           assignment  254    6  130     // bitwiseAndValue = tmp130 : TYPEOF(tmp130);
// for (var i = 0; i < 600000; i++)
//     bitwiseAndValue = bitwiseAndValue & i;
  4:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  5:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  6:             jmp_down  253  253          // goto 65027;
  7:           assignment  130    6  254     // tmp130 = bitwiseAndValue : TYPEOF(bitwiseAndValue);
  8:                b_and  131  130  254     // tmp131 = tmp130 & i;
  9:           assignment  254    6  131     // bitwiseAndValue = tmp131 : TYPEOF(tmp131);
 10:            post_incr  132  254          // tmp132 = i++;
  6:             jmp_down    0    5          // goto 11; // REWRITE
 11:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 12:           assignment  134    3  254     // tmp134 = 600000: NUMBER;
 13:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 14:       is_true_jmp_up  135    0    7     // if (tmp135) goto 7;
// var result = bitwiseAndValue;
 15:           assignment  254    6  254     // result = bitwiseAndValue : TYPEOF(bitwiseAndValue);
// var expected = 0;
 16:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 17:           assignment  254    6  130     // expected = tmp130 : TYPEOF(tmp130);
// if (result != expected)
 18:           assignment  130    6  254     // tmp130 = result : TYPEOF(result);
 19:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
 20:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65041;
//     throw "ERROR: bad result: expected " + expected + " but got " + result;
 21:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
 22:             addition  131  130  254     // tmp131 = tmp130 + expected;
 23:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 24:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 25:             addition  134  133  254     // tmp134 = tmp133 + result;
 26:          throw_value  134               // throw tmp134;
// 
 20:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 27; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135; // REWRITE
 27:                  ret                    // ret;
LITERALS:
0x8a54c4 [ 24] bitwiseAndValue : STRING
0x8a54dc [ 12] 4294967296 : NUMBER
0x8a54e8 [  4] i : MAGIC STRING [id=207] 
0x8a54ec [ 12] 600000 : NUMBER
0x8a54f8 [ 12] result : STRING
0x8a5508 [ 16] expected : STRING
0x8a5518 [ 36] ERROR: bad result: expected  : STRING
0x8a553c [ 16]  but got  : STRING
0x8a5550 [ 48]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135;
  2:             var_decl    0               // var i;
  3:             var_decl    1               // var result;
  4:             var_decl    2               // var expected;
  5:           assignment  130    3    3     // tmp130 = 4294967296: NUMBER;
  6:           assignment    4    6  130     // bitwiseAndValue = tmp130 : TYPEOF(tmp130);
  7:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  8:           assignment    0    6  130     // i = tmp130 : TYPEOF(tmp130);
  9:             jmp_down    0    5          // goto 14;
 10:           assignment  130    6    4     // tmp130 = bitwiseAndValue : TYPEOF(bitwiseAndValue);
 11:                b_and  131  130    0     // tmp131 = tmp130 & i;
 12:           assignment    4    6  131     // bitwiseAndValue = tmp131 : TYPEOF(tmp131);
 13:            post_incr  132    0          // tmp132 = i++;
 14:           assignment  133    6    0     // tmp133 = i : TYPEOF(i);
 15:           assignment  134    3    5     // tmp134 = 600000: NUMBER;
 16:            less_than  135  133  134     // tmp135 = tmp133 < tmp134;
 17:       is_true_jmp_up  135    0    7     // if (tmp135) goto 10;
 18:           assignment    1    6    4     // result = bitwiseAndValue : TYPEOF(bitwiseAndValue);
 19:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 20:           assignment    2    6  130     // expected = tmp130 : TYPEOF(tmp130);
 21:           assignment  130    6    1     // tmp130 = result : TYPEOF(result);
 22:      not_equal_value  131  130    2     // tmp131 = tmp130 != expected;
 23:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 30;
 24:           assignment  130    5    6     // tmp130 = 'ERROR: bad result: expected ': STRING;
 25:             addition  131  130    2     // tmp131 = tmp130 + expected;
 26:           assignment  132    5    7     // tmp132 = ' but got ': STRING;
 27:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 28:             addition  134  133    1     // tmp134 = tmp133 + result;
 29:          throw_value  134               // throw tmp134;
 30:                  ret                    // ret;
