// for(var a=[],b=0;43200>b;++b)a[b]=0;for(b=0;15>b;++b)for(var c=a,d=8*Math.PI/120,e=Math.sin,f=-(50*e(b/15*Math.PI*2)),g=0;120>g;++g)for(var h=0;120>h;++h)c[3*(120*g+h)+1]=e((h-1)*d)*-f;for(b=testOutput=0;120>b;b++)testOutput+=a[3*(120*b+b)+1];a=null;if(1E-13<=Math.abs(testOutput))throw"Error: bad test output: expected magnitude below 1.0E-13 but got "+testOutput;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           array_decl  253  253  255     // 
  2:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  3:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
  4:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
  5:           assignment  254    6  131     // b = tmp131 : TYPEOF(tmp131);
  6:             jmp_down  253  253          // goto 65027;
  7:          prop_getter  130  254  254     // tmp130 = a[b];
  7:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
  8:          prop_setter  254  254  131     // a[b] = tmp131;
  9:             pre_incr  132  254          // tmp132 = ++b;
  6:             jmp_down    0    4          // goto 10; // REWRITE
 10:           assignment  133    3  254     // tmp133 = 43200: NUMBER;
 11:         greater_than  134  133  254     // tmp134 = tmp133 > b;
 12:       is_true_jmp_up  134    0    5     // if (tmp134) goto 7;
 13:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 14:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
 15:             jmp_down  253  253          // goto 65036;
 16:           assignment  254    6  254     // c = a : TYPEOF(a);
 17:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 18:           assignment  131    5  254     // tmp131 = 'PI': STRING;
 19:          prop_getter  132  254  131     // tmp132 = Math[tmp131];
 20:       multiplication  133  130  132     // tmp133 = tmp130 * tmp132;
 21:           assignment  134    1  120     // tmp134 = 120: SMALLINT;
 22:             division  135  133  134     // tmp135 = tmp133 / tmp134;
 23:           assignment  254    6  135     // d = tmp135 : TYPEOF(tmp135);
 24:           assignment  136    5  254     // tmp136 = 'sin': STRING;
 25:          prop_getter  137  254  136     // tmp137 = Math[tmp136];
 26:           assignment  254    6  137     // e = tmp137 : TYPEOF(tmp137);
 27:           assignment  138    1   50     // tmp138 = 50: SMALLINT;
 28:               call_n  253  254  253     // 
 29:           assignment  139    6  254     // tmp139 = b : TYPEOF(b);
 30:           assignment  140    1   15     // tmp140 = 15: SMALLINT;
 31:             division  141  139  140     // tmp141 = tmp139 / tmp140;
 32:           assignment  142    5  254     // tmp142 = 'PI': STRING;
 33:          prop_getter  143  254  142     // tmp143 = Math[tmp142];
 34:       multiplication  144  141  143     // tmp144 = tmp141 * tmp143;
 35:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
 36:       multiplication  146  144  145     // tmp146 = tmp144 * tmp145;
 37:                 meta    2  146  255     // 
 28:               call_n  139  254    1     //  // REWRITE
 38:       multiplication  140  138  139     // tmp140 = tmp138 * tmp139;
 39:          unary_minus  141  140          // tmp141 = -tmp140;
 40:           assignment  254    6  141     // f = tmp141 : TYPEOF(tmp141);
 41:           assignment  142    1    0     // tmp142 = 0: SMALLINT;
 42:           assignment  254    6  142     // g = tmp142 : TYPEOF(tmp142);
 43:             jmp_down  253  253          // goto 65064;
 44:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 45:           assignment  254    6  130     // h = tmp130 : TYPEOF(tmp130);
 46:             jmp_down  253  253          // goto 65067;
 47:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 48:           assignment  131    1  120     // tmp131 = 120: SMALLINT;
 49:       multiplication  132  131  254     // tmp132 = tmp131 * g;
 50:             addition  133  132  254     // tmp133 = tmp132 + h;
 51:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 52:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 53:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 54:          prop_getter  137  254  136     // tmp137 = c[tmp136];
 54:               call_n  253  254  253     // 
 55:           assignment  138    6  254     // tmp138 = h : TYPEOF(h);
 56:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 57:         substraction  140  138  139     // tmp140 = tmp138 - tmp139;
 58:       multiplication  141  140  254     // tmp141 = tmp140 * d;
 59:                 meta    2  141  255     // 
 54:               call_n  138  254    1     //  // REWRITE
 60:          unary_minus  139  254          // tmp139 = -f;
 61:       multiplication  140  138  139     // tmp140 = tmp138 * tmp139;
 62:          prop_setter  254  136  140     // c[tmp136] = tmp140;
 63:             pre_incr  141  254          // tmp141 = ++h;
 46:             jmp_down    0   18          // goto 64; // REWRITE
 64:           assignment  142    1  120     // tmp142 = 120: SMALLINT;
 65:         greater_than  143  142  254     // tmp143 = tmp142 > h;
 66:       is_true_jmp_up  143    0   19     // if (tmp143) goto 47;
 67:             pre_incr  144  254          // tmp144 = ++g;
 43:             jmp_down    0   25          // goto 68; // REWRITE
 68:           assignment  145    1  120     // tmp145 = 120: SMALLINT;
 69:         greater_than  146  145  254     // tmp146 = tmp145 > g;
 70:       is_true_jmp_up  146    0   26     // if (tmp146) goto 44;
 71:             pre_incr  147  254          // tmp147 = ++b;
 15:             jmp_down    0   57          // goto 72; // REWRITE
 72:           assignment  148    1   15     // tmp148 = 15: SMALLINT;
 73:         greater_than  149  148  254     // tmp149 = tmp148 > b;
 74:       is_true_jmp_up  149    0   58     // if (tmp149) goto 16;
 75:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 76:           assignment  254    6  130     // testOutput = tmp130 : TYPEOF(tmp130);
 77:           assignment  254    6  130     // b = tmp130 : TYPEOF(tmp130);
 78:             jmp_down  253  253          // goto 65099;
 79:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 80:           assignment  131    1  120     // tmp131 = 120: SMALLINT;
 81:       multiplication  132  131  254     // tmp132 = tmp131 * b;
 82:             addition  133  132  254     // tmp133 = tmp132 + b;
 83:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 84:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 85:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 86:          prop_getter  137  254  136     // tmp137 = a[tmp136];
 87:             addition  254  254  137     // testOutput = testOutput + tmp137;
 88:           assignment  138    6  254     // tmp138 = testOutput : TYPEOF(testOutput);
 89:            post_incr  139  254          // tmp139 = b++;
 78:             jmp_down    0   12          // goto 90; // REWRITE
 90:           assignment  140    1  120     // tmp140 = 120: SMALLINT;
 91:         greater_than  141  140  254     // tmp141 = tmp140 > b;
 92:       is_true_jmp_up  141    0   13     // if (tmp141) goto 79;
 93:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 94:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
 95:           assignment  130    3  254     // tmp130 = 1e-13: NUMBER;
 96:           assignment  131    5  254     // tmp131 = 'abs': STRING;
 97:          prop_getter  132  254  131     // tmp132 = Math[tmp131];
 98:           assignment  133    6  254     // tmp133 = Math : TYPEOF(Math);
 99:               call_n  253  132  253     // 
100:                 meta    1    1  133     // 
101:                 meta    2  254  255     // 
 99:               call_n  134  132    1     //  // REWRITE
102:   less_or_equal_than  135  130  134     // tmp135 = tmp130 <= tmp134;
103:    is_false_jmp_down  135  253  253     // if (tmp135 == false) goto 65124;
104:           assignment  130    5  254     // tmp130 = 'Error: bad test output: expected magnitude below 1.0E-13 but got': STRING;
105:             addition  131  130  254     // tmp131 = tmp130 + testOutput;
106:          throw_value  131               // throw tmp131;
// 
103:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 107; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  149    0     // var tmp128 .. tmp149; // REWRITE
107:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] a : STRING
0x8a54cc [  8] b : STRING
0x8a54d4 [ 12] 43200 : NUMBER
0x8a54e0 [  8] c : STRING
0x8a54e8 [  8] d : STRING
0x8a54f0 [  4] Math : MAGIC STRING [id=44] 
0x8a54f4 [  4] PI : MAGIC STRING [id=81] 
0x8a54f8 [  8] e : STRING
0x8a5504 [  4] sin : MAGIC STRING [id=99] 
0x8a5508 [  8] f : STRING
0x8a5510 [  4] g : MAGIC STRING [id=206] 
0x8a5514 [  8] h : STRING
0x8a551c [ 16] testOutput : STRING
0x8a552c [ 12] 1e-13 : NUMBER
0x8a5538 [  4] abs : MAGIC STRING [id=84] 
0x8a553c [ 72] Error: bad test output: expected magnitude below 1.0E-13 but got  : STRING
0x8a558c [ 52]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  149    0     // var tmp128 .. tmp149;
  2:             var_decl    0               // var a;
  3:             var_decl    1               // var b;
  4:             var_decl    2               // var c;
  5:             var_decl    3               // var d;
  6:             var_decl    4               // var e;
  7:             var_decl    5               // var f;
  8:             var_decl    6               // var g;
  9:             var_decl    7               // var h;
 10:           array_decl  130    0    0     // tmp130 = [];
 11:           assignment    0    6  130     // a = tmp130 : TYPEOF(tmp130);
 12:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 13:           assignment    1    6  131     // b = tmp131 : TYPEOF(tmp131);
 14:             jmp_down    0    4          // goto 18;
 15:           assignment  131    1    0     // tmp131 = 0: SMALLINT;
 16:          prop_setter    0    1  131     // a[b] = tmp131;
 17:             pre_incr  132    1          // tmp132 = ++b;
 18:           assignment  133    3    8     // tmp133 = 43200: NUMBER;
 19:         greater_than  134  133    1     // tmp134 = tmp133 > b;
 20:       is_true_jmp_up  134    0    5     // if (tmp134) goto 15;
 21:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 22:           assignment    1    6  130     // b = tmp130 : TYPEOF(tmp130);
 23:             jmp_down    0   57          // goto 80;
 24:           assignment    2    6    0     // c = a : TYPEOF(a);
 25:           assignment  130    1    8     // tmp130 = 8: SMALLINT;
 26:           assignment  131    5    9     // tmp131 = 'PI': STRING;
 27:          prop_getter  132   10  131     // tmp132 = Math[tmp131];
 28:       multiplication  133  130  132     // tmp133 = tmp130 * tmp132;
 29:           assignment  134    1  120     // tmp134 = 120: SMALLINT;
 30:             division  135  133  134     // tmp135 = tmp133 / tmp134;
 31:           assignment    3    6  135     // d = tmp135 : TYPEOF(tmp135);
 32:           assignment  136    5   11     // tmp136 = 'sin': STRING;
 33:          prop_getter  137   10  136     // tmp137 = Math[tmp136];
 34:           assignment    4    6  137     // e = tmp137 : TYPEOF(tmp137);
 35:           assignment  138    1   50     // tmp138 = 50: SMALLINT;
 36:               call_n  139    4    1     // 
 37:           assignment  139    6    1     // tmp139 = b : TYPEOF(b);
 38:           assignment  140    1   15     // tmp140 = 15: SMALLINT;
 39:             division  141  139  140     // tmp141 = tmp139 / tmp140;
 40:           assignment  142    5    9     // tmp142 = 'PI': STRING;
 41:          prop_getter  143   10  142     // tmp143 = Math[tmp142];
 42:       multiplication  144  141  143     // tmp144 = tmp141 * tmp143;
 43:           assignment  145    1    2     // tmp145 = 2: SMALLINT;
 44:       multiplication  146  144  145     // tmp146 = tmp144 * tmp145;
 45:                 meta    2  146  255     // tmp139 = e (tmp146);
 46:       multiplication  140  138  139     // tmp140 = tmp138 * tmp139;
 47:          unary_minus  141  140          // tmp141 = -tmp140;
 48:           assignment    5    6  141     // f = tmp141 : TYPEOF(tmp141);
 49:           assignment  142    1    0     // tmp142 = 0: SMALLINT;
 50:           assignment    6    6  142     // g = tmp142 : TYPEOF(tmp142);
 51:             jmp_down    0   25          // goto 76;
 52:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 53:           assignment    7    6  130     // h = tmp130 : TYPEOF(tmp130);
 54:             jmp_down    0   18          // goto 72;
 55:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 56:           assignment  131    1  120     // tmp131 = 120: SMALLINT;
 57:       multiplication  132  131    6     // tmp132 = tmp131 * g;
 58:             addition  133  132    7     // tmp133 = tmp132 + h;
 59:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 60:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 61:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 62:               call_n  138    4    1     // 
 63:           assignment  138    6    7     // tmp138 = h : TYPEOF(h);
 64:           assignment  139    1    1     // tmp139 = 1: SMALLINT;
 65:         substraction  140  138  139     // tmp140 = tmp138 - tmp139;
 66:       multiplication  141  140    0     // tmp141 = tmp140 * d;
 67:                 meta    2  141  255     // tmp138 = e (tmp141);
 68:          unary_minus  139    1          // tmp139 = -f;
 69:       multiplication  140  138  139     // tmp140 = tmp138 * tmp139;
 70:          prop_setter    2  136  140     // c[tmp136] = tmp140;
 71:             pre_incr  141    3          // tmp141 = ++h;
 72:           assignment  142    1  120     // tmp142 = 120: SMALLINT;
 73:         greater_than  143  142    3     // tmp143 = tmp142 > h;
 74:       is_true_jmp_up  143    0   19     // if (tmp143) goto 55;
 75:             pre_incr  144    4          // tmp144 = ++g;
 76:           assignment  145    1  120     // tmp145 = 120: SMALLINT;
 77:         greater_than  146  145    4     // tmp146 = tmp145 > g;
 78:       is_true_jmp_up  146    0   26     // if (tmp146) goto 52;
 79:             pre_incr  147    5          // tmp147 = ++b;
 80:           assignment  148    1   15     // tmp148 = 15: SMALLINT;
 81:         greater_than  149  148    5     // tmp149 = tmp148 > b;
 82:       is_true_jmp_up  149    0   58     // if (tmp149) goto 24;
 83:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 84:           assignment    6    6  130     // testOutput = tmp130 : TYPEOF(tmp130);
 85:           assignment    5    6  130     // b = tmp130 : TYPEOF(tmp130);
 86:             jmp_down    0   12          // goto 98;
 87:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 88:           assignment  131    1  120     // tmp131 = 120: SMALLINT;
 89:       multiplication  132  131    5     // tmp132 = tmp131 * b;
 90:             addition  133  132    5     // tmp133 = tmp132 + b;
 91:       multiplication  134  130  133     // tmp134 = tmp130 * tmp133;
 92:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 93:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 94:          prop_getter  137    7  136     // tmp137 = a[tmp136];
 95:             addition    6    6  137     // testOutput = testOutput + tmp137;
 96:           assignment  138    6    6     // tmp138 = testOutput : TYPEOF(testOutput);
 97:            post_incr  139    5          // tmp139 = b++;
 98:           assignment  140    1  120     // tmp140 = 120: SMALLINT;
 99:         greater_than  141  140    5     // tmp141 = tmp140 > b;
100:       is_true_jmp_up  141    0   13     // if (tmp141) goto 87;
101:           assignment  130    0    2     // tmp130 = null: SIMPLE;
102:           assignment    7    6  130     // a = tmp130 : TYPEOF(tmp130);
103:           assignment  130    3    8     // tmp130 = 1e-13: NUMBER;
104:           assignment  131    5    9     // tmp131 = 'abs': STRING;
105:          prop_getter  132   10  131     // tmp132 = Math[tmp131];
106:           assignment  133    6   10     // tmp133 = Math : TYPEOF(Math);
107:               call_n  134  132    1     // 
108:                 meta    1    1  133     // 
109:                 meta    2    6  255     // tmp134 = tmp132 (this_arg = tmp133, testOutput);
110:   less_or_equal_than  135  130  134     // tmp135 = tmp130 <= tmp134;
111:    is_false_jmp_down  135    0    4     // if (tmp135 == false) goto 115;
112:           assignment  130    5   11     // tmp130 = 'Error: bad test output: expected magnitude below 1.0E-13 but got': STRING;
113:             addition  131  130    6     // tmp131 = tmp130 + testOutput;
114:          throw_value  131               // throw tmp131;
115:                  ret                    // ret;
Error: ERR_OUT_OF_MEMORY
