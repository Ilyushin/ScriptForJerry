// /* The Great Computer Language Shootout
// 
// var PI = 3.141592653589793;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    3  254     // tmp130 = 3.141592653589793: NUMBER;
  3:           assignment  254    6  130     // PI = tmp130 : TYPEOF(tmp130);
// var SOLAR_MASS = 4 * PI * PI;
  4:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
  5:       multiplication  131  130  254     // tmp131 = tmp130 * PI;
  6:       multiplication  132  131  254     // tmp132 = tmp131 * PI;
  7:           assignment  254    6  132     // SOLAR_MASS = tmp132 : TYPEOF(tmp132);
// var DAYS_PER_YEAR = 365.24;
  8:           assignment  130    3  254     // tmp130 = 365.24: NUMBER;
  9:           assignment  254    6  130     // DAYS_PER_YEAR = tmp130 : TYPEOF(tmp130);
// function Body(x,y,z,vx,vy,vz,mass){
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  4:                 meta    2  254  255     // 
  5:                 meta    2  254  255     // 
  6:                 meta    2  254  255     // 
  7:                 meta    2  254  255     // 
  0:          func_decl_n  254    7          //  // REWRITE
  8:                 meta    7  253  253     // function end: 65029;
//    this.x = x;
  9:                 meta   12  253  255     // [to be rewritten]
 10:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
 11:         this_binding  130               // tmp130 = this;
 12:           assignment  131    5  254     // tmp131 = 'x': STRING;
 13:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 13:          prop_setter  130  131  254     // tmp130[tmp131] = x;
//    this.y = y;
 14:         this_binding  130               // tmp130 = this;
 15:           assignment  131    5  254     // tmp131 = 'y': STRING;
 16:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 16:          prop_setter  130  131  254     // tmp130[tmp131] = y;
//    this.z = z;
 17:         this_binding  130               // tmp130 = this;
 18:           assignment  131    5  254     // tmp131 = 'z': STRING;
 19:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 19:          prop_setter  130  131  254     // tmp130[tmp131] = z;
//    this.vx = vx;
 20:         this_binding  130               // tmp130 = this;
 21:           assignment  131    5  254     // tmp131 = 'vx': STRING;
 22:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 22:          prop_setter  130  131  254     // tmp130[tmp131] = vx;
//    this.vy = vy;
 23:         this_binding  130               // tmp130 = this;
 24:           assignment  131    5  254     // tmp131 = 'vy': STRING;
 25:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 25:          prop_setter  130  131  254     // tmp130[tmp131] = vy;
//    this.vz = vz;
 26:         this_binding  130               // tmp130 = this;
 27:           assignment  131    5  254     // tmp131 = 'vz': STRING;
 28:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 28:          prop_setter  130  131  254     // tmp130[tmp131] = vz;
//    this.mass = mass;
 29:         this_binding  130               // tmp130 = this;
 30:           assignment  131    5  254     // tmp131 = 'mass': STRING;
 31:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 31:          prop_setter  130  131  254     // tmp130[tmp131] = mass;
// }
  9:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
 10:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 32:                  ret                    // ret;
  8:                 meta    7    0   25     // function end: 33; // REWRITE
// Body.prototype.offsetMomentum = function(px,py,pz) {
 10:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
 11:          prop_getter  131  254  130     // tmp131 = Body[tmp130];
 12:           assignment  132    5  254     // tmp132 = 'offsetMomentum': STRING;
 13:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_expr_n  134  255    3     //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
//    this.vx = -px / SOLAR_MASS;
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:         this_binding  130               // tmp130 = this;
  8:           assignment  131    5  254     // tmp131 = 'vx': STRING;
  9:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  9:          unary_minus  133  254          // tmp133 = -px;
 10:             division  134  133  254     // tmp134 = tmp133 / SOLAR_MASS;
 11:          prop_setter  130  131  134     // tmp130[tmp131] = tmp134;
//    this.vy = -py / SOLAR_MASS;
 12:         this_binding  130               // tmp130 = this;
 13:           assignment  131    5  254     // tmp131 = 'vy': STRING;
 14:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 14:          unary_minus  133  254          // tmp133 = -py;
 15:             division  134  133  254     // tmp134 = tmp133 / SOLAR_MASS;
 16:          prop_setter  130  131  134     // tmp130[tmp131] = tmp134;
//    this.vz = -pz / SOLAR_MASS;
 17:         this_binding  130               // tmp130 = this;
 18:           assignment  131    5  254     // tmp131 = 'vz': STRING;
 19:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 19:          unary_minus  133  254          // tmp133 = -pz;
 20:             division  134  133  254     // tmp134 = tmp133 / SOLAR_MASS;
 21:          prop_setter  130  131  134     // tmp130[tmp131] = tmp134;
//    return this;
 22:         this_binding  130               // tmp130 = this;
 23:               retval  130               // return tmp130;
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 24:                  ret                    // ret;
  4:                 meta    7    0   21     // function end: 25; // REWRITE
// function Jupiter(){
 38:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Jupiter (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    return new Body(
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
//       4.84143144246472090e+00,
  5:           assignment  130    3  254     // tmp130 = 4.841431442464721: NUMBER;
  6:                 meta    2  130  255     // 
//       -1.16032004402742839e+00,
  7:           assignment  130    3  254     // tmp130 = 1.1603200440274283: NUMBER;
  8:          unary_minus  131  130          // tmp131 = -tmp130;
  9:                 meta    2  131  255     // 
//       -1.03622044471123109e-01,
 10:           assignment  130    3  254     // tmp130 = 0.10362204447112311: NUMBER;
 11:          unary_minus  131  130          // tmp131 = -tmp130;
 12:                 meta    2  131  255     // 
//       1.66007664274403694e-03 * DAYS_PER_YEAR,
 13:           assignment  130    3  254     // tmp130 = 0.001660076642744037: NUMBER;
 14:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 15:                 meta    2  131  255     // 
//       7.69901118419740425e-03 * DAYS_PER_YEAR,
 16:           assignment  130    3  254     // tmp130 = 0.007699011184197404: NUMBER;
 17:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 18:                 meta    2  131  255     // 
//       -6.90460016972063023e-05 * DAYS_PER_YEAR,
 19:           assignment  130    3  254     // tmp130 = 0.0000690460016972063: NUMBER;
 20:          unary_minus  131  130          // tmp131 = -tmp130;
 21:       multiplication  132  131  254     // tmp132 = tmp131 * DAYS_PER_YEAR;
 22:                 meta    2  132  255     // 
//       9.54791938424326609e-04 * SOLAR_MASS
 23:           assignment  130    3  254     // tmp130 = 0.0009547919384243266: NUMBER;
//    );
 24:       multiplication  131  130  254     // tmp131 = tmp130 * SOLAR_MASS;
 25:                 meta    2  131  255     // 
  4:          construct_n  130  254    7     //  // REWRITE
 26:               retval  130               // return tmp130;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 27:                  ret                    // ret;
  1:                 meta    7    0   27     // function end: 28; // REWRITE
// function Saturn(){
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Saturn (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    return new Body(
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
//       8.34336671824457987e+00,
  5:           assignment  130    3  254     // tmp130 = 8.34336671824458: NUMBER;
  6:                 meta    2  130  255     // 
//       4.12479856412430479e+00,
  7:           assignment  130    3  254     // tmp130 = 4.124798564124305: NUMBER;
  8:                 meta    2  130  255     // 
//       -4.03523417114321381e-01,
  9:           assignment  130    3  254     // tmp130 = 0.4035234171143214: NUMBER;
 10:          unary_minus  131  130          // tmp131 = -tmp130;
 11:                 meta    2  131  255     // 
//       -2.76742510726862411e-03 * DAYS_PER_YEAR,
 12:           assignment  130    3  254     // tmp130 = 0.002767425107268624: NUMBER;
 13:          unary_minus  131  130          // tmp131 = -tmp130;
 14:       multiplication  132  131  254     // tmp132 = tmp131 * DAYS_PER_YEAR;
 15:                 meta    2  132  255     // 
//       4.99852801234917238e-03 * DAYS_PER_YEAR,
 16:           assignment  130    3  254     // tmp130 = 0.004998528012349172: NUMBER;
 17:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 18:                 meta    2  131  255     // 
//       2.30417297573763929e-05 * DAYS_PER_YEAR,
 19:           assignment  130    3  254     // tmp130 = 0.000023041729757376393: NUMBER;
 20:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 21:                 meta    2  131  255     // 
//       2.85885980666130812e-04 * SOLAR_MASS
 22:           assignment  130    3  254     // tmp130 = 0.0002858859806661308: NUMBER;
//    );
 23:       multiplication  131  130  254     // tmp131 = tmp130 * SOLAR_MASS;
 24:                 meta    2  131  255     // 
  4:          construct_n  130  254    7     //  // REWRITE
 25:               retval  130               // return tmp130;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 26:                  ret                    // ret;
  1:                 meta    7    0   26     // function end: 27; // REWRITE
// function Uranus(){
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Uranus (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    return new Body(
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
//       1.28943695621391310e+01,
  5:           assignment  130    3  254     // tmp130 = 12.894369562139131: NUMBER;
  6:                 meta    2  130  255     // 
//       -1.51111514016986312e+01,
  7:           assignment  130    3  254     // tmp130 = 15.111151401698631: NUMBER;
  8:          unary_minus  131  130          // tmp131 = -tmp130;
  9:                 meta    2  131  255     // 
//       -2.23307578892655734e-01,
 10:           assignment  130    3  254     // tmp130 = 0.22330757889265573: NUMBER;
 11:          unary_minus  131  130          // tmp131 = -tmp130;
 12:                 meta    2  131  255     // 
//       2.96460137564761618e-03 * DAYS_PER_YEAR,
 13:           assignment  130    3  254     // tmp130 = 0.002964601375647616: NUMBER;
 14:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 15:                 meta    2  131  255     // 
//       2.37847173959480950e-03 * DAYS_PER_YEAR,
 16:           assignment  130    3  254     // tmp130 = 0.0023784717395948095: NUMBER;
 17:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 18:                 meta    2  131  255     // 
//       -2.96589568540237556e-05 * DAYS_PER_YEAR,
 19:           assignment  130    3  254     // tmp130 = 0.000029658956854023755: NUMBER;
 20:          unary_minus  131  130          // tmp131 = -tmp130;
 21:       multiplication  132  131  254     // tmp132 = tmp131 * DAYS_PER_YEAR;
 22:                 meta    2  132  255     // 
//       4.36624404335156298e-05 * SOLAR_MASS
 23:           assignment  130    3  254     // tmp130 = 0.00004366244043351563: NUMBER;
//    );
 24:       multiplication  131  130  254     // tmp131 = tmp130 * SOLAR_MASS;
 25:                 meta    2  131  255     // 
  4:          construct_n  130  254    7     //  // REWRITE
 26:               retval  130               // return tmp130;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 27:                  ret                    // ret;
  1:                 meta    7    0   27     // function end: 28; // REWRITE
// function Neptune(){
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Neptune (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    return new Body(
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
//       1.53796971148509165e+01,
  5:           assignment  130    3  254     // tmp130 = 15.379697114850916: NUMBER;
  6:                 meta    2  130  255     // 
//       -2.59193146099879641e+01,
  7:           assignment  130    3  254     // tmp130 = 25.919314609987964: NUMBER;
  8:          unary_minus  131  130          // tmp131 = -tmp130;
  9:                 meta    2  131  255     // 
//       1.79258772950371181e-01,
 10:           assignment  130    3  254     // tmp130 = 0.17925877295037118: NUMBER;
 11:                 meta    2  130  255     // 
//       2.68067772490389322e-03 * DAYS_PER_YEAR,
 12:           assignment  130    3  254     // tmp130 = 0.0026806777249038932: NUMBER;
 13:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 14:                 meta    2  131  255     // 
//       1.62824170038242295e-03 * DAYS_PER_YEAR,
 15:           assignment  130    3  254     // tmp130 = 0.001628241700382423: NUMBER;
 16:       multiplication  131  130  254     // tmp131 = tmp130 * DAYS_PER_YEAR;
 17:                 meta    2  131  255     // 
//       -9.51592254519715870e-05 * DAYS_PER_YEAR,
 18:           assignment  130    3  254     // tmp130 = 0.00009515922545197159: NUMBER;
 19:          unary_minus  131  130          // tmp131 = -tmp130;
 20:       multiplication  132  131  254     // tmp132 = tmp131 * DAYS_PER_YEAR;
 21:                 meta    2  132  255     // 
//       5.15138902046611451e-05 * SOLAR_MASS
 22:           assignment  130    3  254     // tmp130 = 0.000051513890204661145: NUMBER;
//    );
 23:       multiplication  131  130  254     // tmp131 = tmp130 * SOLAR_MASS;
 24:                 meta    2  131  255     // 
  4:          construct_n  130  254    7     //  // REWRITE
 25:               retval  130               // return tmp130;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 26:                  ret                    // ret;
  1:                 meta    7    0   26     // function end: 27; // REWRITE
// function Sun(){
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function Sun (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    return new Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS);
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:           assignment  130    3  254     // tmp130 = 0: NUMBER;
  6:                 meta    2  130  255     // 
  7:           assignment  130    3  254     // tmp130 = 0: NUMBER;
  8:                 meta    2  130  255     // 
  9:           assignment  130    3  254     // tmp130 = 0: NUMBER;
 10:                 meta    2  130  255     // 
 11:           assignment  130    3  254     // tmp130 = 0: NUMBER;
 12:                 meta    2  130  255     // 
 13:           assignment  130    3  254     // tmp130 = 0: NUMBER;
 14:                 meta    2  130  255     // 
 15:           assignment  130    3  254     // tmp130 = 0: NUMBER;
 16:                 meta    2  130  255     // 
 17:                 meta    2  254  255     // 
  4:          construct_n  130  254    7     //  // REWRITE
 18:               retval  130               // return tmp130;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  130    0     // var tmp128 .. tmp130; // REWRITE
 19:                  ret                    // ret;
  1:                 meta    7    0   19     // function end: 20; // REWRITE
// function NBodySystem(bodies){
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//    this.bodies = bodies;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:         this_binding  130               // tmp130 = this;
  6:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
  7:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  7:          prop_setter  130  131  254     // tmp130[tmp131] = bodies;
//    var px = 0.0;
  8:           assignment  130    3  254     // tmp130 = 0: NUMBER;
  9:           assignment  254    6  130     // px = tmp130 : TYPEOF(tmp130);
//    var py = 0.0;
 10:           assignment  130    3  254     // tmp130 = 0: NUMBER;
 11:           assignment  254    6  130     // py = tmp130 : TYPEOF(tmp130);
//    var pz = 0.0;
 12:           assignment  130    3  254     // tmp130 = 0: NUMBER;
 13:           assignment  254    6  130     // pz = tmp130 : TYPEOF(tmp130);
//    var size = this.bodies.length;
 14:         this_binding  130               // tmp130 = this;
 15:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 16:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 17:           assignment  133    5  254     // tmp133 = 'length': STRING;
 18:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 19:           assignment  254    6  134     // size = tmp134 : TYPEOF(tmp134);
//    for (var i=0; i<size; i++){
 20:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 21:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 22:             jmp_down  253  253          // goto 65043;
//       var b = this.bodies[i];
 23:         this_binding  130               // tmp130 = this;
 24:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 25:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 26:          prop_getter  133  132  254     // tmp133 = tmp132[i];
 27:           assignment  254    6  133     // b = tmp133 : TYPEOF(tmp133);
//       var m = b.mass;
 28:           assignment  130    5  254     // tmp130 = 'mass': STRING;
 29:          prop_getter  131  254  130     // tmp131 = b[tmp130];
 30:           assignment  254    6  131     // m = tmp131 : TYPEOF(tmp131);
//       px += b.vx * m;
 31:           assignment  130    5  254     // tmp130 = 'vx': STRING;
 32:          prop_getter  131  254  130     // tmp131 = b[tmp130];
 33:       multiplication  132  131  254     // tmp132 = tmp131 * m;
 34:             addition  254  254  132     // px = px + tmp132;
 35:           assignment  133    6  254     // tmp133 = px : TYPEOF(px);
//       py += b.vy * m;
 36:           assignment  130    5  254     // tmp130 = 'vy': STRING;
 37:          prop_getter  131  254  130     // tmp131 = b[tmp130];
 38:       multiplication  132  131  254     // tmp132 = tmp131 * m;
 39:             addition  254  254  132     // py = py + tmp132;
 40:           assignment  133    6  254     // tmp133 = py : TYPEOF(py);
//       pz += b.vz * m;
 41:           assignment  130    5  254     // tmp130 = 'vz': STRING;
 42:          prop_getter  131  254  130     // tmp131 = b[tmp130];
 43:       multiplication  132  131  254     // tmp132 = tmp131 * m;
 44:             addition  254  254  132     // pz = pz + tmp132;
 45:           assignment  133    6  254     // tmp133 = pz : TYPEOF(pz);
//    }
 46:            post_incr  134  254          // tmp134 = i++;
 22:             jmp_down    0   25          // goto 47; // REWRITE
 47:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
 48:            less_than  136  135  254     // tmp136 = tmp135 < size;
 49:       is_true_jmp_up  136    0   26     // if (tmp136) goto 23;
//    this.bodies[0].offsetMomentum(px,py,pz);
 50:         this_binding  130               // tmp130 = this;
 51:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 52:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 53:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 54:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 55:           assignment  135    5  254     // tmp135 = 'offsetMomentum': STRING;
 56:          prop_getter  136  134  135     // tmp136 = tmp134[tmp135];
 57:               call_n  253  136  253     // 
 58:                 meta    1    1  134     // 
 59:                 meta    2  254  255     // 
 60:                 meta    2  254  255     // 
 61:                 meta    2  254  255     // 
 57:               call_n  137  136    3     //  // REWRITE
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  144    7     // var tmp128 .. tmp144; // REWRITE
 62:                  ret                    // ret;
  2:                 meta    7    0   61     // function end: 63; // REWRITE
// NBodySystem.prototype.advance = function(dt){
 39:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
 40:          prop_getter  131  254  130     // tmp131 = NBodySystem[tmp130];
 41:           assignment  132    5  254     // tmp132 = 'advance': STRING;
 42:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  0:          func_expr_n  134  255    1     //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//    var dx, dy, dz, distance, mag;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
//    var size = this.bodies.length;
  5:         this_binding  130               // tmp130 = this;
  6:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
  7:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  8:           assignment  133    5  254     // tmp133 = 'length': STRING;
  9:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 10:           assignment  254    6  134     // size = tmp134 : TYPEOF(tmp134);
//    for (var i=0; i<size; i++) {
 11:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 12:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 13:             jmp_down  253  253          // goto 65034;
//       var bodyi = this.bodies[i];
 14:         this_binding  130               // tmp130 = this;
 15:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 16:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 17:          prop_getter  133  132  254     // tmp133 = tmp132[i];
 18:           assignment  254    6  133     // bodyi = tmp133 : TYPEOF(tmp133);
//       for (var j=i+1; j<size; j++) {
 19:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
 20:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 21:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 22:           assignment  254    6  132     // j = tmp132 : TYPEOF(tmp132);
 23:             jmp_down  253  253          // goto 65044;
//          var bodyj = this.bodies[j];
 24:         this_binding  130               // tmp130 = this;
 25:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 26:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 27:          prop_getter  133  132  254     // tmp133 = tmp132[j];
 28:           assignment  254    6  133     // bodyj = tmp133 : TYPEOF(tmp133);
//          dx = bodyi.x - bodyj.x;
 29:           assignment  130    5  254     // tmp130 = 'x': STRING;
 30:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 31:           assignment  132    5  254     // tmp132 = 'x': STRING;
 32:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 33:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
 34:           assignment  254    6  134     // dx = tmp134 : TYPEOF(tmp134);
//          dy = bodyi.y - bodyj.y;
 35:           assignment  130    5  254     // tmp130 = 'y': STRING;
 36:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 37:           assignment  132    5  254     // tmp132 = 'y': STRING;
 38:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 39:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
 40:           assignment  254    6  134     // dy = tmp134 : TYPEOF(tmp134);
//          dz = bodyi.z - bodyj.z;
 41:           assignment  130    5  254     // tmp130 = 'z': STRING;
 42:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 43:           assignment  132    5  254     // tmp132 = 'z': STRING;
 44:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 45:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
 46:           assignment  254    6  134     // dz = tmp134 : TYPEOF(tmp134);
//          distance = Math.sqrt(dx*dx + dy*dy + dz*dz);
 47:           assignment  130    5  254     // tmp130 = 'sqrt': STRING;
 48:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 49:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 50:               call_n  253  131  253     // 
 51:                 meta    1    1  132     // 
 52:           assignment  133    6  254     // tmp133 = dx : TYPEOF(dx);
 53:       multiplication  134  133  254     // tmp134 = tmp133 * dx;
 54:           assignment  135    6  254     // tmp135 = dy : TYPEOF(dy);
 55:       multiplication  136  135  254     // tmp136 = tmp135 * dy;
 56:             addition  137  134  136     // tmp137 = tmp134 + tmp136;
 57:           assignment  138    6  254     // tmp138 = dz : TYPEOF(dz);
 58:       multiplication  139  138  254     // tmp139 = tmp138 * dz;
 59:             addition  140  137  139     // tmp140 = tmp137 + tmp139;
 60:                 meta    2  140  255     // 
 50:               call_n  133  131    1     //  // REWRITE
 61:           assignment  254    6  133     // distance = tmp133 : TYPEOF(tmp133);
//          mag = dt / (distance * distance * distance);
 62:           assignment  130    6  254     // tmp130 = dt : TYPEOF(dt);
 63:           assignment  131    6  254     // tmp131 = distance : TYPEOF(distance);
 64:       multiplication  132  131  254     // tmp132 = tmp131 * distance;
 65:       multiplication  133  132  254     // tmp133 = tmp132 * distance;
 66:             division  134  130  133     // tmp134 = tmp130 / tmp133;
 67:           assignment  254    6  134     // mag = tmp134 : TYPEOF(tmp134);
//          bodyi.vx -= dx * bodyj.mass * mag;
 68:           assignment  130    5  254     // tmp130 = 'vx': STRING;
 69:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 69:           assignment  132    6  254     // tmp132 = dx : TYPEOF(dx);
 70:           assignment  133    5  254     // tmp133 = 'mass': STRING;
 71:          prop_getter  134  254  133     // tmp134 = bodyj[tmp133];
 72:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
 73:       multiplication  136  135  254     // tmp136 = tmp135 * mag;
 74:          prop_getter  137  254  130     // tmp137 = bodyi[tmp130];
 75:         substraction  137  137  136     // tmp137 = tmp137 - tmp136;
 76:          prop_setter  254  130  137     // bodyi[tmp130] = tmp137;
//          bodyi.vy -= dy * bodyj.mass * mag;
 77:           assignment  130    5  254     // tmp130 = 'vy': STRING;
 78:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 78:           assignment  132    6  254     // tmp132 = dy : TYPEOF(dy);
 79:           assignment  133    5  254     // tmp133 = 'mass': STRING;
 80:          prop_getter  134  254  133     // tmp134 = bodyj[tmp133];
 81:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
 82:       multiplication  136  135  254     // tmp136 = tmp135 * mag;
 83:          prop_getter  137  254  130     // tmp137 = bodyi[tmp130];
 84:         substraction  137  137  136     // tmp137 = tmp137 - tmp136;
 85:          prop_setter  254  130  137     // bodyi[tmp130] = tmp137;
//          bodyi.vz -= dz * bodyj.mass * mag;
 86:           assignment  130    5  254     // tmp130 = 'vz': STRING;
 87:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 87:           assignment  132    6  254     // tmp132 = dz : TYPEOF(dz);
 88:           assignment  133    5  254     // tmp133 = 'mass': STRING;
 89:          prop_getter  134  254  133     // tmp134 = bodyj[tmp133];
 90:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
 91:       multiplication  136  135  254     // tmp136 = tmp135 * mag;
 92:          prop_getter  137  254  130     // tmp137 = bodyi[tmp130];
 93:         substraction  137  137  136     // tmp137 = tmp137 - tmp136;
 94:          prop_setter  254  130  137     // bodyi[tmp130] = tmp137;
//          bodyj.vx += dx * bodyi.mass * mag;
 95:           assignment  130    5  254     // tmp130 = 'vx': STRING;
 96:          prop_getter  131  254  130     // tmp131 = bodyj[tmp130];
 96:           assignment  132    6  254     // tmp132 = dx : TYPEOF(dx);
 97:           assignment  133    5  254     // tmp133 = 'mass': STRING;
 98:          prop_getter  134  254  133     // tmp134 = bodyi[tmp133];
 99:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
100:       multiplication  136  135  254     // tmp136 = tmp135 * mag;
101:          prop_getter  137  254  130     // tmp137 = bodyj[tmp130];
102:             addition  137  137  136     // tmp137 = tmp137 + tmp136;
103:          prop_setter  254  130  137     // bodyj[tmp130] = tmp137;
//          bodyj.vy += dy * bodyi.mass * mag;
104:           assignment  130    5  254     // tmp130 = 'vy': STRING;
105:          prop_getter  131  254  130     // tmp131 = bodyj[tmp130];
105:           assignment  132    6  254     // tmp132 = dy : TYPEOF(dy);
106:           assignment  133    5  254     // tmp133 = 'mass': STRING;
107:          prop_getter  134  254  133     // tmp134 = bodyi[tmp133];
108:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
109:       multiplication  136  135  254     // tmp136 = tmp135 * mag;
110:          prop_getter  137  254  130     // tmp137 = bodyj[tmp130];
111:             addition  137  137  136     // tmp137 = tmp137 + tmp136;
112:          prop_setter  254  130  137     // bodyj[tmp130] = tmp137;
//          bodyj.vz += dz * bodyi.mass * mag;
113:           assignment  130    5  254     // tmp130 = 'vz': STRING;
114:          prop_getter  131  254  130     // tmp131 = bodyj[tmp130];
114:           assignment  132    6  254     // tmp132 = dz : TYPEOF(dz);
115:           assignment  133    5  254     // tmp133 = 'mass': STRING;
116:          prop_getter  134  254  133     // tmp134 = bodyi[tmp133];
117:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
118:       multiplication  136  135  254     // tmp136 = tmp135 * mag;
119:          prop_getter  137  254  130     // tmp137 = bodyj[tmp130];
120:             addition  137  137  136     // tmp137 = tmp137 + tmp136;
121:          prop_setter  254  130  137     // bodyj[tmp130] = tmp137;
//       }
122:            post_incr  138  254          // tmp138 = j++;
 23:             jmp_down    0  100          // goto 123; // REWRITE
123:           assignment  139    6  254     // tmp139 = j : TYPEOF(j);
124:            less_than  140  139  254     // tmp140 = tmp139 < size;
125:       is_true_jmp_up  140    0  101     // if (tmp140) goto 24;
//    }
126:            post_incr  141  254          // tmp141 = i++;
 13:             jmp_down    0  114          // goto 127; // REWRITE
127:           assignment  142    6  254     // tmp142 = i : TYPEOF(i);
128:            less_than  143  142  254     // tmp143 = tmp142 < size;
129:       is_true_jmp_up  143    0  115     // if (tmp143) goto 14;
//    for (var i=0; i<size; i++) {
130:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
131:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
132:             jmp_down  253  253          // goto 65153;
//       var body = this.bodies[i];
133:         this_binding  130               // tmp130 = this;
134:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
135:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
136:          prop_getter  133  132  254     // tmp133 = tmp132[i];
137:           assignment  254    6  133     // body = tmp133 : TYPEOF(tmp133);
//       body.x += dt * body.vx;
138:           assignment  130    5  254     // tmp130 = 'x': STRING;
139:          prop_getter  131  254  130     // tmp131 = body[tmp130];
139:           assignment  132    6  254     // tmp132 = dt : TYPEOF(dt);
140:           assignment  133    5  254     // tmp133 = 'vx': STRING;
141:          prop_getter  134  254  133     // tmp134 = body[tmp133];
142:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
143:          prop_getter  136  254  130     // tmp136 = body[tmp130];
144:             addition  136  136  135     // tmp136 = tmp136 + tmp135;
145:          prop_setter  254  130  136     // body[tmp130] = tmp136;
//       body.y += dt * body.vy;
146:           assignment  130    5  254     // tmp130 = 'y': STRING;
147:          prop_getter  131  254  130     // tmp131 = body[tmp130];
147:           assignment  132    6  254     // tmp132 = dt : TYPEOF(dt);
148:           assignment  133    5  254     // tmp133 = 'vy': STRING;
149:          prop_getter  134  254  133     // tmp134 = body[tmp133];
150:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
151:          prop_getter  136  254  130     // tmp136 = body[tmp130];
152:             addition  136  136  135     // tmp136 = tmp136 + tmp135;
153:          prop_setter  254  130  136     // body[tmp130] = tmp136;
//       body.z += dt * body.vz;
154:           assignment  130    5  254     // tmp130 = 'z': STRING;
155:          prop_getter  131  254  130     // tmp131 = body[tmp130];
155:           assignment  132    6  254     // tmp132 = dt : TYPEOF(dt);
156:           assignment  133    5  254     // tmp133 = 'vz': STRING;
157:          prop_getter  134  254  133     // tmp134 = body[tmp133];
158:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
159:          prop_getter  136  254  130     // tmp136 = body[tmp130];
160:             addition  136  136  135     // tmp136 = tmp136 + tmp135;
161:          prop_setter  254  130  136     // body[tmp130] = tmp136;
//    }
162:            post_incr  137  254          // tmp137 = i++;
132:             jmp_down    0   31          // goto 163; // REWRITE
163:           assignment  138    6  254     // tmp138 = i : TYPEOF(i);
164:            less_than  139  138  254     // tmp139 = tmp138 < size;
165:       is_true_jmp_up  139    0   32     // if (tmp139) goto 133;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  154   11     // var tmp128 .. tmp154; // REWRITE
166:                  ret                    // ret;
  2:                 meta    7    0  165     // function end: 167; // REWRITE
// NBodySystem.prototype.energy = function(){
209:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
210:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
211:          prop_getter  131  254  130     // tmp131 = NBodySystem[tmp130];
212:           assignment  132    5  254     // tmp132 = 'energy': STRING;
213:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  0:          func_expr_n  134  255    0     // tmp134 = function (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//    var dx, dy, dz, distance;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
//    var e = 0.0;
  4:           assignment  130    3  254     // tmp130 = 0: NUMBER;
  5:           assignment  254    6  130     // e = tmp130 : TYPEOF(tmp130);
//    var size = this.bodies.length;
  6:         this_binding  130               // tmp130 = this;
  7:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
  8:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
  9:           assignment  133    5  254     // tmp133 = 'length': STRING;
 10:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 11:           assignment  254    6  134     // size = tmp134 : TYPEOF(tmp134);
//    for (var i=0; i<size; i++) {
 12:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 13:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 14:             jmp_down  253  253          // goto 65035;
//       var bodyi = this.bodies[i];
 15:         this_binding  130               // tmp130 = this;
 16:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 17:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 18:          prop_getter  133  132  254     // tmp133 = tmp132[i];
 19:           assignment  254    6  133     // bodyi = tmp133 : TYPEOF(tmp133);
//       e += 0.5 * bodyi.mass *
 20:           assignment  130    3  254     // tmp130 = 0.5: NUMBER;
 21:           assignment  131    5  254     // tmp131 = 'mass': STRING;
 22:          prop_getter  132  254  131     // tmp132 = bodyi[tmp131];
 23:       multiplication  133  130  132     // tmp133 = tmp130 * tmp132;
//          ( bodyi.vx * bodyi.vx
 24:           assignment  134    5  254     // tmp134 = 'vx': STRING;
 25:          prop_getter  135  254  134     // tmp135 = bodyi[tmp134];
 26:           assignment  136    5  254     // tmp136 = 'vx': STRING;
//          + bodyi.vy * bodyi.vy
 27:          prop_getter  137  254  136     // tmp137 = bodyi[tmp136];
 28:       multiplication  138  135  137     // tmp138 = tmp135 * tmp137;
 29:           assignment  139    5  254     // tmp139 = 'vy': STRING;
 30:          prop_getter  140  254  139     // tmp140 = bodyi[tmp139];
 31:           assignment  141    5  254     // tmp141 = 'vy': STRING;
//          + bodyi.vz * bodyi.vz );
 32:          prop_getter  142  254  141     // tmp142 = bodyi[tmp141];
 33:       multiplication  143  140  142     // tmp143 = tmp140 * tmp142;
 34:             addition  144  138  143     // tmp144 = tmp138 + tmp143;
 35:           assignment  145    5  254     // tmp145 = 'vz': STRING;
 36:          prop_getter  146  254  145     // tmp146 = bodyi[tmp145];
 37:           assignment  147    5  254     // tmp147 = 'vz': STRING;
 38:          prop_getter  148  254  147     // tmp148 = bodyi[tmp147];
 39:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
 40:             addition  150  144  149     // tmp150 = tmp144 + tmp149;
 41:       multiplication  151  133  150     // tmp151 = tmp133 * tmp150;
 42:             addition  254  254  151     // e = e + tmp151;
 43:           assignment  152    6  254     // tmp152 = e : TYPEOF(e);
//       for (var j=i+1; j<size; j++) {
 44:           assignment  130    6  254     // tmp130 = i : TYPEOF(i);
 45:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 46:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
 47:           assignment  254    6  132     // j = tmp132 : TYPEOF(tmp132);
 48:             jmp_down  253  253          // goto 65069;
//          var bodyj = this.bodies[j];
 49:         this_binding  130               // tmp130 = this;
 50:           assignment  131    5  254     // tmp131 = 'bodies': STRING;
 51:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
 52:          prop_getter  133  132  254     // tmp133 = tmp132[j];
 53:           assignment  254    6  133     // bodyj = tmp133 : TYPEOF(tmp133);
//          dx = bodyi.x - bodyj.x;
 54:           assignment  130    5  254     // tmp130 = 'x': STRING;
 55:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 56:           assignment  132    5  254     // tmp132 = 'x': STRING;
 57:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 58:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
 59:           assignment  254    6  134     // dx = tmp134 : TYPEOF(tmp134);
//          dy = bodyi.y - bodyj.y;
 60:           assignment  130    5  254     // tmp130 = 'y': STRING;
 61:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 62:           assignment  132    5  254     // tmp132 = 'y': STRING;
 63:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 64:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
 65:           assignment  254    6  134     // dy = tmp134 : TYPEOF(tmp134);
//          dz = bodyi.z - bodyj.z;
 66:           assignment  130    5  254     // tmp130 = 'z': STRING;
 67:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 68:           assignment  132    5  254     // tmp132 = 'z': STRING;
 69:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 70:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
 71:           assignment  254    6  134     // dz = tmp134 : TYPEOF(tmp134);
//          distance = Math.sqrt(dx*dx + dy*dy + dz*dz);
 72:           assignment  130    5  254     // tmp130 = 'sqrt': STRING;
 73:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 74:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 75:               call_n  253  131  253     // 
 76:                 meta    1    1  132     // 
 77:           assignment  133    6  254     // tmp133 = dx : TYPEOF(dx);
 78:       multiplication  134  133  254     // tmp134 = tmp133 * dx;
 79:           assignment  135    6  254     // tmp135 = dy : TYPEOF(dy);
 80:       multiplication  136  135  254     // tmp136 = tmp135 * dy;
 81:             addition  137  134  136     // tmp137 = tmp134 + tmp136;
 82:           assignment  138    6  254     // tmp138 = dz : TYPEOF(dz);
 83:       multiplication  139  138  254     // tmp139 = tmp138 * dz;
 84:             addition  140  137  139     // tmp140 = tmp137 + tmp139;
 85:                 meta    2  140  255     // 
 75:               call_n  133  131    1     //  // REWRITE
 86:           assignment  254    6  133     // distance = tmp133 : TYPEOF(tmp133);
//          e -= (bodyi.mass * bodyj.mass) / distance;
 87:           assignment  130    5  254     // tmp130 = 'mass': STRING;
 88:          prop_getter  131  254  130     // tmp131 = bodyi[tmp130];
 89:           assignment  132    5  254     // tmp132 = 'mass': STRING;
 90:          prop_getter  133  254  132     // tmp133 = bodyj[tmp132];
 91:       multiplication  134  131  133     // tmp134 = tmp131 * tmp133;
 92:             division  135  134  254     // tmp135 = tmp134 / distance;
 93:         substraction  254  254  135     // e = e - tmp135;
 94:           assignment  136    6  254     // tmp136 = e : TYPEOF(e);
//       }
 95:            post_incr  137  254          // tmp137 = j++;
 48:             jmp_down    0   48          // goto 96; // REWRITE
 96:           assignment  138    6  254     // tmp138 = j : TYPEOF(j);
 97:            less_than  139  138  254     // tmp139 = tmp138 < size;
 98:       is_true_jmp_up  139    0   49     // if (tmp139) goto 49;
//    }
 99:            post_incr  140  254          // tmp140 = i++;
 14:             jmp_down    0   86          // goto 100; // REWRITE
100:           assignment  141    6  254     // tmp141 = i : TYPEOF(i);
101:            less_than  142  141  254     // tmp142 = tmp141 < size;
102:       is_true_jmp_up  142    0   87     // if (tmp142) goto 15;
//    return e;
103:               retval  254               // return e;
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  162   10     // var tmp128 .. tmp162; // REWRITE
104:                  ret                    // ret;
  1:                 meta    7    0  104     // function end: 105; // REWRITE
// var ret = 0;
318:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
319:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
320:           assignment  254    6  130     // ret = tmp130 : TYPEOF(tmp130);
// for ( var n = 3; n <= 24; n *= 2 ) {
321:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
322:           assignment  254    6  130     // n = tmp130 : TYPEOF(tmp130);
323:             jmp_down  253  253          // goto 65344;
//     (function(){
  0:          func_expr_n  253  255  253     // 
  0:          func_expr_n  130  255    0     // tmp130 = function (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
//         var bodies = new NBodySystem( Array(
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  4:          construct_n  253  254  253     // 
  5:               call_n  253  254  253     // 
//            Sun(),Jupiter(),Saturn(),Uranus(),Neptune()
  6:               call_n  253  254  253     // 
  6:               call_n  130  254    0     //  // REWRITE
  7:                 meta    2  130  255     // 
  8:               call_n  253  254  253     // 
  8:               call_n  130  254    0     //  // REWRITE
  9:                 meta    2  130  255     // 
 10:               call_n  253  254  253     // 
 10:               call_n  130  254    0     //  // REWRITE
 11:                 meta    2  130  255     // 
 12:               call_n  253  254  253     // 
 12:               call_n  130  254    0     //  // REWRITE
 13:                 meta    2  130  255     // 
 14:               call_n  253  254  253     // 
 14:               call_n  130  254    0     //  // REWRITE
//         ));
 15:                 meta    2  130  255     // 
  5:               call_n  130  254    5     //  // REWRITE
 16:                 meta    2  130  255     // 
  4:          construct_n  130  254    1     //  // REWRITE
 17:           assignment  254    6  130     // bodies = tmp130 : TYPEOF(tmp130);
//         var max = n * 100;
 18:           assignment  130    6  254     // tmp130 = n : TYPEOF(n);
 19:           assignment  131    1  100     // tmp131 = 100: SMALLINT;
 20:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 21:           assignment  254    6  132     // max = tmp132 : TYPEOF(tmp132);
//         
//         ret += bodies.energy();
 22:           assignment  130    5  254     // tmp130 = 'energy': STRING;
 23:          prop_getter  131  254  130     // tmp131 = bodies[tmp130];
 24:           assignment  132    6  254     // tmp132 = bodies : TYPEOF(bodies);
 25:               call_n  253  131  253     // 
 26:                 meta    1    1  132     // 
 25:               call_n  133  131    0     //  // REWRITE
 27:             addition  254  254  133     // ret = ret + tmp133;
 28:           assignment  134    6  254     // tmp134 = ret : TYPEOF(ret);
//         for (var i=0; i<max; i++){
 29:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 30:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 31:             jmp_down  253  253          // goto 65052;
//             bodies.advance(0.01);
 32:           assignment  130    5  254     // tmp130 = 'advance': STRING;
 33:          prop_getter  131  254  130     // tmp131 = bodies[tmp130];
 34:           assignment  132    6  254     // tmp132 = bodies : TYPEOF(bodies);
 35:               call_n  253  131  253     // 
 36:                 meta    1    1  132     // 
 37:           assignment  133    3  254     // tmp133 = 0.01: NUMBER;
 38:                 meta    2  133  255     // 
 35:               call_n  133  131    1     //  // REWRITE
//         }
 39:            post_incr  134  254          // tmp134 = i++;
 31:             jmp_down    0    9          // goto 40; // REWRITE
 40:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
 41:            less_than  136  135  254     // tmp136 = tmp135 < max;
 42:       is_true_jmp_up  136    0   10     // if (tmp136) goto 32;
//         ret += bodies.energy();
 43:           assignment  130    5  254     // tmp130 = 'energy': STRING;
 44:          prop_getter  131  254  130     // tmp131 = bodies[tmp130];
 45:           assignment  132    6  254     // tmp132 = bodies : TYPEOF(bodies);
 46:               call_n  253  131  253     // 
 47:                 meta    1    1  132     // 
 46:               call_n  133  131    0     //  // REWRITE
 48:             addition  254  254  133     // ret = ret + tmp133;
 49:           assignment  134    6  254     // tmp134 = ret : TYPEOF(ret);
//     })();
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  139    3     // var tmp128 .. tmp139; // REWRITE
 50:                  ret                    // ret;
  1:                 meta    7    0   50     // function end: 51; // REWRITE
375:               call_n  253  130  253     // 
375:               call_n  131  130    0     //  // REWRITE
// }
376:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
377:       multiplication  254  254  132     // n = n * tmp132;
323:             jmp_down    0   55          // goto 378; // REWRITE
378:           assignment  133    6  254     // tmp133 = n : TYPEOF(n);
379:           assignment  134    1   24     // tmp134 = 24: SMALLINT;
380:   less_or_equal_than  135  133  134     // tmp135 = tmp133 <= tmp134;
381:       is_true_jmp_up  135    0   57     // if (tmp135) goto 324;
// var expected = -1.3524862408537381;
382:           assignment  130    3  254     // tmp130 = 1.3524862408537381: NUMBER;
383:          unary_minus  131  130          // tmp131 = -tmp130;
384:           assignment  254    6  131     // expected = tmp131 : TYPEOF(tmp131);
// if (ret != expected)
385:           assignment  130    6  254     // tmp130 = ret : TYPEOF(ret);
386:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
387:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65408;
//     throw "ERROR: bad result: expected " + expected + " but got " + ret;
388:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
389:             addition  131  130  254     // tmp131 = tmp130 + expected;
390:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
391:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
392:             addition  134  133  254     // tmp134 = tmp133 + ret;
393:          throw_value  134               // throw tmp134;
// 
387:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 394; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135; // REWRITE
394:                  ret                    // ret;
LITERALS:
0x8a54c4 [  4] PI : MAGIC STRING [id=81] 
0x8a54c8 [ 12] 3.141592653589793 : NUMBER
0x8a54d4 [ 16] SOLAR_MASS : STRING
0x8a54e4 [ 20] DAYS_PER_YEAR : STRING
0x8a54f8 [ 12] 365.24 : NUMBER
0x8a5508 [ 12] Body : STRING
0x8a5514 [  8] x : STRING
0x8a551c [  8] y : STRING
0x8a5524 [  8] z : STRING
0x8a552c [  8] vx : STRING
0x8a5534 [  8] vy : STRING
0x8a553c [  8] vz : STRING
0x8a5548 [ 12] mass : STRING
0x8a5554 [  4] prototype : MAGIC STRING [id=2] 
0x8a5558 [ 20] offsetMomentum : STRING
0x8a556c [  8] px : STRING
0x8a5574 [  8] py : STRING
0x8a557c [  8] pz : STRING
0x8a5588 [ 16] Jupiter : STRING
0x8a5598 [ 12] 4.841431442464721 : NUMBER
0x8a55a4 [ 12] 1.1603200440274283 : NUMBER
0x8a55b0 [ 12] 0.10362204447112311 : NUMBER
0x8a55bc [ 12] 0.001660076642744037 : NUMBER
0x8a55cc [ 12] 0.007699011184197404 : NUMBER
0x8a55d8 [ 12] 0.0000690460016972063 : NUMBER
0x8a55e4 [ 12] 0.0009547919384243266 : NUMBER
0x8a55f0 [ 12] Saturn : STRING
0x8a55fc [ 12] 8.34336671824458 : NUMBER
0x8a560c [ 12] 4.124798564124305 : NUMBER
0x8a5618 [ 12] 0.4035234171143214 : NUMBER
0x8a5624 [ 12] 0.002767425107268624 : NUMBER
0x8a5630 [ 12] 0.004998528012349172 : NUMBER
0x8a563c [ 12] 0.000023041729757376393 : NUMBER
0x8a564c [ 12] 0.0002858859806661308 : NUMBER
0x8a5658 [ 12] Uranus : STRING
0x8a5664 [ 12] 12.894369562139131 : NUMBER
0x8a5670 [ 12] 15.111151401698631 : NUMBER
0x8a567c [ 12] 0.22330757889265573 : NUMBER
0x8a568c [ 12] 0.002964601375647616 : NUMBER
0x8a5698 [ 12] 0.0023784717395948095 : NUMBER
0x8a56a4 [ 12] 0.000029658956854023755 : NUMBER
0x8a56b0 [ 12] 0.00004366244043351563 : NUMBER
0x8a56bc [ 16] Neptune : STRING
0x8a56d0 [ 12] 15.379697114850916 : NUMBER
0x8a56dc [ 12] 25.919314609987964 : NUMBER
0x8a56e8 [ 12] 0.17925877295037118 : NUMBER
0x8a56f4 [ 12] 0.0026806777249038932 : NUMBER
0x8a5704 [ 12] 0.001628241700382423 : NUMBER
0x8a5710 [ 12] 0.00009515922545197159 : NUMBER
0x8a571c [ 12] 0.000051513890204661145 : NUMBER
0x8a5728 [ 12] Sun : STRING
0x8a5734 [ 12] 0 : NUMBER
0x8a5744 [ 20] NBodySystem : STRING
0x8a5758 [ 12] bodies : STRING
0x8a5764 [ 12] size : STRING
0x8a5770 [  4] length : MAGIC STRING [id=15] 
0x8a5774 [  4] i : MAGIC STRING [id=207] 
0x8a5778 [  8] b : STRING
0x8a5784 [  4] m : MAGIC STRING [id=208] 
0x8a5788 [ 16] advance : STRING
0x8a5798 [  8] dt : STRING
0x8a57a0 [  8] dx : STRING
0x8a57a8 [  8] dy : STRING
0x8a57b0 [  8] dz : STRING
0x8a57b8 [ 16] distance : STRING
0x8a57cc [ 12] mag : STRING
0x8a57d8 [ 12] bodyi : STRING
0x8a57e4 [  8] j : STRING
0x8a57ec [ 12] bodyj : STRING
0x8a57f8 [  4] Math : MAGIC STRING [id=44] 
0x8a57fc [  4] sqrt : MAGIC STRING [id=100] 
0x8a5804 [ 12] body : STRING
0x8a5810 [ 12] energy : STRING
0x8a581c [  8] e : STRING
0x8a5824 [ 12] 0.5 : NUMBER
0x8a5830 [ 12] ret : STRING
0x8a583c [  8] n : STRING
0x8a5848 [  4] Array : MAGIC STRING [id=29] 
0x8a584c [  4] max : MAGIC STRING [id=94] 
0x8a5850 [ 12] 0.01 : NUMBER
0x8a585c [ 16] expected : STRING
0x8a586c [ 12] 1.3524862408537381 : NUMBER
0x8a5878 [ 36] ERROR: bad result: expected  : STRING
0x8a58a0 [ 16]  but got  : STRING
0x8a58b0 [ 16]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135;
  2:             var_decl    0               // var PI;
  3:             var_decl    1               // var SOLAR_MASS;
  4:             var_decl    2               // var DAYS_PER_YEAR;
  5:             var_decl    3               // var ret;
  6:             var_decl    4               // var n;
  7:             var_decl    5               // var expected;
  8:          func_decl_n    6    7          // 
  9:                 meta    2    7  255     // 
 10:                 meta    2    8  255     // 
 11:                 meta    2    9  255     // 
 12:                 meta    2   10  255     // 
 13:                 meta    2   11  255     // 
 14:                 meta    2   12  255     // 
 15:                 meta    2   13  255     // function Body (x, y, z, vx, vy, vz, mass);
 16:                 meta    7    0   25     // function end: 41;
 17:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 18:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
 19:         this_binding  130               // tmp130 = this;
 20:           assignment  131    5    7     // tmp131 = 'x': STRING;
 21:          prop_setter  130  131    7     // tmp130[tmp131] = x;
 22:         this_binding  130               // tmp130 = this;
 23:           assignment  131    5    8     // tmp131 = 'y': STRING;
 24:          prop_setter  130  131    8     // tmp130[tmp131] = y;
 25:         this_binding  130               // tmp130 = this;
 26:           assignment  131    5    9     // tmp131 = 'z': STRING;
 27:          prop_setter  130  131    9     // tmp130[tmp131] = z;
 28:         this_binding  130               // tmp130 = this;
 29:           assignment  131    5   10     // tmp131 = 'vx': STRING;
 30:          prop_setter  130  131   10     // tmp130[tmp131] = vx;
 31:         this_binding  130               // tmp130 = this;
 32:           assignment  131    5   11     // tmp131 = 'vy': STRING;
 33:          prop_setter  130  131   11     // tmp130[tmp131] = vy;
 34:         this_binding  130               // tmp130 = this;
 35:           assignment  131    5   12     // tmp131 = 'vz': STRING;
 36:          prop_setter  130  131   12     // tmp130[tmp131] = vz;
 37:         this_binding  130               // tmp130 = this;
 38:           assignment  131    5   13     // tmp131 = 'mass': STRING;
 39:          prop_setter  130  131   13     // tmp130[tmp131] = mass;
 40:                  ret                    // ret;
 41:          func_decl_n   14    0          // function Jupiter ();
 42:                 meta    7    0   27     // function end: 69;
 43:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 44:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
 45:          construct_n  130    6    7     // 
 46:           assignment  130    3   15     // tmp130 = 4.841431442464721: NUMBER;
 47:                 meta    2  130  255     // 
 48:           assignment  130    3   16     // tmp130 = 1.1603200440274283: NUMBER;
 49:          unary_minus  131  130          // tmp131 = -tmp130;
 50:                 meta    2  131  255     // 
 51:           assignment  130    3   17     // tmp130 = 0.10362204447112311: NUMBER;
 52:          unary_minus  131  130          // tmp131 = -tmp130;
 53:                 meta    2  131  255     // 
 54:           assignment  130    3   18     // tmp130 = 0.001660076642744037: NUMBER;
 55:       multiplication  131  130    2     // tmp131 = tmp130 * DAYS_PER_YEAR;
 56:                 meta    2  131  255     // 
 57:           assignment  130    3   19     // tmp130 = 0.007699011184197404: NUMBER;
 58:       multiplication  131  130    2     // tmp131 = tmp130 * DAYS_PER_YEAR;
 59:                 meta    2  131  255     // 
 60:           assignment  130    3   20     // tmp130 = 0.0000690460016972063: NUMBER;
 61:          unary_minus  131  130          // tmp131 = -tmp130;
 62:       multiplication  132  131    2     // tmp132 = tmp131 * DAYS_PER_YEAR;
 63:                 meta    2  132  255     // 
 64:           assignment  130    3    0     // tmp130 = 0.0009547919384243266: NUMBER;
 65:       multiplication  131  130    1     // tmp131 = tmp130 * SOLAR_MASS;
 66:                 meta    2  131  255     // tmp130 = new Body (tmp130, tmp131, tmp131, tmp131, tmp131, tmp132, tmp131);
 67:               retval  130               // return tmp130;
 68:                  ret                    // ret;
 69:          func_decl_n    2    0          // function Saturn ();
 70:                 meta    7    0   26     // function end: 96;
 71:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 72:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
 73:          construct_n  130    3    7     // 
 74:           assignment  130    3    4     // tmp130 = 8.34336671824458: NUMBER;
 75:                 meta    2  130  255     // 
 76:           assignment  130    3    5     // tmp130 = 4.124798564124305: NUMBER;
 77:                 meta    2  130  255     // 
 78:           assignment  130    3    6     // tmp130 = 0.4035234171143214: NUMBER;
 79:          unary_minus  131  130          // tmp131 = -tmp130;
 80:                 meta    2  131  255     // 
 81:           assignment  130    3    7     // tmp130 = 0.002767425107268624: NUMBER;
 82:          unary_minus  131  130          // tmp131 = -tmp130;
 83:       multiplication  132  131    8     // tmp132 = tmp131 * DAYS_PER_YEAR;
 84:                 meta    2  132  255     // 
 85:           assignment  130    3    9     // tmp130 = 0.004998528012349172: NUMBER;
 86:       multiplication  131  130    8     // tmp131 = tmp130 * DAYS_PER_YEAR;
 87:                 meta    2  131  255     // 
 88:           assignment  130    3   10     // tmp130 = 0.000023041729757376393: NUMBER;
 89:       multiplication  131  130    8     // tmp131 = tmp130 * DAYS_PER_YEAR;
 90:                 meta    2  131  255     // 
 91:           assignment  130    3   11     // tmp130 = 0.0002858859806661308: NUMBER;
 92:       multiplication  131  130    1     // tmp131 = tmp130 * SOLAR_MASS;
 93:                 meta    2  131  255     // tmp130 = new Body (tmp130, tmp130, tmp131, tmp132, tmp131, tmp131, tmp131);
 94:               retval  130               // return tmp130;
 95:                  ret                    // ret;
 96:          func_decl_n   12    0          // function Uranus ();
 97:                 meta    7    0   27     // function end: 124;
 98:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 99:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
100:          construct_n  130    3    7     // 
101:           assignment  130    3   13     // tmp130 = 12.894369562139131: NUMBER;
102:                 meta    2  130  255     // 
103:           assignment  130    3   14     // tmp130 = 15.111151401698631: NUMBER;
104:          unary_minus  131  130          // tmp131 = -tmp130;
105:                 meta    2  131  255     // 
106:           assignment  130    3   15     // tmp130 = 0.22330757889265573: NUMBER;
107:          unary_minus  131  130          // tmp131 = -tmp130;
108:                 meta    2  131  255     // 
109:           assignment  130    3   16     // tmp130 = 0.002964601375647616: NUMBER;
110:       multiplication  131  130    8     // tmp131 = tmp130 * DAYS_PER_YEAR;
111:                 meta    2  131  255     // 
112:           assignment  130    3   17     // tmp130 = 0.0023784717395948095: NUMBER;
113:       multiplication  131  130    8     // tmp131 = tmp130 * DAYS_PER_YEAR;
114:                 meta    2  131  255     // 
115:           assignment  130    3   18     // tmp130 = 0.000029658956854023755: NUMBER;
116:          unary_minus  131  130          // tmp131 = -tmp130;
117:       multiplication  132  131    8     // tmp132 = tmp131 * DAYS_PER_YEAR;
118:                 meta    2  132  255     // 
119:           assignment  130    3   19     // tmp130 = 0.00004366244043351563: NUMBER;
120:       multiplication  131  130    1     // tmp131 = tmp130 * SOLAR_MASS;
121:                 meta    2  131  255     // tmp130 = new Body (tmp130, tmp131, tmp131, tmp131, tmp131, tmp132, tmp131);
122:               retval  130               // return tmp130;
123:                  ret                    // ret;
124:          func_decl_n   20    0          // function Neptune ();
125:                 meta    7    0   26     // function end: 151;
126:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
127:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
128:          construct_n  130    0    7     // 
129:           assignment  130    3    1     // tmp130 = 15.379697114850916: NUMBER;
130:                 meta    2  130  255     // 
131:           assignment  130    3    2     // tmp130 = 25.919314609987964: NUMBER;
132:          unary_minus  131  130          // tmp131 = -tmp130;
133:                 meta    2  131  255     // 
134:           assignment  130    3    3     // tmp130 = 0.17925877295037118: NUMBER;
135:                 meta    2  130  255     // 
136:           assignment  130    3    4     // tmp130 = 0.0026806777249038932: NUMBER;
137:       multiplication  131  130    5     // tmp131 = tmp130 * DAYS_PER_YEAR;
138:                 meta    2  131  255     // 
139:           assignment  130    3    6     // tmp130 = 0.001628241700382423: NUMBER;
140:       multiplication  131  130    5     // tmp131 = tmp130 * DAYS_PER_YEAR;
141:                 meta    2  131  255     // 
142:           assignment  130    3    7     // tmp130 = 0.00009515922545197159: NUMBER;
143:          unary_minus  131  130          // tmp131 = -tmp130;
144:       multiplication  132  131    5     // tmp132 = tmp131 * DAYS_PER_YEAR;
145:                 meta    2  132  255     // 
146:           assignment  130    3    8     // tmp130 = 0.000051513890204661145: NUMBER;
147:       multiplication  131  130    9     // tmp131 = tmp130 * SOLAR_MASS;
148:                 meta    2  131  255     // tmp130 = new Body (tmp130, tmp131, tmp130, tmp131, tmp131, tmp132, tmp131);
149:               retval  130               // return tmp130;
150:                  ret                    // ret;
151:          func_decl_n   10    0          // function Sun ();
152:                 meta    7    0   19     // function end: 171;
153:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
154:         reg_var_decl  128  130    0     // var tmp128 .. tmp130;
155:          construct_n  130    0    7     // 
156:           assignment  130    3   11     // tmp130 = 0: NUMBER;
157:                 meta    2  130  255     // 
158:           assignment  130    3   11     // tmp130 = 0: NUMBER;
159:                 meta    2  130  255     // 
160:           assignment  130    3   11     // tmp130 = 0: NUMBER;
161:                 meta    2  130  255     // 
162:           assignment  130    3   11     // tmp130 = 0: NUMBER;
163:                 meta    2  130  255     // 
164:           assignment  130    3   11     // tmp130 = 0: NUMBER;
165:                 meta    2  130  255     // 
166:           assignment  130    3   11     // tmp130 = 0: NUMBER;
167:                 meta    2  130  255     // 
168:                 meta    2    9  255     // tmp130 = new Body (tmp130, tmp130, tmp130, tmp130, tmp130, tmp130, SOLAR_MASS);
169:               retval  130               // return tmp130;
170:                  ret                    // ret;
171:          func_decl_n   12    1          // 
172:                 meta    2   13  255     // function NBodySystem (bodies);
173:                 meta    7    0   61     // function end: 234;
174:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
175:         reg_var_decl  128  144    7     // var tmp128 .. tmp144;
176:         this_binding  130               // tmp130 = this;
177:           assignment  131    5   13     // tmp131 = 'bodies': STRING;
178:          prop_setter  130  131   13     // tmp130[tmp131] = bodies;
179:           assignment  130    3   11     // tmp130 = 0: NUMBER;
180:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
181:           assignment  130    3   11     // tmp130 = 0: NUMBER;
182:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
183:           assignment  130    3   11     // tmp130 = 0: NUMBER;
184:           assignment  140    6  130     // tmp140 = tmp130 : TYPEOF(tmp130);
185:         this_binding  130               // tmp130 = this;
186:           assignment  131    5   13     // tmp131 = 'bodies': STRING;
187:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
188:           assignment  133    5   14     // tmp133 = 'length': STRING;
189:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
190:           assignment  141    6  134     // tmp141 = tmp134 : TYPEOF(tmp134);
191:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
192:           assignment  142    6  130     // tmp142 = tmp130 : TYPEOF(tmp130);
193:             jmp_down    0   25          // goto 218;
194:         this_binding  130               // tmp130 = this;
195:           assignment  131    5    0     // tmp131 = 'bodies': STRING;
196:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
197:          prop_getter  133  132  142     // tmp133 = tmp132[tmp142];
198:           assignment  143    6  133     // tmp143 = tmp133 : TYPEOF(tmp133);
199:           assignment  130    5    1     // tmp130 = 'mass': STRING;
200:          prop_getter  131  143  130     // tmp131 = tmp143[tmp130];
201:           assignment  144    6  131     // tmp144 = tmp131 : TYPEOF(tmp131);
202:           assignment  130    5    2     // tmp130 = 'vx': STRING;
203:          prop_getter  131  143  130     // tmp131 = tmp143[tmp130];
204:       multiplication  132  131  144     // tmp132 = tmp131 * tmp144;
205:             addition  138  138  132     // tmp138 = tmp138 + tmp132;
206:           assignment  133    6  138     // tmp133 = tmp138 : TYPEOF(tmp138);
207:           assignment  130    5    3     // tmp130 = 'vy': STRING;
208:          prop_getter  131  143  130     // tmp131 = tmp143[tmp130];
209:       multiplication  132  131  144     // tmp132 = tmp131 * tmp144;
210:             addition  139  139  132     // tmp139 = tmp139 + tmp132;
211:           assignment  133    6  139     // tmp133 = tmp139 : TYPEOF(tmp139);
212:           assignment  130    5    4     // tmp130 = 'vz': STRING;
213:          prop_getter  131  143  130     // tmp131 = tmp143[tmp130];
214:       multiplication  132  131  144     // tmp132 = tmp131 * tmp144;
215:             addition  140  140  132     // tmp140 = tmp140 + tmp132;
216:           assignment  133    6  140     // tmp133 = tmp140 : TYPEOF(tmp140);
217:            post_incr  134  142          // tmp134 = tmp142++;
218:           assignment  135    6  142     // tmp135 = tmp142 : TYPEOF(tmp142);
219:            less_than  136  135  141     // tmp136 = tmp135 < tmp141;
220:       is_true_jmp_up  136    0   26     // if (tmp136) goto 194;
221:         this_binding  130               // tmp130 = this;
222:           assignment  131    5    0     // tmp131 = 'bodies': STRING;
223:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
224:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
225:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
226:           assignment  135    5    5     // tmp135 = 'offsetMomentum': STRING;
227:          prop_getter  136  134  135     // tmp136 = tmp134[tmp135];
228:               call_n  137  136    3     // 
229:                 meta    1    1  134     // 
230:                 meta    2  138  255     // 
231:                 meta    2  139  255     // 
232:                 meta    2  140  255     // tmp137 = tmp136 (this_arg = tmp134, tmp138, tmp139, tmp140);
233:                  ret                    // ret;
234:           assignment  130    3    6     // tmp130 = 3.141592653589793: NUMBER;
235:           assignment    7    6  130     // PI = tmp130 : TYPEOF(tmp130);
236:           assignment  130    1    4     // tmp130 = 4: SMALLINT;
237:       multiplication  131  130    7     // tmp131 = tmp130 * PI;
238:       multiplication  132  131    7     // tmp132 = tmp131 * PI;
239:           assignment    8    6  132     // SOLAR_MASS = tmp132 : TYPEOF(tmp132);
240:           assignment  130    3    9     // tmp130 = 365.24: NUMBER;
241:           assignment   10    6  130     // DAYS_PER_YEAR = tmp130 : TYPEOF(tmp130);
242:           assignment  130    5   11     // tmp130 = 'prototype': STRING;
243:          prop_getter  131   12  130     // tmp131 = Body[tmp130];
244:           assignment  132    5    5     // tmp132 = 'offsetMomentum': STRING;
245:          func_expr_n  134  255    3     // 
246:                 meta    2   13  255     // 
247:                 meta    2   14  255     // 
248:                 meta    2   15  255     // tmp134 = function (px, py, pz);
249:                 meta    7    0   21     // function end: 270;
250:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
251:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
252:         this_binding  130               // tmp130 = this;
253:           assignment  131    5    2     // tmp131 = 'vx': STRING;
254:          unary_minus  133   13          // tmp133 = -px;
255:             division  134  133    8     // tmp134 = tmp133 / SOLAR_MASS;
256:          prop_setter  130  131  134     // tmp130[tmp131] = tmp134;
257:         this_binding  130               // tmp130 = this;
258:           assignment  131    5    0     // tmp131 = 'vy': STRING;
259:          unary_minus  133    1          // tmp133 = -py;
260:             division  134  133    2     // tmp134 = tmp133 / SOLAR_MASS;
261:          prop_setter  130  131  134     // tmp130[tmp131] = tmp134;
262:         this_binding  130               // tmp130 = this;
263:           assignment  131    5    3     // tmp131 = 'vz': STRING;
264:          unary_minus  133    4          // tmp133 = -pz;
265:             division  134  133    2     // tmp134 = tmp133 / SOLAR_MASS;
266:          prop_setter  130  131  134     // tmp130[tmp131] = tmp134;
267:         this_binding  130               // tmp130 = this;
268:               retval  130               // return tmp130;
269:                  ret                    // ret;
270:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
271:           assignment  130    5    5     // tmp130 = 'prototype': STRING;
272:          prop_getter  131    6  130     // tmp131 = NBodySystem[tmp130];
273:           assignment  132    5    7     // tmp132 = 'advance': STRING;
274:          func_expr_n  134  255    1     // 
275:                 meta    2    8  255     // tmp134 = function (dt);
276:                 meta    7    0  165     // function end: 441;
277:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
278:         reg_var_decl  128  154   11     // var tmp128 .. tmp154;
279:         this_binding  130               // tmp130 = this;
280:           assignment  131    5    9     // tmp131 = 'bodies': STRING;
281:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
282:           assignment  133    5   10     // tmp133 = 'length': STRING;
283:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
284:           assignment  149    6  134     // tmp149 = tmp134 : TYPEOF(tmp134);
285:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
286:           assignment  150    6  130     // tmp150 = tmp130 : TYPEOF(tmp130);
287:             jmp_down    0  114          // goto 401;
288:         this_binding  130               // tmp130 = this;
289:           assignment  131    5    9     // tmp131 = 'bodies': STRING;
290:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
291:          prop_getter  133  132  150     // tmp133 = tmp132[tmp150];
292:           assignment  151    6  133     // tmp151 = tmp133 : TYPEOF(tmp133);
293:           assignment  130    6  150     // tmp130 = tmp150 : TYPEOF(tmp150);
294:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
295:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
296:           assignment  152    6  132     // tmp152 = tmp132 : TYPEOF(tmp132);
297:             jmp_down    0  100          // goto 397;
298:         this_binding  130               // tmp130 = this;
299:           assignment  131    5    9     // tmp131 = 'bodies': STRING;
300:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
301:          prop_getter  133  132  152     // tmp133 = tmp132[tmp152];
302:           assignment  153    6  133     // tmp153 = tmp133 : TYPEOF(tmp133);
303:           assignment  130    5   11     // tmp130 = 'x': STRING;
304:          prop_getter  131  151  130     // tmp131 = tmp151[tmp130];
305:           assignment  132    5   11     // tmp132 = 'x': STRING;
306:          prop_getter  133  153  132     // tmp133 = tmp153[tmp132];
307:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
308:           assignment  144    6  134     // tmp144 = tmp134 : TYPEOF(tmp134);
309:           assignment  130    5   12     // tmp130 = 'y': STRING;
310:          prop_getter  131  151  130     // tmp131 = tmp151[tmp130];
311:           assignment  132    5   12     // tmp132 = 'y': STRING;
312:          prop_getter  133  153  132     // tmp133 = tmp153[tmp132];
313:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
314:           assignment  145    6  134     // tmp145 = tmp134 : TYPEOF(tmp134);
315:           assignment  130    5   13     // tmp130 = 'z': STRING;
316:          prop_getter  131  151  130     // tmp131 = tmp151[tmp130];
317:           assignment  132    5   13     // tmp132 = 'z': STRING;
318:          prop_getter  133  153  132     // tmp133 = tmp153[tmp132];
319:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
320:           assignment  146    6  134     // tmp146 = tmp134 : TYPEOF(tmp134);
321:           assignment  130    5    0     // tmp130 = 'sqrt': STRING;
322:          prop_getter  131    1  130     // tmp131 = Math[tmp130];
323:           assignment  132    6    1     // tmp132 = Math : TYPEOF(Math);
324:               call_n  133  131    1     // 
325:                 meta    1    1  132     // 
326:           assignment  133    6  144     // tmp133 = tmp144 : TYPEOF(tmp144);
327:       multiplication  134  133  144     // tmp134 = tmp133 * tmp144;
328:           assignment  135    6  145     // tmp135 = tmp145 : TYPEOF(tmp145);
329:       multiplication  136  135  145     // tmp136 = tmp135 * tmp145;
330:             addition  137  134  136     // tmp137 = tmp134 + tmp136;
331:           assignment  138    6  146     // tmp138 = tmp146 : TYPEOF(tmp146);
332:       multiplication  139  138  146     // tmp139 = tmp138 * tmp146;
333:             addition  140  137  139     // tmp140 = tmp137 + tmp139;
334:                 meta    2  140  255     // tmp133 = tmp131 (this_arg = tmp132, tmp140);
335:           assignment  147    6  133     // tmp147 = tmp133 : TYPEOF(tmp133);
336:           assignment  130    6    2     // tmp130 = dt : TYPEOF(dt);
337:           assignment  131    6  147     // tmp131 = tmp147 : TYPEOF(tmp147);
338:       multiplication  132  131  147     // tmp132 = tmp131 * tmp147;
339:       multiplication  133  132  147     // tmp133 = tmp132 * tmp147;
340:             division  134  130  133     // tmp134 = tmp130 / tmp133;
341:           assignment  148    6  134     // tmp148 = tmp134 : TYPEOF(tmp134);
342:           assignment  130    5    3     // tmp130 = 'vx': STRING;
343:           assignment  132    6  144     // tmp132 = tmp144 : TYPEOF(tmp144);
344:           assignment  133    5    4     // tmp133 = 'mass': STRING;
345:          prop_getter  134  153  133     // tmp134 = tmp153[tmp133];
346:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
347:       multiplication  136  135  148     // tmp136 = tmp135 * tmp148;
348:          prop_getter  137  151  130     // tmp137 = tmp151[tmp130];
349:         substraction  137  137  136     // tmp137 = tmp137 - tmp136;
350:          prop_setter  151  130  137     // tmp151[tmp130] = tmp137;
351:           assignment  130    5    5     // tmp130 = 'vy': STRING;
352:           assignment  132    6  145     // tmp132 = tmp145 : TYPEOF(tmp145);
353:           assignment  133    5    4     // tmp133 = 'mass': STRING;
354:          prop_getter  134  153  133     // tmp134 = tmp153[tmp133];
355:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
356:       multiplication  136  135  148     // tmp136 = tmp135 * tmp148;
357:          prop_getter  137  151  130     // tmp137 = tmp151[tmp130];
358:         substraction  137  137  136     // tmp137 = tmp137 - tmp136;
359:          prop_setter  151  130  137     // tmp151[tmp130] = tmp137;
360:           assignment  130    5    6     // tmp130 = 'vz': STRING;
361:           assignment  132    6  146     // tmp132 = tmp146 : TYPEOF(tmp146);
362:           assignment  133    5    4     // tmp133 = 'mass': STRING;
363:          prop_getter  134  153  133     // tmp134 = tmp153[tmp133];
364:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
365:       multiplication  136  135  148     // tmp136 = tmp135 * tmp148;
366:          prop_getter  137  151  130     // tmp137 = tmp151[tmp130];
367:         substraction  137  137  136     // tmp137 = tmp137 - tmp136;
368:          prop_setter  151  130  137     // tmp151[tmp130] = tmp137;
369:           assignment  130    5    3     // tmp130 = 'vx': STRING;
370:           assignment  132    6  144     // tmp132 = tmp144 : TYPEOF(tmp144);
371:           assignment  133    5    4     // tmp133 = 'mass': STRING;
372:          prop_getter  134  151  133     // tmp134 = tmp151[tmp133];
373:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
374:       multiplication  136  135  148     // tmp136 = tmp135 * tmp148;
375:          prop_getter  137  153  130     // tmp137 = tmp153[tmp130];
376:             addition  137  137  136     // tmp137 = tmp137 + tmp136;
377:          prop_setter  153  130  137     // tmp153[tmp130] = tmp137;
378:           assignment  130    5    5     // tmp130 = 'vy': STRING;
379:           assignment  132    6  145     // tmp132 = tmp145 : TYPEOF(tmp145);
380:           assignment  133    5    4     // tmp133 = 'mass': STRING;
381:          prop_getter  134  151  133     // tmp134 = tmp151[tmp133];
382:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
383:       multiplication  136  135  148     // tmp136 = tmp135 * tmp148;
384:          prop_getter  137  153  130     // tmp137 = tmp153[tmp130];
385:             addition  137  137  136     // tmp137 = tmp137 + tmp136;
386:          prop_setter  153  130  137     // tmp153[tmp130] = tmp137;
387:           assignment  130    5    0     // tmp130 = 'vz': STRING;
388:           assignment  132    6  146     // tmp132 = tmp146 : TYPEOF(tmp146);
389:           assignment  133    5    1     // tmp133 = 'mass': STRING;
390:          prop_getter  134  151  133     // tmp134 = tmp151[tmp133];
391:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
392:       multiplication  136  135  148     // tmp136 = tmp135 * tmp148;
393:          prop_getter  137  153  130     // tmp137 = tmp153[tmp130];
394:             addition  137  137  136     // tmp137 = tmp137 + tmp136;
395:          prop_setter  153  130  137     // tmp153[tmp130] = tmp137;
396:            post_incr  138  152          // tmp138 = tmp152++;
397:           assignment  139    6  152     // tmp139 = tmp152 : TYPEOF(tmp152);
398:            less_than  140  139  149     // tmp140 = tmp139 < tmp149;
399:       is_true_jmp_up  140    0  101     // if (tmp140) goto 298;
400:            post_incr  141  150          // tmp141 = tmp150++;
401:           assignment  142    6  150     // tmp142 = tmp150 : TYPEOF(tmp150);
402:            less_than  143  142  149     // tmp143 = tmp142 < tmp149;
403:       is_true_jmp_up  143    0  115     // if (tmp143) goto 288;
404:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
405:           assignment  150    6  130     // tmp150 = tmp130 : TYPEOF(tmp130);
406:             jmp_down    0   31          // goto 437;
407:         this_binding  130               // tmp130 = this;
408:           assignment  131    5    2     // tmp131 = 'bodies': STRING;
409:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
410:          prop_getter  133  132  150     // tmp133 = tmp132[tmp150];
411:           assignment  154    6  133     // tmp154 = tmp133 : TYPEOF(tmp133);
412:           assignment  130    5    3     // tmp130 = 'x': STRING;
413:           assignment  132    6    4     // tmp132 = dt : TYPEOF(dt);
414:           assignment  133    5    5     // tmp133 = 'vx': STRING;
415:          prop_getter  134  154  133     // tmp134 = tmp154[tmp133];
416:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
417:          prop_getter  136  154  130     // tmp136 = tmp154[tmp130];
418:             addition  136  136  135     // tmp136 = tmp136 + tmp135;
419:          prop_setter  154  130  136     // tmp154[tmp130] = tmp136;
420:           assignment  130    5    6     // tmp130 = 'y': STRING;
421:           assignment  132    6    4     // tmp132 = dt : TYPEOF(dt);
422:           assignment  133    5    7     // tmp133 = 'vy': STRING;
423:          prop_getter  134  154  133     // tmp134 = tmp154[tmp133];
424:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
425:          prop_getter  136  154  130     // tmp136 = tmp154[tmp130];
426:             addition  136  136  135     // tmp136 = tmp136 + tmp135;
427:          prop_setter  154  130  136     // tmp154[tmp130] = tmp136;
428:           assignment  130    5    8     // tmp130 = 'z': STRING;
429:           assignment  132    6    4     // tmp132 = dt : TYPEOF(dt);
430:           assignment  133    5    0     // tmp133 = 'vz': STRING;
431:          prop_getter  134  154  133     // tmp134 = tmp154[tmp133];
432:       multiplication  135  132  134     // tmp135 = tmp132 * tmp134;
433:          prop_getter  136  154  130     // tmp136 = tmp154[tmp130];
434:             addition  136  136  135     // tmp136 = tmp136 + tmp135;
435:          prop_setter  154  130  136     // tmp154[tmp130] = tmp136;
436:            post_incr  137  150          // tmp137 = tmp150++;
437:           assignment  138    6  150     // tmp138 = tmp150 : TYPEOF(tmp150);
438:            less_than  139  138  149     // tmp139 = tmp138 < tmp149;
439:       is_true_jmp_up  139    0   32     // if (tmp139) goto 407;
440:                  ret                    // ret;
441:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
442:           assignment  130    5    9     // tmp130 = 'prototype': STRING;
443:          prop_getter  131   10  130     // tmp131 = NBodySystem[tmp130];
444:           assignment  132    5   11     // tmp132 = 'energy': STRING;
445:          func_expr_n  134  255    0     // tmp134 = function ();
446:                 meta    7    0  104     // function end: 550;
447:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
448:         reg_var_decl  128  162   10     // var tmp128 .. tmp162;
449:           assignment  130    3    0     // tmp130 = 0: NUMBER;
450:           assignment  157    6  130     // tmp157 = tmp130 : TYPEOF(tmp130);
451:         this_binding  130               // tmp130 = this;
452:           assignment  131    5    1     // tmp131 = 'bodies': STRING;
453:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
454:           assignment  133    5    2     // tmp133 = 'length': STRING;
455:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
456:           assignment  158    6  134     // tmp158 = tmp134 : TYPEOF(tmp134);
457:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
458:           assignment  159    6  130     // tmp159 = tmp130 : TYPEOF(tmp130);
459:             jmp_down    0   86          // goto 545;
460:         this_binding  130               // tmp130 = this;
461:           assignment  131    5    1     // tmp131 = 'bodies': STRING;
462:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
463:          prop_getter  133  132  159     // tmp133 = tmp132[tmp159];
464:           assignment  160    6  133     // tmp160 = tmp133 : TYPEOF(tmp133);
465:           assignment  130    3    3     // tmp130 = 0.5: NUMBER;
466:           assignment  131    5    4     // tmp131 = 'mass': STRING;
467:          prop_getter  132  160  131     // tmp132 = tmp160[tmp131];
468:       multiplication  133  130  132     // tmp133 = tmp130 * tmp132;
469:           assignment  134    5    5     // tmp134 = 'vx': STRING;
470:          prop_getter  135  160  134     // tmp135 = tmp160[tmp134];
471:           assignment  136    5    5     // tmp136 = 'vx': STRING;
472:          prop_getter  137  160  136     // tmp137 = tmp160[tmp136];
473:       multiplication  138  135  137     // tmp138 = tmp135 * tmp137;
474:           assignment  139    5    6     // tmp139 = 'vy': STRING;
475:          prop_getter  140  160  139     // tmp140 = tmp160[tmp139];
476:           assignment  141    5    6     // tmp141 = 'vy': STRING;
477:          prop_getter  142  160  141     // tmp142 = tmp160[tmp141];
478:       multiplication  143  140  142     // tmp143 = tmp140 * tmp142;
479:             addition  144  138  143     // tmp144 = tmp138 + tmp143;
480:           assignment  145    5    7     // tmp145 = 'vz': STRING;
481:          prop_getter  146  160  145     // tmp146 = tmp160[tmp145];
482:           assignment  147    5    7     // tmp147 = 'vz': STRING;
483:          prop_getter  148  160  147     // tmp148 = tmp160[tmp147];
484:       multiplication  149  146  148     // tmp149 = tmp146 * tmp148;
485:             addition  150  144  149     // tmp150 = tmp144 + tmp149;
486:       multiplication  151  133  150     // tmp151 = tmp133 * tmp150;
487:             addition  157  157  151     // tmp157 = tmp157 + tmp151;
488:           assignment  152    6  157     // tmp152 = tmp157 : TYPEOF(tmp157);
489:           assignment  130    6  159     // tmp130 = tmp159 : TYPEOF(tmp159);
490:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
491:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
492:           assignment  161    6  132     // tmp161 = tmp132 : TYPEOF(tmp132);
493:             jmp_down    0   48          // goto 541;
494:         this_binding  130               // tmp130 = this;
495:           assignment  131    5    1     // tmp131 = 'bodies': STRING;
496:          prop_getter  132  130  131     // tmp132 = tmp130[tmp131];
497:          prop_getter  133  132  161     // tmp133 = tmp132[tmp161];
498:           assignment  162    6  133     // tmp162 = tmp133 : TYPEOF(tmp133);
499:           assignment  130    5    8     // tmp130 = 'x': STRING;
500:          prop_getter  131  160  130     // tmp131 = tmp160[tmp130];
501:           assignment  132    5    8     // tmp132 = 'x': STRING;
502:          prop_getter  133  162  132     // tmp133 = tmp162[tmp132];
503:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
504:           assignment  153    6  134     // tmp153 = tmp134 : TYPEOF(tmp134);
505:           assignment  130    5    9     // tmp130 = 'y': STRING;
506:          prop_getter  131  160  130     // tmp131 = tmp160[tmp130];
507:           assignment  132    5    9     // tmp132 = 'y': STRING;
508:          prop_getter  133  162  132     // tmp133 = tmp162[tmp132];
509:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
510:           assignment  154    6  134     // tmp154 = tmp134 : TYPEOF(tmp134);
511:           assignment  130    5   10     // tmp130 = 'z': STRING;
512:          prop_getter  131  160  130     // tmp131 = tmp160[tmp130];
513:           assignment  132    5    0     // tmp132 = 'z': STRING;
514:          prop_getter  133  162  132     // tmp133 = tmp162[tmp132];
515:         substraction  134  131  133     // tmp134 = tmp131 - tmp133;
516:           assignment  155    6  134     // tmp155 = tmp134 : TYPEOF(tmp134);
517:           assignment  130    5    1     // tmp130 = 'sqrt': STRING;
518:          prop_getter  131    2  130     // tmp131 = Math[tmp130];
519:           assignment  132    6    2     // tmp132 = Math : TYPEOF(Math);
520:               call_n  133  131    1     // 
521:                 meta    1    1  132     // 
522:           assignment  133    6  153     // tmp133 = tmp153 : TYPEOF(tmp153);
523:       multiplication  134  133  153     // tmp134 = tmp133 * tmp153;
524:           assignment  135    6  154     // tmp135 = tmp154 : TYPEOF(tmp154);
525:       multiplication  136  135  154     // tmp136 = tmp135 * tmp154;
526:             addition  137  134  136     // tmp137 = tmp134 + tmp136;
527:           assignment  138    6  155     // tmp138 = tmp155 : TYPEOF(tmp155);
528:       multiplication  139  138  155     // tmp139 = tmp138 * tmp155;
529:             addition  140  137  139     // tmp140 = tmp137 + tmp139;
530:                 meta    2  140  255     // tmp133 = tmp131 (this_arg = tmp132, tmp140);
531:           assignment  156    6  133     // tmp156 = tmp133 : TYPEOF(tmp133);
532:           assignment  130    5    3     // tmp130 = 'mass': STRING;
533:          prop_getter  131  160  130     // tmp131 = tmp160[tmp130];
534:           assignment  132    5    3     // tmp132 = 'mass': STRING;
535:          prop_getter  133  162  132     // tmp133 = tmp162[tmp132];
536:       multiplication  134  131  133     // tmp134 = tmp131 * tmp133;
537:             division  135  134  156     // tmp135 = tmp134 / tmp156;
538:         substraction  157  157  135     // tmp157 = tmp157 - tmp135;
539:           assignment  136    6  157     // tmp136 = tmp157 : TYPEOF(tmp157);
540:            post_incr  137  161          // tmp137 = tmp161++;
541:           assignment  138    6  161     // tmp138 = tmp161 : TYPEOF(tmp161);
542:            less_than  139  138  158     // tmp139 = tmp138 < tmp158;
543:       is_true_jmp_up  139    0   49     // if (tmp139) goto 494;
544:            post_incr  140  159          // tmp140 = tmp159++;
545:           assignment  141    6  159     // tmp141 = tmp159 : TYPEOF(tmp159);
546:            less_than  142  141  158     // tmp142 = tmp141 < tmp158;
547:       is_true_jmp_up  142    0   87     // if (tmp142) goto 460;
548:               retval  157               // return tmp157;
549:                  ret                    // ret;
550:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
551:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
552:           assignment    4    6  130     // ret = tmp130 : TYPEOF(tmp130);
553:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
554:           assignment    5    6  130     // n = tmp130 : TYPEOF(tmp130);
555:             jmp_down    0   55          // goto 610;
556:          func_expr_n  130  255    0     // tmp130 = function ();
557:                 meta    7    0   50     // function end: 607;
558:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
559:         reg_var_decl  128  139    3     // var tmp128 .. tmp139;
560:          construct_n  130    6    1     // 
561:               call_n  130    7    5     // 
562:               call_n  130    8    0     // 
563:                 meta    2  130  255     // 
564:               call_n  130    9    0     // 
565:                 meta    2  130  255     // 
566:               call_n  130   10    0     // 
567:                 meta    2  130  255     // 
568:               call_n  130   11    0     // 
569:                 meta    2  130  255     // 
570:               call_n  130   12    0     // 
571:                 meta    2  130  255     // 
572:                 meta    2  130  255     // 
573:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
574:           assignment  130    6    5     // tmp130 = n : TYPEOF(n);
575:           assignment  131    1  100     // tmp131 = 100: SMALLINT;
576:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
577:           assignment  138    6  132     // tmp138 = tmp132 : TYPEOF(tmp132);
578:           assignment  130    5    0     // tmp130 = 'energy': STRING;
579:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
580:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
581:               call_n  133  131    0     // 
582:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
583:             addition    1    1  133     // ret = ret + tmp133;
584:           assignment  134    6    1     // tmp134 = ret : TYPEOF(ret);
585:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
586:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
587:             jmp_down    0    9          // goto 596;
588:           assignment  130    5    2     // tmp130 = 'advance': STRING;
589:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
590:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
591:               call_n  133  131    1     // 
592:                 meta    1    1  132     // 
593:           assignment  133    3    3     // tmp133 = 0.01: NUMBER;
594:                 meta    2  133  255     // tmp133 = tmp131 (this_arg = tmp132, tmp133);
595:            post_incr  134  139          // tmp134 = tmp139++;
596:           assignment  135    6  139     // tmp135 = tmp139 : TYPEOF(tmp139);
597:            less_than  136  135  138     // tmp136 = tmp135 < tmp138;
598:       is_true_jmp_up  136    0   10     // if (tmp136) goto 588;
599:           assignment  130    5    0     // tmp130 = 'energy': STRING;
600:          prop_getter  131  137  130     // tmp131 = tmp137[tmp130];
601:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
602:               call_n  133  131    0     // 
603:                 meta    1    1  132     // tmp133 = tmp131 (this_arg = tmp132);
604:             addition    1    1  133     // ret = ret + tmp133;
605:           assignment  134    6    1     // tmp134 = ret : TYPEOF(ret);
606:                  ret                    // ret;
607:               call_n  131  130    0     // 
608:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
609:       multiplication    4    4  132     // n = n * tmp132;
610:           assignment  133    6    4     // tmp133 = n : TYPEOF(n);
611:           assignment  134    1   24     // tmp134 = 24: SMALLINT;
612:   less_or_equal_than  135  133  134     // tmp135 = tmp133 <= tmp134;
613:       is_true_jmp_up  135    0   57     // if (tmp135) goto 556;
614:           assignment  130    3    5     // tmp130 = 1.3524862408537381: NUMBER;
615:          unary_minus  131  130          // tmp131 = -tmp130;
616:           assignment    6    6  131     // expected = tmp131 : TYPEOF(tmp131);
617:           assignment  130    6    1     // tmp130 = ret : TYPEOF(ret);
618:      not_equal_value  131  130    6     // tmp131 = tmp130 != expected;
619:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 626;
620:           assignment  130    5    7     // tmp130 = 'ERROR: bad result: expected ': STRING;
621:             addition  131  130    6     // tmp131 = tmp130 + expected;
622:           assignment  132    5    8     // tmp132 = ' but got ': STRING;
623:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
624:             addition  134  133    1     // tmp134 = tmp133 + ret;
625:          throw_value  134               // throw tmp134;
626:                  ret                    // ret;
