// 
// /*
// 
// /*
// 
// // This test parses a JSON string giving tag names and popularity, and
// 
// // generates html markup for a "tagcloud" view.
// 
// if (!Object.prototype.toJSONString) {
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
  3:          prop_getter  131  254  130     // tmp131 = Object[tmp130];
  4:           assignment  132    5  254     // tmp132 = 'toJSONString': STRING;
  5:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  6:          logical_not  134  133          // tmp134 = ! tmp133;
  7:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65028;
//     Array.prototype.toJSONString = function (w) {
  8:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
  9:          prop_getter  131  254  130     // tmp131 = Array[tmp130];
 10:           assignment  132    5  254     // tmp132 = 'toJSONString': STRING;
 11:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  0:          func_expr_n  134  255    1     //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//         var a = [],     // The array holding the partial texts.
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           array_decl  253  253  255     // 
  5:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  6:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
// 
//             i,          // Loop counter.
// 
//             l = this.length,
  7:         this_binding  131               // tmp131 = this;
  8:           assignment  132    5  254     // tmp132 = 'length': STRING;
  9:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 10:           assignment  254    6  133     // l = tmp133 : TYPEOF(tmp133);
//             v;          // The value to be stringified.
// 
//         for (i = 0; i < l; i += 1) {
 11:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 12:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 13:             jmp_down  253  253          // goto 65034;
//             v = this[i];
 14:         this_binding  130               // tmp130 = this;
 15:          prop_getter  131  130  254     // tmp131 = tmp130[i];
 16:           assignment  254    6  131     // v = tmp131 : TYPEOF(tmp131);
//             switch (typeof v) {
 17:               typeof  130  254          // tmp130 = typeof v;
//             case 'object':
 18:           assignment  131    5  254     // tmp131 = 'object': STRING;
 19:     equal_value_type  132  130  131     // tmp132 = tmp130 === tmp131;
 20:     is_true_jmp_down  132  253  253     // if (tmp132) goto 65041;
//                 if (v && typeof v.toJSONString === 'function') {
//                     a.push(v.toJSONString(w));
//                 } else {
//                     a.push('null');
//                 }
//                 break;
//             case 'string':
 21:           assignment  133    5  254     // tmp133 = 'string': STRING;
 22:     equal_value_type  134  130  133     // tmp134 = tmp130 === tmp133;
 23:     is_true_jmp_down  134  253  253     // if (tmp134) goto 65044;
//             case 'number':
 24:           assignment  135    5  254     // tmp135 = 'number': STRING;
 25:     equal_value_type  136  130  135     // tmp136 = tmp130 === tmp135;
 26:     is_true_jmp_down  136  253  253     // if (tmp136) goto 65047;
//             case 'boolean':
 27:           assignment  137    5  254     // tmp137 = 'boolean': STRING;
 28:     equal_value_type  138  130  137     // tmp138 = tmp130 === tmp137;
 29:     is_true_jmp_down  138  253  253     // if (tmp138) goto 65050;
//                 a.push(v.toJSONString());
//                 break;
//             default:
//                 a.push('null');
//             }
 30:             jmp_down  253  253          // goto 65051;
//             case 'object':
 20:     is_true_jmp_down  132    0   11     // if (tmp132) goto 31; // REWRITE
//                 if (v && typeof v.toJSONString === 'function') {
 31:           assignment  130    6  254     // tmp130 = v : TYPEOF(v);
 32:    is_false_jmp_down  130  253  253     // if (tmp130 == false) goto 65053;
 33:           assignment  131    5  254     // tmp131 = 'toJSONString': STRING;
 34:          prop_getter  132  254  131     // tmp132 = v[tmp131];
 35:               typeof  133  132          // tmp133 = typeof tmp132;
 36:           assignment  134    5  254     // tmp134 = 'function': STRING;
 37:     equal_value_type  135  133  134     // tmp135 = tmp133 === tmp134;
 38:           assignment  130    6  135     // tmp130 = tmp135 : TYPEOF(tmp135);
 32:    is_false_jmp_down  130    0    7     // if (tmp130 == false) goto 39; // REWRITE
 39:    is_false_jmp_down  130  253  253     // if (tmp130 == false) goto 65060;
//                     a.push(v.toJSONString(w));
 40:           assignment  130    5  254     // tmp130 = 'push': STRING;
 41:          prop_getter  131  254  130     // tmp131 = a[tmp130];
 42:           assignment  132    6  254     // tmp132 = a : TYPEOF(a);
 43:               call_n  253  131  253     // 
 44:                 meta    1    1  132     // 
 45:           assignment  133    5  254     // tmp133 = 'toJSONString': STRING;
 46:          prop_getter  134  254  133     // tmp134 = v[tmp133];
 47:           assignment  135    6  254     // tmp135 = v : TYPEOF(v);
 48:               call_n  253  134  253     // 
 49:                 meta    1    1  135     // 
 50:                 meta    2  254  255     // 
 48:               call_n  136  134    1     //  // REWRITE
 51:                 meta    2  136  255     // tmp136 = tmp134 (this_arg = tmp135, ICE: Assertion 'lit_ids != NULL' failed at /home/john/git/jerry/jerry-core/vm/pretty-printer.cpp(var_to_str):102.
Error: ERR_FAILED_INTERNAL_ASSERTION
