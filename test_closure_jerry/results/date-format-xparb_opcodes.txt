// /*
// 
// Date.parseFunctions = {count:0};
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    5  254     // tmp130 = 'parseFunctions': STRING;
  3:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  3:             obj_decl  253  253  255     // 
  4:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
  5:           assignment  133    5  254     // tmp133 = 'count': STRING;
  6:                 meta    3  133  132     // 
  3:             obj_decl  132    0    1     //  // REWRITE
  7:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
// Date.parseRegexes = [];
  8:           assignment  130    5  254     // tmp130 = 'parseRegexes': STRING;
  9:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  9:           array_decl  253  253  255     // 
  9:           array_decl  132    0    0     // tmp132 = []; // REWRITE
 10:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
// Date.formatFunctions = {count:0};
 11:           assignment  130    5  254     // tmp130 = 'formatFunctions': STRING;
 12:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 12:             obj_decl  253  253  255     // 
 13:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 14:           assignment  133    5  254     // tmp133 = 'count': STRING;
 15:                 meta    3  133  132     // 
 12:             obj_decl  132    0    1     //  // REWRITE
 16:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
// Date.prototype.dateFormat = function(format) {
 17:           assignment  130    5  254     // tmp130 = 'prototype': STRING;
 18:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 19:           assignment  132    5  254     // tmp132 = 'dateFormat': STRING;
 20:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  0:          func_expr_n  134  255    1     //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//     if (Date.formatFunctions[format] == null) {
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    5  254     // tmp130 = 'formatFunctions': STRING;
  6:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  7:          prop_getter  132  131  254     // tmp132 = tmp131[format];
  8:           assignment  133    0    2     // tmp133 = null: SIMPLE;
  9:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 10:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65031;
//         Date.createNewFormat(format);
 11:           assignment  130    5  254     // tmp130 = 'createNewFormat': STRING;
 12:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 13:           assignment  132    6  254     // tmp132 = Date : TYPEOF(Date);
 14:               call_n  253  131  253     // 
 15:                 meta    1    1  132     // 
 16:                 meta    2  254  255     // 
 14:               call_n  133  131    1     //  // REWRITE
//     }
//     var func = Date.formatFunctions[format];
 10:    is_false_jmp_down  134    0    7     // if (tmp134 == false) goto 17; // REWRITE
 17:           assignment  130    5  254     // tmp130 = 'formatFunctions': STRING;
 18:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 19:          prop_getter  132  131  254     // tmp132 = tmp131[format];
 20:           assignment  254    6  132     // func = tmp132 : TYPEOF(tmp132);
//     return this[func]();
 21:         this_binding  130               // tmp130 = this;
 22:          prop_getter  131  130  254     // tmp131 = tmp130[func];
 23:               call_n  253  131  253     // 
 24:                 meta    1    1  130     // 
 23:               call_n  132  131    0     //  // REWRITE
 25:               retval  132               // return tmp132;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  135    1     // var tmp128 .. tmp135; // REWRITE
 26:                  ret                    // ret;
  2:                 meta    7    0   25     // function end: 27; // REWRITE
// Date.createNewFormat = function(format) {
 47:          prop_setter  131  132  134     // tmp131[tmp132] = tmp134;
 48:           assignment  130    5  254     // tmp130 = 'createNewFormat': STRING;
 49:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  0:          func_expr_n  132  255    1     //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//     var funcName = "format" + Date.formatFunctions.count++;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    5  254     // tmp130 = 'format': STRING;
  6:           assignment  131    5  254     // tmp131 = 'formatFunctions': STRING;
  7:          prop_getter  132  254  131     // tmp132 = Date[tmp131];
  8:           assignment  133    5  254     // tmp133 = 'count': STRING;
  9:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 10:            post_incr  135  134          // tmp135 = tmp134++;
 11:          prop_setter  132  133  134     // tmp132[tmp133] = tmp134;
 12:             addition  136  130  135     // tmp136 = tmp130 + tmp135;
 13:           assignment  254    6  136     // funcName = tmp136 : TYPEOF(tmp136);
//     Date.formatFunctions[format] = funcName;
 14:           assignment  130    5  254     // tmp130 = 'formatFunctions': STRING;
 15:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 16:          prop_getter  132  131  254     // tmp132 = tmp131[format];
 16:          prop_setter  131  254  254     // tmp131[format] = funcName;
 17:           assignment  133    6  254     // tmp133 = funcName : TYPEOF(funcName);
//     var code = "Date.prototype." + funcName + " = function(){return ";
 18:           assignment  130    5  254     // tmp130 = 'Date.prototype.': STRING;
 19:             addition  131  130  254     // tmp131 = tmp130 + funcName;
 20:           assignment  132    5  254     // tmp132 = ' = function(){return ': STRING;
 21:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 22:           assignment  254    6  133     // code = tmp133 : TYPEOF(tmp133);
//     var special = false;
 23:           assignment  130    0    3     // tmp130 = false: SIMPLE;
 24:           assignment  254    6  130     // special = tmp130 : TYPEOF(tmp130);
//     var ch = '';
 25:           assignment  130    5  254     // tmp130 = '': STRING;
 26:           assignment  254    6  130     // ch = tmp130 : TYPEOF(tmp130);
//     for (var i = 0; i < format.length; ++i) {
 27:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 28:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 29:             jmp_down  253  253          // goto 65050;
//         ch = format.charAt(i);
 30:           assignment  130    5  254     // tmp130 = 'charAt': STRING;
 31:          prop_getter  131  254  130     // tmp131 = format[tmp130];
 32:           assignment  132    6  254     // tmp132 = format : TYPEOF(format);
 33:               call_n  253  131  253     // 
 34:                 meta    1    1  132     // 
 35:                 meta    2  254  255     // 
 33:               call_n  133  131    1     //  // REWRITE
 36:           assignment  254    6  133     // ch = tmp133 : TYPEOF(tmp133);
//         if (!special && ch == "\\") {
 37:          logical_not  130  254          // tmp130 = ! special;
 38:           assignment  131    6  130     // tmp131 = tmp130 : TYPEOF(tmp130);
 39:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65060;
 40:           assignment  132    6  254     // tmp132 = ch : TYPEOF(ch);
 41:           assignment  133    5  254     // tmp133 = '\': STRING;
 42:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 43:           assignment  131    6  134     // tmp131 = tmp134 : TYPEOF(tmp134);
 39:    is_false_jmp_down  131    0    5     // if (tmp131 == false) goto 44; // REWRITE
 44:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65065;
//             special = true;
 45:           assignment  130    0    4     // tmp130 = true: SIMPLE;
 46:           assignment  254    6  130     // special = tmp130 : TYPEOF(tmp130);
//         }
//         else if (special) {
 47:             jmp_down  253  253          // goto 65068;
 44:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 48; // REWRITE
 48:    is_false_jmp_down  254  253  253     // if (special == false) goto 65069;
//             special = false;
 49:           assignment  130    0    3     // tmp130 = false: SIMPLE;
 50:           assignment  254    6  130     // special = tmp130 : TYPEOF(tmp130);
//             code += "'" + String.escape(ch) + "' + ";
 51:           assignment  130    5  254     // tmp130 = ''': STRING;
 52:           assignment  131    5  254     // tmp131 = 'escape': STRING;
 53:          prop_getter  132  254  131     // tmp132 = String[tmp131];
 54:           assignment  133    6  254     // tmp133 = String : TYPEOF(String);
 55:               call_n  253  132  253     // 
 56:                 meta    1    1  133     // 
 57:                 meta    2  254  255     // 
 55:               call_n  134  132    1     //  // REWRITE
 58:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
 59:           assignment  136    5  254     // tmp136 = '' + ': STRING;
 60:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
 61:             addition  254  254  137     // code = code + tmp137;
 62:           assignment  138    6  254     // tmp138 = code : TYPEOF(code);
//         }
//         else {
 63:             jmp_down  253  253          // goto 65084;
 48:    is_false_jmp_down  254    0   16     // if (special == false) goto 64; // REWRITE
//             code += Date.getFormatCode(ch);
 64:           assignment  130    5  254     // tmp130 = 'getFormatCode': STRING;
 65:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 66:           assignment  132    6  254     // tmp132 = Date : TYPEOF(Date);
 67:               call_n  253  131  253     // 
 68:                 meta    1    1  132     // 
 69:                 meta    2  254  255     // 
 67:               call_n  133  131    1     //  // REWRITE
 70:             addition  254  254  133     // code = code + tmp133;
 71:           assignment  134    6  254     // tmp134 = code : TYPEOF(code);
//         }
 63:             jmp_down    0    9          // goto 72; // REWRITE
 47:             jmp_down    0   25          // goto 72; // REWRITE
//     }
 72:             pre_incr  135  254          // tmp135 = ++i;
 29:             jmp_down    0   44          // goto 73; // REWRITE
 73:           assignment  136    6  254     // tmp136 = i : TYPEOF(i);
 74:           assignment  137    5  254     // tmp137 = 'length': STRING;
 75:          prop_getter  138  254  137     // tmp138 = format[tmp137];
 76:            less_than  139  136  138     // tmp139 = tmp136 < tmp138;
 77:       is_true_jmp_up  139    0   47     // if (tmp139) goto 30;
//     eval(code.substring(0, code.length - 3) + ";}");
 78:               call_n  253  254  253     // 
 79:                 meta    1    2  255     // 
 80:           assignment  130    5  254     // tmp130 = 'substring': STRING;
 81:          prop_getter  131  254  130     // tmp131 = code[tmp130];
 82:           assignment  132    6  254     // tmp132 = code : TYPEOF(code);
 83:               call_n  253  131  253     // 
 84:                 meta    1    1  132     // 
 85:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 86:                 meta    2  133  255     // 
 87:           assignment  133    5  254     // tmp133 = 'length': STRING;
 88:          prop_getter  134  254  133     // tmp134 = code[tmp133];
 89:           assignment  135    1    3     // tmp135 = 3: SMALLINT;
 90:         substraction  136  134  135     // tmp136 = tmp134 - tmp135;
 91:                 meta    2  136  255     // 
 83:               call_n  133  131    2     //  // REWRITE
 92:           assignment  134    5  254     // tmp134 = ';}': STRING;
 93:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
 94:                 meta    2  135  255     // 
 78:               call_n  130  254    1     //  // REWRITE
// }
  3:                 meta   12    2  255     // [no 'arguments']  // REWRITE
  4:         reg_var_decl  128  139    0     // var tmp128 .. tmp139; // REWRITE
 95:                  ret                    // ret;
  2:                 meta    7    0   99     // function end: 101; // REWRITE
// Date.getFormatCode = function(character) {
150:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
151:           assignment  130    5  254     // tmp130 = 'getFormatCode': STRING;
152:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  0:          func_expr_n  132  255    1     //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//     switch (character) {
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
//     case "d":
  5:           assignment  130    5  254     // tmp130 = 'd': STRING;
  6:     equal_value_type  131  254  130     // tmp131 = character === tmp130;
  7:     is_true_jmp_down  131  253  253     // if (tmp131) goto 65028;
//         return "String.leftPad(this.getDate(), 2, '0') + ";
//     case "D":
  8:           assignment  132    5  254     // tmp132 = 'D': STRING;
  9:     equal_value_type  133  254  132     // tmp133 = character === tmp132;
 10:     is_true_jmp_down  133  253  253     // if (tmp133) goto 65031;
//         return "Date.dayNames[this.getDay()].substring(0, 3) + ";
//     case "j":
 11:           assignment  134    5  254     // tmp134 = 'j': STRING;
 12:     equal_value_type  135  254  134     // tmp135 = character === tmp134;
 13:     is_true_jmp_down  135  253  253     // if (tmp135) goto 65034;
//         return "this.getDate() + ";
//     case "l":
 14:           assignment  136    5  254     // tmp136 = 'l': STRING;
 15:     equal_value_type  137  254  136     // tmp137 = character === tmp136;
 16:     is_true_jmp_down  137  253  253     // if (tmp137) goto 65037;
//         return "Date.dayNames[this.getDay()] + ";
//     case "S":
 17:           assignment  138    5  254     // tmp138 = 'S': STRING;
 18:     equal_value_type  139  254  138     // tmp139 = character === tmp138;
 19:     is_true_jmp_down  139  253  253     // if (tmp139) goto 65040;
//         return "this.getSuffix() + ";
//     case "w":
 20:           assignment  140    5  254     // tmp140 = 'w': STRING;
 21:     equal_value_type  141  254  140     // tmp141 = character === tmp140;
 22:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65043;
//         return "this.getDay() + ";
//     case "z":
 23:           assignment  142    5  254     // tmp142 = 'z': STRING;
 24:     equal_value_type  143  254  142     // tmp143 = character === tmp142;
 25:     is_true_jmp_down  143  253  253     // if (tmp143) goto 65046;
//         return "this.getDayOfYear() + ";
//     case "W":
 26:           assignment  144    5  254     // tmp144 = 'W': STRING;
 27:     equal_value_type  145  254  144     // tmp145 = character === tmp144;
 28:     is_true_jmp_down  145  253  253     // if (tmp145) goto 65049;
//         return "this.getWeekOfYear() + ";
//     case "F":
 29:           assignment  146    5  254     // tmp146 = 'F': STRING;
 30:     equal_value_type  147  254  146     // tmp147 = character === tmp146;
 31:     is_true_jmp_down  147  253  253     // if (tmp147) goto 65052;
//         return "Date.monthNames[this.getMonth()] + ";
//     case "m":
 32:           assignment  148    5  254     // tmp148 = 'm': STRING;
 33:     equal_value_type  149  254  148     // tmp149 = character === tmp148;
 34:     is_true_jmp_down  149  253  253     // if (tmp149) goto 65055;
//         return "String.leftPad(this.getMonth() + 1, 2, '0') + ";
//     case "M":
 35:           assignment  150    5  254     // tmp150 = 'M': STRING;
 36:     equal_value_type  151  254  150     // tmp151 = character === tmp150;
 37:     is_true_jmp_down  151  253  253     // if (tmp151) goto 65058;
//         return "Date.monthNames[this.getMonth()].substring(0, 3) + ";
//     case "n":
 38:           assignment  152    5  254     // tmp152 = 'n': STRING;
 39:     equal_value_type  153  254  152     // tmp153 = character === tmp152;
 40:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65061;
//         return "(this.getMonth() + 1) + ";
//     case "t":
 41:           assignment  154    5  254     // tmp154 = 't': STRING;
 42:     equal_value_type  155  254  154     // tmp155 = character === tmp154;
 43:     is_true_jmp_down  155  253  253     // if (tmp155) goto 65064;
//         return "this.getDaysInMonth() + ";
//     case "L":
 44:           assignment  156    5  254     // tmp156 = 'L': STRING;
 45:     equal_value_type  157  254  156     // tmp157 = character === tmp156;
 46:     is_true_jmp_down  157  253  253     // if (tmp157) goto 65067;
//         return "(this.isLeapYear() ? 1 : 0) + ";
//     case "Y":
 47:           assignment  158    5  254     // tmp158 = 'Y': STRING;
 48:     equal_value_type  159  254  158     // tmp159 = character === tmp158;
 49:     is_true_jmp_down  159  253  253     // if (tmp159) goto 65070;
//         return "this.getFullYear() + ";
//     case "y":
 50:           assignment  160    5  254     // tmp160 = 'y': STRING;
 51:     equal_value_type  161  254  160     // tmp161 = character === tmp160;
 52:     is_true_jmp_down  161  253  253     // if (tmp161) goto 65073;
//         return "('' + this.getFullYear()).substring(2, 4) + ";
//     case "a":
 53:           assignment  162    5  254     // tmp162 = 'a': STRING;
 54:     equal_value_type  163  254  162     // tmp163 = character === tmp162;
 55:     is_true_jmp_down  163  253  253     // if (tmp163) goto 65076;
//         return "(this.getHours() < 12 ? 'am' : 'pm') + ";
//     case "A":
 56:           assignment  164    5  254     // tmp164 = 'A': STRING;
 57:     equal_value_type  165  254  164     // tmp165 = character === tmp164;
 58:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65079;
//         return "(this.getHours() < 12 ? 'AM' : 'PM') + ";
//     case "g":
 59:           assignment  166    5  254     // tmp166 = 'g': STRING;
 60:     equal_value_type  167  254  166     // tmp167 = character === tmp166;
 61:     is_true_jmp_down  167  253  253     // if (tmp167) goto 65082;
//         return "((this.getHours() %12) ? this.getHours() % 12 : 12) + ";
//     case "G":
 62:           assignment  168    5  254     // tmp168 = 'G': STRING;
 63:     equal_value_type  169  254  168     // tmp169 = character === tmp168;
 64:     is_true_jmp_down  169  253  253     // if (tmp169) goto 65085;
//         return "this.getHours() + ";
//     case "h":
 65:           assignment  170    5  254     // tmp170 = 'h': STRING;
 66:     equal_value_type  171  254  170     // tmp171 = character === tmp170;
 67:     is_true_jmp_down  171  253  253     // if (tmp171) goto 65088;
//         return "String.leftPad((this.getHours() %12) ? this.getHours() % 12 : 12, 2, '0') + ";
//     case "H":
 68:           assignment  172    5  254     // tmp172 = 'H': STRING;
 69:     equal_value_type  173  254  172     // tmp173 = character === tmp172;
 70:     is_true_jmp_down  173  253  253     // if (tmp173) goto 65091;
//         return "String.leftPad(this.getHours(), 2, '0') + ";
//     case "i":
 71:           assignment  174    5  254     // tmp174 = 'i': STRING;
 72:     equal_value_type  175  254  174     // tmp175 = character === tmp174;
 73:     is_true_jmp_down  175  253  253     // if (tmp175) goto 65094;
//         return "String.leftPad(this.getMinutes(), 2, '0') + ";
//     case "s":
 74:           assignment  176    5  254     // tmp176 = 's': STRING;
 75:     equal_value_type  177  254  176     // tmp177 = character === tmp176;
 76:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65097;
//         return "String.leftPad(this.getSeconds(), 2, '0') + ";
//     case "O":
 77:           assignment  178    5  254     // tmp178 = 'O': STRING;
 78:     equal_value_type  179  254  178     // tmp179 = character === tmp178;
 79:     is_true_jmp_down  179  253  253     // if (tmp179) goto 65100;
//         return "this.getGMTOffset() + ";
//     case "T":
 80:           assignment  180    5  254     // tmp180 = 'T': STRING;
 81:     equal_value_type  181  254  180     // tmp181 = character === tmp180;
 82:     is_true_jmp_down  181  253  253     // if (tmp181) goto 65103;
//         return "this.getTimezone() + ";
//     case "Z":
 83:           assignment  182    5  254     // tmp182 = 'Z': STRING;
 84:     equal_value_type  183  254  182     // tmp183 = character === tmp182;
 85:     is_true_jmp_down  183  253  253     // if (tmp183) goto 65106;
//         return "(this.getTimezoneOffset() * -60) + ";
//     default:
//         return "'" + String.escape(character) + "' + ";
//     }
 86:             jmp_down  253  253          // goto 65107;
//     case "d":
  7:     is_true_jmp_down  131    0   80     // if (tmp131) goto 87; // REWRITE
//         return "String.leftPad(this.getDate(), 2, '0') + ";
 87:           assignment  130    5  254     // tmp130 = 'String.leftPad(this.getDate(), 2, '0') + ': STRING;
 88:               retval  130               // return tmp130;
//     case "D":
 10:     is_true_jmp_down  133    0   79     // if (tmp133) goto 89; // REWRITE
//         return "Date.dayNames[this.getDay()].substring(0, 3) + ";
 89:           assignment  130    5  254     // tmp130 = 'Date.dayNames[this.getDay()].substring(0, 3) + ': STRING;
 90:               retval  130               // return tmp130;
//     case "j":
 13:     is_true_jmp_down  135    0   78     // if (tmp135) goto 91; // REWRITE
//         return "this.getDate() + ";
 91:           assignment  130    5  254     // tmp130 = 'this.getDate() + ': STRING;
 92:               retval  130               // return tmp130;
//     case "l":
 16:     is_true_jmp_down  137    0   77     // if (tmp137) goto 93; // REWRITE
//         return "Date.dayNames[this.getDay()] + ";
 93:           assignment  130    5  254     // tmp130 = 'Date.dayNames[this.getDay()] + ': STRING;
 94:               retval  130               // return tmp130;
//     case "S":
 19:     is_true_jmp_down  139    0   76     // if (tmp139) goto 95; // REWRITE
//         return "this.getSuffix() + ";
 95:           assignment  130    5  254     // tmp130 = 'this.getSuffix() + ': STRING;
 96:               retval  130               // return tmp130;
//     case "w":
 22:     is_true_jmp_down  141    0   75     // if (tmp141) goto 97; // REWRITE
//         return "this.getDay() + ";
 97:           assignment  130    5  254     // tmp130 = 'this.getDay() + ': STRING;
 98:               retval  130               // return tmp130;
//     case "z":
 25:     is_true_jmp_down  143    0   74     // if (tmp143) goto 99; // REWRITE
//         return "this.getDayOfYear() + ";
 99:           assignment  130    5  254     // tmp130 = 'this.getDayOfYear() + ': STRING;
100:               retval  130               // return tmp130;
//     case "W":
 28:     is_true_jmp_down  145    0   73     // if (tmp145) goto 101; // REWRITE
//         return "this.getWeekOfYear() + ";
101:           assignment  130    5  254     // tmp130 = 'this.getWeekOfYear() + ': STRING;
102:               retval  130               // return tmp130;
//     case "F":
 31:     is_true_jmp_down  147    0   72     // if (tmp147) goto 103; // REWRITE
//         return "Date.monthNames[this.getMonth()] + ";
103:           assignment  130    5  254     // tmp130 = 'Date.monthNames[this.getMonth()] + ': STRING;
104:               retval  130               // return tmp130;
//     case "m":
 34:     is_true_jmp_down  149    0   71     // if (tmp149) goto 105; // REWRITE
//         return "String.leftPad(this.getMonth() + 1, 2, '0') + ";
105:           assignment  130    5  254     // tmp130 = 'String.leftPad(this.getMonth() + 1, 2, '0') + ': STRING;
106:               retval  130               // return tmp130;
//     case "M":
 37:     is_true_jmp_down  151    0   70     // if (tmp151) goto 107; // REWRITE
//         return "Date.monthNames[this.getMonth()].substring(0, 3) + ";
107:           assignment  130    5  254     // tmp130 = 'Date.monthNames[this.getMonth()].substring(0, 3) + ': STRING;
108:               retval  130               // return tmp130;
//     case "n":
 40:     is_true_jmp_down  153    0   69     // if (tmp153) goto 109; // REWRITE
//         return "(this.getMonth() + 1) + ";
109:           assignment  130    5  254     // tmp130 = '(this.getMonth() + 1) + ': STRING;
110:               retval  130               // return tmp130;
//     case "t":
 43:     is_true_jmp_down  155    0   68     // if (tmp155) goto 111; // REWRITE
//         return "this.getDaysInMonth() + ";
111:           assignment  130    5  254     // tmp130 = 'this.getDaysInMonth() + ': STRING;
112:               retval  130               // return tmp130;
//     case "L":
 46:     is_true_jmp_down  157    0   67     // if (tmp157) goto 113; // REWRITE
//         return "(this.isLeapYear() ? 1 : 0) + ";
113:           assignment  130    5  254     // tmp130 = '(this.isLeapYear() ? 1 : 0) + ': STRING;
114:               retval  130               // return tmp130;
//     case "Y":
 49:     is_true_jmp_down  159    0   66     // if (tmp159) goto 115; // REWRITE
//         return "this.getFullYear() + ";
115:           assignment  130    5  254     // tmp130 = 'this.getFullYear() + ': STRING;
116:               retval  130               // return tmp130;
//     case "y":
 52:     is_true_jmp_down  161    0   65     // if (tmp161) goto 117; // REWRITE
//         return "('' + this.getFullYear()).substring(2, 4) + ";
117:           assignment  130    5  254     // tmp130 = '('' + this.getFullYear()).substring(2, 4) + ': STRING;
118:               retval  130               // return tmp130;
//     case "a":
 55:     is_true_jmp_down  163    0   64     // if (tmp163) goto 119; // REWRITE
//         return "(this.getHours() < 12 ? 'am' : 'pm') + ";
119:           assignment  130    5  254     // tmp130 = '(this.getHours() < 12 ? 'am' : 'pm') + ': STRING;
120:               retval  130               // return tmp130;
//     case "A":
 58:     is_true_jmp_down  165    0   63     // if (tmp165) goto 121; // REWRITE
//         return "(this.getHours() < 12 ? 'AM' : 'PM') + ";
121:           assignment  130    5  254     // tmp130 = '(this.getHours() < 12 ? 'AM' : 'PM') + ': STRING;
122:               retval  130               // return tmp130;
//     case "g":
 61:     is_true_jmp_down  167    0   62     // if (tmp167) goto 123; // REWRITE
//         return "((this.getHours() %12) ? this.getHours() % 12 : 12) + ";
123:           assignment  130    5  254     // tmp130 = '((this.getHours() %12) ? this.getHours() % 12 : 12) + ': STRING;
124:               retval  130               // return tmp130;
//     case "G":
 64:     is_true_jmp_down  169    0   61     // if (tmp169) goto 125; // REWRITE
//         return "this.getHours() + ";
125:           assignment  130    5  254     // tmp130 = 'this.getHours() + ': STRING;
126:               retval  130               // return tmp130;
//     case "h":
 67:     is_true_jmp_down  171    0   60     // if (tmp171) goto 127; // REWRITE
//         return "String.leftPad((this.getHours() %12) ? this.getHours() % 12 : 12, 2, '0') + ";
127:           assignment  130    5  254     // tmp130 = 'String.leftPad((this.getHours() %12) ? this.getHours() % 12 : 12': STRING;
128:               retval  130               // return tmp130;
//     case "H":
 70:     is_true_jmp_down  173    0   59     // if (tmp173) goto 129; // REWRITE
//         return "String.leftPad(this.getHours(), 2, '0') + ";
129:           assignment  130    5  254     // tmp130 = 'String.leftPad(this.getHours(), 2, '0') + ': STRING;
130:               retval  130               // return tmp130;
//     case "i":
 73:     is_true_jmp_down  175    0   58     // if (tmp175) goto 131; // REWRITE
//         return "String.leftPad(this.getMinutes(), 2, '0') + ";
131:           assignment  130    5  254     // tmp130 = 'String.leftPad(this.getMinutes(), 2, '0') + ': STRING;
132:               retval  130               // return tmp130;
//     case "s":
 76:     is_true_jmp_down  177    0   57     // if (tmp177) goto 133; // REWRITE
//         return "String.leftPad(this.getSeconds(), 2, '0') + ";
133:           assignment  130    5  254     // tmp130 = 'String.leftPad(this.getSeconds(), 2, '0') + ': STRING;
134:               retval  130               // return tmp130;
//     case "O":
 79:     is_true_jmp_down  179    0   56     // if (tmp179) goto 135; // REWRITE
//         return "this.getGMTOffset() + ";
135:           assignment  130    5  254     // tmp130 = 'this.getGMTOffset() + ': STRING;
136:               retval  130               // return tmp130;
//     case "T":
 82:     is_true_jmp_down  181    0   55     // if (tmp181) goto 137; // REWRITE
//         return "this.getTimezone() + ";
137:           assignment  130    5  254     // tmp130 = 'this.getTimezone() + ': STRING;
138:               retval  130               // return tmp130;
//     case "Z":
 85:     is_true_jmp_down  183    0   54     // if (tmp183) goto 139; // REWRITE
//         return "(this.getTimezoneOffset() * -60) + ";
139:           assignment  130    5  254     // tmp130 = '(this.getTimezoneOffset() * -60) + ': STRING;
140:               retval  130               // return tmp130;
//     default:
//         return "'" + String.escape(character) + "' + ";
 86:             jmp_down    0   55          // goto 141; // REWRITE
141:           assignment  130    5  254     // tmp130 = ''': STRING;
142:           assignment  131    5  254     // tmp131 = 'escape': STRING;
143:          prop_getter  132  254  131     // tmp132 = String[tmp131];
144:           assignment  133    6  254     // tmp133 = String : TYPEOF(String);
145:               call_n  253  132  253     // 
146:                 meta    1    1  133     // 
147:                 meta    2  254  255     // 
145:               call_n  134  132    1     //  // REWRITE
148:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
149:           assignment  136    5  254     // tmp136 = '' + ': STRING;
150:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
151:               retval  137               // return tmp137;
//     }
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  183    0     // var tmp128 .. tmp183; // REWRITE
152:                  ret                    // ret;
  2:                 meta    7    0  151     // function end: 153; // REWRITE
// Date.parseDate = function(input, format) {
305:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
306:           assignment  130    5  254     // tmp130 = 'parseDate': STRING;
307:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_expr_n  132  255    2     //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//     if (Date.parseFunctions[format] == null) {
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    5  254     // tmp130 = 'parseFunctions': STRING;
  7:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  8:          prop_getter  132  131  254     // tmp132 = tmp131[format];
  9:           assignment  133    0    2     // tmp133 = null: SIMPLE;
 10:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 11:    is_false_jmp_down  134  253  253     // if (tmp134 == false) goto 65032;
//         Date.createParser(format);
 12:           assignment  130    5  254     // tmp130 = 'createParser': STRING;
 13:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 14:           assignment  132    6  254     // tmp132 = Date : TYPEOF(Date);
 15:               call_n  253  131  253     // 
 16:                 meta    1    1  132     // 
 17:                 meta    2  254  255     // 
 15:               call_n  133  131    1     //  // REWRITE
//     }
//     var func = Date.parseFunctions[format];
 11:    is_false_jmp_down  134    0    7     // if (tmp134 == false) goto 18; // REWRITE
 18:           assignment  130    5  254     // tmp130 = 'parseFunctions': STRING;
 19:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 20:          prop_getter  132  131  254     // tmp132 = tmp131[format];
 21:           assignment  254    6  132     // func = tmp132 : TYPEOF(tmp132);
//     return Date[func](input);
 22:          prop_getter  130  254  254     // tmp130 = Date[func];
 23:           assignment  131    6  254     // tmp131 = Date : TYPEOF(Date);
 24:               call_n  253  130  253     // 
 25:                 meta    1    1  131     // 
 26:                 meta    2  254  255     // 
 24:               call_n  132  130    1     //  // REWRITE
 27:               retval  132               // return tmp132;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  135    1     // var tmp128 .. tmp135; // REWRITE
 28:                  ret                    // ret;
  3:                 meta    7    0   26     // function end: 29; // REWRITE
// Date.createParser = function(format) {
336:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
337:           assignment  130    5  254     // tmp130 = 'createParser': STRING;
338:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  0:          func_expr_n  132  255    1     //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//     var funcName = "parse" + Date.parseFunctions.count++;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           assignment  130    5  254     // tmp130 = 'parse': STRING;
  6:           assignment  131    5  254     // tmp131 = 'parseFunctions': STRING;
  7:          prop_getter  132  254  131     // tmp132 = Date[tmp131];
  8:           assignment  133    5  254     // tmp133 = 'count': STRING;
  9:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
 10:            post_incr  135  134          // tmp135 = tmp134++;
 11:          prop_setter  132  133  134     // tmp132[tmp133] = tmp134;
 12:             addition  136  130  135     // tmp136 = tmp130 + tmp135;
 13:           assignment  254    6  136     // funcName = tmp136 : TYPEOF(tmp136);
//     var regexNum = Date.parseRegexes.length;
 14:           assignment  130    5  254     // tmp130 = 'parseRegexes': STRING;
 15:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 16:           assignment  132    5  254     // tmp132 = 'length': STRING;
 17:          prop_getter  133  131  132     // tmp133 = tmp131[tmp132];
 18:           assignment  254    6  133     // regexNum = tmp133 : TYPEOF(tmp133);
//     var currentGroup = 1;
 19:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 20:           assignment  254    6  130     // currentGroup = tmp130 : TYPEOF(tmp130);
//     Date.parseFunctions[format] = funcName;
 21:           assignment  130    5  254     // tmp130 = 'parseFunctions': STRING;
 22:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 23:          prop_getter  132  131  254     // tmp132 = tmp131[format];
 23:          prop_setter  131  254  254     // tmp131[format] = funcName;
 24:           assignment  133    6  254     // tmp133 = funcName : TYPEOF(funcName);
//     var code = "Date." + funcName + " = function(input){\n"
 25:           assignment  130    5  254     // tmp130 = 'Date.': STRING;
 26:             addition  131  130  254     // tmp131 = tmp130 + funcName;
 27:           assignment  132    5  254     // tmp132 = ' = function(input){
': STRING;
//         + "var y = -1, m = -1, d = -1, h = -1, i = -1, s = -1;\n"
 28:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 29:           assignment  134    5  254     // tmp134 = 'var y = -1, m = -1, d = -1, h = -1, i = -1, s = -1;
': STRING;
//         + "var d = new Date();\n"
 30:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
 31:           assignment  136    5  254     // tmp136 = 'var d = new Date();
': STRING;
//         + "y = d.getFullYear();\n"
 32:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
 33:           assignment  138    5  254     // tmp138 = 'y = d.getFullYear();
': STRING;
//         + "m = d.getMonth();\n"
 34:             addition  139  137  138     // tmp139 = tmp137 + tmp138;
 35:           assignment  140    5  254     // tmp140 = 'm = d.getMonth();
': STRING;
//         + "d = d.getDate();\n"
 36:             addition  141  139  140     // tmp141 = tmp139 + tmp140;
 37:           assignment  142    5  254     // tmp142 = 'd = d.getDate();
': STRING;
//         + "var results = input.match(Date.parseRegexes[" + regexNum + "]);\n"
 38:             addition  143  141  142     // tmp143 = tmp141 + tmp142;
 39:           assignment  144    5  254     // tmp144 = 'var results = input.match(Date.parseRegexes[': STRING;
 40:             addition  145  143  144     // tmp145 = tmp143 + tmp144;
 41:             addition  146  145  254     // tmp146 = tmp145 + regexNum;
 42:           assignment  147    5  254     // tmp147 = ']);
': STRING;
//         + "if (results && results.length > 0) {"
 43:             addition  148  146  147     // tmp148 = tmp146 + tmp147;
 44:           assignment  149    5  254     // tmp149 = 'if (results && results.length > 0) {': STRING;
//     var regex = "";
 45:             addition  150  148  149     // tmp150 = tmp148 + tmp149;
 46:           assignment  254    6  150     // code = tmp150 : TYPEOF(tmp150);
 47:           assignment  130    5  254     // tmp130 = '': STRING;
 48:           assignment  254    6  130     // regex = tmp130 : TYPEOF(tmp130);
//     var special = false;
 49:           assignment  130    0    3     // tmp130 = false: SIMPLE;
 50:           assignment  254    6  130     // special = tmp130 : TYPEOF(tmp130);
//     var ch = '';
 51:           assignment  130    5  254     // tmp130 = '': STRING;
 52:           assignment  254    6  130     // ch = tmp130 : TYPEOF(tmp130);
//     for (var i = 0; i < format.length; ++i) {
 53:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 54:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 55:             jmp_down  253  253          // goto 65076;
//         ch = format.charAt(i);
 56:           assignment  130    5  254     // tmp130 = 'charAt': STRING;
 57:          prop_getter  131  254  130     // tmp131 = format[tmp130];
 58:           assignment  132    6  254     // tmp132 = format : TYPEOF(format);
 59:               call_n  253  131  253     // 
 60:                 meta    1    1  132     // 
 61:                 meta    2  254  255     // 
 59:               call_n  133  131    1     //  // REWRITE
 62:           assignment  254    6  133     // ch = tmp133 : TYPEOF(tmp133);
//         if (!special && ch == "\\") {
 63:          logical_not  130  254          // tmp130 = ! special;
 64:           assignment  131    6  130     // tmp131 = tmp130 : TYPEOF(tmp130);
 65:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65086;
 66:           assignment  132    6  254     // tmp132 = ch : TYPEOF(ch);
 67:           assignment  133    5  254     // tmp133 = '\': STRING;
 68:          equal_value  134  132  133     // tmp134 = tmp132 == tmp133;
 69:           assignment  131    6  134     // tmp131 = tmp134 : TYPEOF(tmp134);
 65:    is_false_jmp_down  131    0    5     // if (tmp131 == false) goto 70; // REWRITE
 70:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65091;
//             special = true;
 71:           assignment  130    0    4     // tmp130 = true: SIMPLE;
 72:           assignment  254    6  130     // special = tmp130 : TYPEOF(tmp130);
//         }
//         else if (special) {
 73:             jmp_down  253  253          // goto 65094;
 70:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 74; // REWRITE
 74:    is_false_jmp_down  254  253  253     // if (special == false) goto 65095;
//             special = false;
 75:           assignment  130    0    3     // tmp130 = false: SIMPLE;
 76:           assignment  254    6  130     // special = tmp130 : TYPEOF(tmp130);
//             regex += String.escape(ch);
 77:           assignment  130    5  254     // tmp130 = 'escape': STRING;
 78:          prop_getter  131  254  130     // tmp131 = String[tmp130];
 79:           assignment  132    6  254     // tmp132 = String : TYPEOF(String);
 80:               call_n  253  131  253     // 
 81:                 meta    1    1  132     // 
 82:                 meta    2  254  255     // 
 80:               call_n  133  131    1     //  // REWRITE
 83:             addition  254  254  133     // regex = regex + tmp133;
 84:           assignment  134    6  254     // tmp134 = regex : TYPEOF(regex);
//         }
//         else {
 85:             jmp_down  253  253          // goto 65106;
 74:    is_false_jmp_down  254    0   12     // if (special == false) goto 86; // REWRITE
//             obj = Date.formatCodeToRegex(ch, currentGroup);
 86:           assignment  130    5  254     // tmp130 = 'formatCodeToRegex': STRING;
 87:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
 88:           assignment  132    6  254     // tmp132 = Date : TYPEOF(Date);
 89:               call_n  253  131  253     // 
 90:                 meta    1    1  132     // 
 91:                 meta    2  254  255     // 
 92:                 meta    2  254  255     // 
 89:               call_n  133  131    2     //  // REWRITE
 93:           assignment  254    6  133     // obj = tmp133 : TYPEOF(tmp133);
//             currentGroup += obj.g;
 94:           assignment  130    5  254     // tmp130 = 'g': STRING;
 95:          prop_getter  131  254  130     // tmp131 = obj[tmp130];
 96:             addition  254  254  131     // currentGroup = currentGroup + tmp131;
 97:           assignment  132    6  254     // tmp132 = currentGroup : TYPEOF(currentGroup);
//             regex += obj.s;
 98:           assignment  130    5  254     // tmp130 = 's': STRING;
 99:          prop_getter  131  254  130     // tmp131 = obj[tmp130];
100:             addition  254  254  131     // regex = regex + tmp131;
101:           assignment  132    6  254     // tmp132 = regex : TYPEOF(regex);
//             if (obj.g && obj.c) {
102:           assignment  130    5  254     // tmp130 = 'g': STRING;
103:          prop_getter  131  254  130     // tmp131 = obj[tmp130];
104:           assignment  132    6  131     // tmp132 = tmp131 : TYPEOF(tmp131);
105:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65126;
106:           assignment  133    5  254     // tmp133 = 'c': STRING;
107:          prop_getter  134  254  133     // tmp134 = obj[tmp133];
108:           assignment  132    6  134     // tmp132 = tmp134 : TYPEOF(tmp134);
105:    is_false_jmp_down  132    0    4     // if (tmp132 == false) goto 109; // REWRITE
109:    is_false_jmp_down  132  253  253     // if (tmp132 == false) goto 65130;
//                 code += obj.c;
110:           assignment  130    5  254     // tmp130 = 'c': STRING;
111:          prop_getter  131  254  130     // tmp131 = obj[tmp130];
112:             addition  254  254  131     // code = code + tmp131;
113:           assignment  132    6  254     // tmp132 = code : TYPEOF(code);
//             }
//         }
109:    is_false_jmp_down  132    0    5     // if (tmp132 == false) goto 114; // REWRITE
 85:             jmp_down    0   29          // goto 114; // REWRITE
 73:             jmp_down    0   41          // goto 114; // REWRITE
//     }
114:             pre_incr  133  254          // tmp133 = ++i;
 55:             jmp_down    0   60          // goto 115; // REWRITE
115:           assignment  134    6  254     // tmp134 = i : TYPEOF(i);
116:           assignment  135    5  254     // tmp135 = 'length': STRING;
117:          prop_getter  136  254  135     // tmp136 = format[tmp135];
118:            less_than  137  134  136     // tmp137 = tmp134 < tmp136;
119:       is_true_jmp_up  137    0   63     // if (tmp137) goto 56;
//     code += "if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)\n"
120:           assignment  130    5  254     // tmp130 = 'if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)
': STRING;
//         + "{return new Date(y, m, d, h, i, s);}\n"
121:           assignment  131    5  254     // tmp131 = '{return new Date(y, m, d, h, i, s);}
': STRING;
//         + "else if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)\n"
122:             addition  132  130  131     // tmp132 = tmp130 + tmp131;
123:           assignment  133    5  254     // tmp133 = 'else if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)
': STRING;
//         + "{return new Date(y, m, d, h, i);}\n"
124:             addition  134  132  133     // tmp134 = tmp132 + tmp133;
125:           assignment  135    5  254     // tmp135 = '{return new Date(y, m, d, h, i);}
': STRING;
//         + "else if (y > 0 && m >= 0 && d > 0 && h >= 0)\n"
126:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
127:           assignment  137    5  254     // tmp137 = 'else if (y > 0 && m >= 0 && d > 0 && h >= 0)
': STRING;
//         + "{return new Date(y, m, d, h);}\n"
128:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
129:           assignment  139    5  254     // tmp139 = '{return new Date(y, m, d, h);}
': STRING;
//         + "else if (y > 0 && m >= 0 && d > 0)\n"
130:             addition  140  138  139     // tmp140 = tmp138 + tmp139;
131:           assignment  141    5  254     // tmp141 = 'else if (y > 0 && m >= 0 && d > 0)
': STRING;
//         + "{return new Date(y, m, d);}\n"
132:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
133:           assignment  143    5  254     // tmp143 = '{return new Date(y, m, d);}
': STRING;
//         + "else if (y > 0 && m >= 0)\n"
134:             addition  144  142  143     // tmp144 = tmp142 + tmp143;
135:           assignment  145    5  254     // tmp145 = 'else if (y > 0 && m >= 0)
': STRING;
//         + "{return new Date(y, m);}\n"
136:             addition  146  144  145     // tmp146 = tmp144 + tmp145;
137:           assignment  147    5  254     // tmp147 = '{return new Date(y, m);}
': STRING;
//         + "else if (y > 0)\n"
138:             addition  148  146  147     // tmp148 = tmp146 + tmp147;
139:           assignment  149    5  254     // tmp149 = 'else if (y > 0)
': STRING;
//         + "{return new Date(y);}\n"
140:             addition  150  148  149     // tmp150 = tmp148 + tmp149;
141:           assignment  151    5  254     // tmp151 = '{return new Date(y);}
': STRING;
//         + "}return null;}";
142:             addition  152  150  151     // tmp152 = tmp150 + tmp151;
143:           assignment  153    5  254     // tmp153 = '}return null;}': STRING;
144:             addition  154  152  153     // tmp154 = tmp152 + tmp153;
145:             addition  254  254  154     // code = code + tmp154;
146:           assignment  155    6  254     // tmp155 = code : TYPEOF(code);
//     Date.parseRegexes[regexNum] = new RegExp("^" + regex + "$");
147:           assignment  130    5  254     // tmp130 = 'parseRegexes': STRING;
148:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
149:          prop_getter  132  131  254     // tmp132 = tmp131[regexNum];
149:          construct_n  253  254  253     // 
150:           assignment  133    5  254     // tmp133 = '^': STRING;
151:             addition  134  133  254     // tmp134 = tmp133 + regex;
152:           assignment  135    5  254     // tmp135 = '$': STRING;
153:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
154:                 meta    2  136  255     // 
149:          construct_n  133  254    1     //  // REWRITE
155:          prop_setter  131  254  133     // tmp131[regexNum] = tmp133;
//     eval(code);
156:               call_n  253  254  253     // 
157:                 meta    1    2  255     // 
158:                 meta    2  254  255     // 
156:               call_n  130  254    1     //  // REWRITE
// }
  3:                 meta   12    2  255     // [no 'arguments']  // REWRITE
  4:         reg_var_decl  128  155    0     // var tmp128 .. tmp155; // REWRITE
159:                  ret                    // ret;
  2:                 meta    7    0  166     // function end: 168; // REWRITE
// Date.formatCodeToRegex = function(character, currentGroup) {
506:          prop_setter  254  130  132     // Date[tmp130] = tmp132;
507:           assignment  130    5  254     // tmp130 = 'formatCodeToRegex': STRING;
508:          prop_getter  131  254  130     // tmp131 = Date[tmp130];
  0:          func_expr_n  253  255  253     // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_expr_n  132  255    2     //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//     switch (character) {
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
//     case "D":
  6:           assignment  130    5  254     // tmp130 = 'D': STRING;
  7:     equal_value_type  131  254  130     // tmp131 = character === tmp130;
  8:     is_true_jmp_down  131  253  253     // if (tmp131) goto 65029;
//         return {g:0,
//         c:null,
//         s:"(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)"};
//     case "j":
  9:           assignment  132    5  254     // tmp132 = 'j': STRING;
 10:     equal_value_type  133  254  132     // tmp133 = character === tmp132;
 11:     is_true_jmp_down  133  253  253     // if (tmp133) goto 65032;
//     case "d":
 12:           assignment  134    5  254     // tmp134 = 'd': STRING;
 13:     equal_value_type  135  254  134     // tmp135 = character === tmp134;
 14:     is_true_jmp_down  135  253  253     // if (tmp135) goto 65035;
//         return {g:1,
//             c:"d = parseInt(results[" + currentGroup + "], 10);\n",
//             s:"(\\d{1,2})"};
//     case "l":
 15:           assignment  136    5  254     // tmp136 = 'l': STRING;
 16:     equal_value_type  137  254  136     // tmp137 = character === tmp136;
 17:     is_true_jmp_down  137  253  253     // if (tmp137) goto 65038;
//         return {g:0,
//             c:null,
//             s:"(?:" + Date.dayNames.join("|") + ")"};
//     case "S":
 18:           assignment  138    5  254     // tmp138 = 'S': STRING;
 19:     equal_value_type  139  254  138     // tmp139 = character === tmp138;
 20:     is_true_jmp_down  139  253  253     // if (tmp139) goto 65041;
//         return {g:0,
//             c:null,
//             s:"(?:st|nd|rd|th)"};
//     case "w":
 21:           assignment  140    5  254     // tmp140 = 'w': STRING;
 22:     equal_value_type  141  254  140     // tmp141 = character === tmp140;
 23:     is_true_jmp_down  141  253  253     // if (tmp141) goto 65044;
//         return {g:0,
//             c:null,
//             s:"\\d"};
//     case "z":
 24:           assignment  142    5  254     // tmp142 = 'z': STRING;
 25:     equal_value_type  143  254  142     // tmp143 = character === tmp142;
 26:     is_true_jmp_down  143  253  253     // if (tmp143) goto 65047;
//         return {g:0,
//             c:null,
//             s:"(?:\\d{1,3})"};
//     case "W":
 27:           assignment  144    5  254     // tmp144 = 'W': STRING;
 28:     equal_value_type  145  254  144     // tmp145 = character === tmp144;
 29:     is_true_jmp_down  145  253  253     // if (tmp145) goto 65050;
//         return {g:0,
//             c:null,
//             s:"(?:\\d{2})"};
//     case "F":
 30:           assignment  146    5  254     // tmp146 = 'F': STRING;
 31:     equal_value_type  147  254  146     // tmp147 = character === tmp146;
 32:     is_true_jmp_down  147  253  253     // if (tmp147) goto 65053;
//         return {g:1,
//             c:"m = parseInt(Date.monthNumbers[results[" + currentGroup + "].substring(0, 3)], 10);\n",
//             s:"(" + Date.monthNames.join("|") + ")"};
//     case "M":
 33:           assignment  148    5  254     // tmp148 = 'M': STRING;
 34:     equal_value_type  149  254  148     // tmp149 = character === tmp148;
 35:     is_true_jmp_down  149  253  253     // if (tmp149) goto 65056;
//         return {g:1,
//             c:"m = parseInt(Date.monthNumbers[results[" + currentGroup + "]], 10);\n",
//             s:"(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"};
//     case "n":
 36:           assignment  150    5  254     // tmp150 = 'n': STRING;
 37:     equal_value_type  151  254  150     // tmp151 = character === tmp150;
 38:     is_true_jmp_down  151  253  253     // if (tmp151) goto 65059;
//     case "m":
 39:           assignment  152    5  254     // tmp152 = 'm': STRING;
 40:     equal_value_type  153  254  152     // tmp153 = character === tmp152;
 41:     is_true_jmp_down  153  253  253     // if (tmp153) goto 65062;
//         return {g:1,
//             c:"m = parseInt(results[" + currentGroup + "], 10) - 1;\n",
//             s:"(\\d{1,2})"};
//     case "t":
 42:           assignment  154    5  254     // tmp154 = 't': STRING;
 43:     equal_value_type  155  254  154     // tmp155 = character === tmp154;
 44:     is_true_jmp_down  155  253  253     // if (tmp155) goto 65065;
//         return {g:0,
//             c:null,
//             s:"\\d{1,2}"};
//     case "L":
 45:           assignment  156    5  254     // tmp156 = 'L': STRING;
 46:     equal_value_type  157  254  156     // tmp157 = character === tmp156;
 47:     is_true_jmp_down  157  253  253     // if (tmp157) goto 65068;
//         return {g:0,
//             c:null,
//             s:"(?:1|0)"};
//     case "Y":
 48:           assignment  158    5  254     // tmp158 = 'Y': STRING;
 49:     equal_value_type  159  254  158     // tmp159 = character === tmp158;
 50:     is_true_jmp_down  159  253  253     // if (tmp159) goto 65071;
//         return {g:1,
//             c:"y = parseInt(results[" + currentGroup + "], 10);\n",
//             s:"(\\d{4})"};
//     case "y":
 51:           assignment  160    5  254     // tmp160 = 'y': STRING;
 52:     equal_value_type  161  254  160     // tmp161 = character === tmp160;
 53:     is_true_jmp_down  161  253  253     // if (tmp161) goto 65074;
//         return {g:1,
//             c:"var ty = parseInt(results[" + currentGroup + "], 10);\n"
//                 + "y = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n",
//             s:"(\\d{1,2})"};
//     case "a":
 54:           assignment  162    5  254     // tmp162 = 'a': STRING;
 55:     equal_value_type  163  254  162     // tmp163 = character === tmp162;
 56:     is_true_jmp_down  163  253  253     // if (tmp163) goto 65077;
//         return {g:1,
//             c:"if (results[" + currentGroup + "] == 'am') {\n"
//                 + "if (h == 12) { h = 0; }\n"
//                 + "} else { if (h < 12) { h += 12; }}",
//             s:"(am|pm)"};
//     case "A":
 57:           assignment  164    5  254     // tmp164 = 'A': STRING;
 58:     equal_value_type  165  254  164     // tmp165 = character === tmp164;
 59:     is_true_jmp_down  165  253  253     // if (tmp165) goto 65080;
//         return {g:1,
//             c:"if (results[" + currentGroup + "] == 'AM') {\n"
//                 + "if (h == 12) { h = 0; }\n"
//                 + "} else { if (h < 12) { h += 12; }}",
//             s:"(AM|PM)"};
//     case "g":
 60:           assignment  166    5  254     // tmp166 = 'g': STRING;
 61:     equal_value_type  167  254  166     // tmp167 = character === tmp166;
 62:     is_true_jmp_down  167  253  253     // if (tmp167) goto 65083;
//     case "G":
 63:           assignment  168    5  254     // tmp168 = 'G': STRING;
 64:     equal_value_type  169  254  168     // tmp169 = character === tmp168;
 65:     is_true_jmp_down  169  253  253     // if (tmp169) goto 65086;
//     case "h":
 66:           assignment  170    5  254     // tmp170 = 'h': STRING;
 67:     equal_value_type  171  254  170     // tmp171 = character === tmp170;
 68:     is_true_jmp_down  171  253  253     // if (tmp171) goto 65089;
//     case "H":
 69:           assignment  172    5  254     // tmp172 = 'H': STRING;
 70:     equal_value_type  173  254  172     // tmp173 = character === tmp172;
 71:     is_true_jmp_down  173  253  253     // if (tmp173) goto 65092;
//         return {g:1,
//             c:"h = parseInt(results[" + currentGroup + "], 10);\n",
//             s:"(\\d{1,2})"};
//     case "i":
 72:           assignment  174    5  254     // tmp174 = 'i': STRING;
 73:     equal_value_type  175  254  174     // tmp175 = character === tmp174;
 74:     is_true_jmp_down  175  253  253     // if (tmp175) goto 65095;
//         return {g:1,
//             c:"i = parseInt(results[" + currentGroup + "], 10);\n",
//             s:"(\\d{2})"};
//     case "s":
 75:           assignment  176    5  254     // tmp176 = 's': STRING;
 76:     equal_value_type  177  254  176     // tmp177 = character === tmp176;
 77:     is_true_jmp_down  177  253  253     // if (tmp177) goto 65098;
//         return {g:1,
//             c:"s = parseInt(results[" + currentGroup + "], 10);\n",
//             s:"(\\d{2})"};
//     case "O":
 78:           assignment  178    5  254     // tmp178 = 'O': STRING;
 79:     equal_value_type  179  254  178     // tmp179 = character === tmp178;
 80:     is_true_jmp_down  179  253  253     // if (tmp179) goto 65101;
//         return {g:0,
//             c:null,
//             s:"[+-]\\d{4}"};
//     case "T":
 81:           assignment  180    5  254     // tmp180 = 'T': STRING;
 82:     equal_value_type  181  254  180     // tmp181 = character === tmp180;
 83:     is_true_jmp_down  181  253  253     // if (tmp181) goto 65104;
//         return {g:0,
//             c:null,
//             s:"[A-Z]{3}"};
//     case "Z":
 84:           assignment  182    5  254     // tmp182 = 'Z': STRING;
 85:     equal_value_type  183  254  182     // tmp183 = character === tmp182;
 86:     is_true_jmp_down  183  253  253     // if (tmp183) goto 65107;
//         return {g:0,
//             c:null,
//             s:"[+-]\\d{1,5}"};
//     default:
//         return {g:0,
//             c:null,
//             s:String.escape(character)};
//     }
 87:             jmp_down  253  253          // goto 65108;
//     case "D":
  8:     is_true_jmp_down  131    0   80     // if (tmp131) goto 88; // REWRITE
//         return {g:0,
 88:             obj_decl  253  253  255     // 
 89:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 90:           assignment  131    5  254     // tmp131 = 'g': STRING;
 91:                 meta    3  131  130     // 
//         c:null,
 92:           assignment  130    0    2     // tmp130 = null: SIMPLE;
 93:           assignment  131    5  254     // tmp131 = 'c': STRING;
 94:                 meta    3  131  130     // 
//         s:"(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)"};
 95:           assignment  130    5  254     // tmp130 = '(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)': STRING;
 96:           assignment  131    5  254     // tmp131 = 's': STRING;
 97:                 meta    3  131  130     // 
 88:             obj_decl  130    0    3     //  // REWRITE
 98:               retval  130               // return tmp130;
//     case "j":
 11:     is_true_jmp_down  133    0   88     // if (tmp133) goto 99; // REWRITE
//     case "d":
 14:     is_true_jmp_down  135    0   85     // if (tmp135) goto 99; // REWRITE
//         return {g:1,
 99:             obj_decl  253  253  255     // 
100:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
101:           assignment  131    5  254     // tmp131 = 'g': STRING;
102:                 meta    3  131  130     // 
//             c:"d = parseInt(results[" + currentGroup + "], 10);\n",
103:           assignment  130    5  254     // tmp130 = 'd = parseInt(results[': STRING;
104:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
105:           assignment  132    5  254     // tmp132 = '], 10);
': STRING;
106:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
107:           assignment  134    5  254     // tmp134 = 'c': STRING;
108:                 meta    3  134  133     // 
//             s:"(\\d{1,2})"};
109:           assignment  130    5  254     // tmp130 = '(\d{1,2})': STRING;
110:           assignment  131    5  254     // tmp131 = 's': STRING;
111:                 meta    3  131  130     // 
 99:             obj_decl  130    0    3     //  // REWRITE
112:               retval  130               // return tmp130;
//     case "l":
 17:     is_true_jmp_down  137    0   96     // if (tmp137) goto 113; // REWRITE
//         return {g:0,
113:             obj_decl  253  253  255     // 
114:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
115:           assignment  131    5  254     // tmp131 = 'g': STRING;
116:                 meta    3  131  130     // 
//             c:null,
117:           assignment  130    0    2     // tmp130 = null: SIMPLE;
118:           assignment  131    5  254     // tmp131 = 'c': STRING;
119:                 meta    3  131  130     // 
//             s:"(?:" + Date.dayNames.join("|") + ")"};
120:           assignment  130    5  254     // tmp130 = '(?:': STRING;
121:           assignment  131    5  254     // tmp131 = 'dayNames': STRING;
122:          prop_getter  132  254  131     // tmp132 = Date[tmp131];
123:           assignment  133    5  254     // tmp133 = 'join': STRING;
124:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
125:               call_n  253  134  253     // 
126:                 meta    1    1  132     // 
127:           assignment  135    5  254     // tmp135 = '|': STRING;
128:                 meta    2  135  255     // 
125:               call_n  135  134    1     //  // REWRITE
129:             addition  136  130  135     // tmp136 = tmp130 + tmp135;
130:           assignment  137    5  254     // tmp137 = ')': STRING;
131:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
132:           assignment  139    5  254     // tmp139 = 's': STRING;
133:                 meta    3  139  138     // tmp135 = tmp134 (this_arg = tmp132, tmp135, tmp139:tmp138);
113:             obj_decl  130    0    3     //  // REWRITE
134:               retval  130               // return tmp130;
//     case "S":
 20:     is_true_jmp_down  139    0  115     // if (tmp139) goto 135; // REWRITE
//         return {g:0,
135:             obj_decl  253  253  255     // 
136:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
137:           assignment  131    5  254     // tmp131 = 'g': STRING;
138:                 meta    3  131  130     // 
//             c:null,
139:           assignment  130    0    2     // tmp130 = null: SIMPLE;
140:           assignment  131    5  254     // tmp131 = 'c': STRING;
141:                 meta    3  131  130     // 
//             s:"(?:st|nd|rd|th)"};
142:           assignment  130    5  254     // tmp130 = '(?:st|nd|rd|th)': STRING;
143:           assignment  131    5  254     // tmp131 = 's': STRING;
144:                 meta    3  131  130     // 
135:             obj_decl  130    0    3     //  // REWRITE
145:               retval  130               // return tmp130;
//     case "w":
 23:     is_true_jmp_down  141    0  123     // if (tmp141) goto 146; // REWRITE
//         return {g:0,
146:             obj_decl  253  253  255     // 
147:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
148:           assignment  131    5  254     // tmp131 = 'g': STRING;
149:                 meta    3  131  130     // 
//             c:null,
150:           assignment  130    0    2     // tmp130 = null: SIMPLE;
151:           assignment  131    5  254     // tmp131 = 'c': STRING;
152:                 meta    3  131  130     // 
//             s:"\\d"};
153:           assignment  130    5  254     // tmp130 = '\d': STRING;
154:           assignment  131    5  254     // tmp131 = 's': STRING;
155:                 meta    3  131  130     // 
146:             obj_decl  130    0    3     //  // REWRITE
156:               retval  130               // return tmp130;
//     case "z":
 26:     is_true_jmp_down  143    0  131     // if (tmp143) goto 157; // REWRITE
//         return {g:0,
157:             obj_decl  253  253  255     // 
158:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
159:           assignment  131    5  254     // tmp131 = 'g': STRING;
160:                 meta    3  131  130     // 
//             c:null,
161:           assignment  130    0    2     // tmp130 = null: SIMPLE;
162:           assignment  131    5  254     // tmp131 = 'c': STRING;
163:                 meta    3  131  130     // 
//             s:"(?:\\d{1,3})"};
164:           assignment  130    5  254     // tmp130 = '(?:\d{1,3})': STRING;
165:           assignment  131    5  254     // tmp131 = 's': STRING;
166:                 meta    3  131  130     // 
157:             obj_decl  130    0    3     //  // REWRITE
167:               retval  130               // return tmp130;
//     case "W":
 29:     is_true_jmp_down  145    0  139     // if (tmp145) goto 168; // REWRITE
//         return {g:0,
168:             obj_decl  253  253  255     // 
169:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
170:           assignment  131    5  254     // tmp131 = 'g': STRING;
171:                 meta    3  131  130     // 
//             c:null,
172:           assignment  130    0    2     // tmp130 = null: SIMPLE;
173:           assignment  131    5  254     // tmp131 = 'c': STRING;
174:                 meta    3  131  130     // 
//             s:"(?:\\d{2})"};
175:           assignment  130    5  254     // tmp130 = '(?:\d{2})': STRING;
176:           assignment  131    5  254     // tmp131 = 's': STRING;
177:                 meta    3  131  130     // 
168:             obj_decl  130    0    3     //  // REWRITE
178:               retval  130               // return tmp130;
//     case "F":
 32:     is_true_jmp_down  147    0  147     // if (tmp147) goto 179; // REWRITE
//         return {g:1,
179:             obj_decl  253  253  255     // 
180:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
181:           assignment  131    5  254     // tmp131 = 'g': STRING;
182:                 meta    3  131  130     // 
//             c:"m = parseInt(Date.monthNumbers[results[" + currentGroup + "].substring(0, 3)], 10);\n",
183:           assignment  130    5  254     // tmp130 = 'm = parseInt(Date.monthNumbers[results[': STRING;
184:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
185:           assignment  132    5  254     // tmp132 = '].substring(0, 3)], 10);
': STRING;
186:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
187:           assignment  134    5  254     // tmp134 = 'c': STRING;
188:                 meta    3  134  133     // 
//             s:"(" + Date.monthNames.join("|") + ")"};
189:           assignment  130    5  254     // tmp130 = '(': STRING;
190:           assignment  131    5  254     // tmp131 = 'monthNames': STRING;
191:          prop_getter  132  254  131     // tmp132 = Date[tmp131];
192:           assignment  133    5  254     // tmp133 = 'join': STRING;
193:          prop_getter  134  132  133     // tmp134 = tmp132[tmp133];
194:               call_n  253  134  253     // 
195:                 meta    1    1  132     // 
196:           assignment  135    5  254     // tmp135 = '|': STRING;
197:                 meta    2  135  255     // 
194:               call_n  135  134    1     //  // REWRITE
198:             addition  136  130  135     // tmp136 = tmp130 + tmp135;
199:           assignment  137    5  254     // tmp137 = ')': STRING;
200:             addition  138  136  137     // tmp138 = tmp136 + tmp137;
201:           assignment  139    5  254     // tmp139 = 's': STRING;
202:                 meta    3  139  138     // tmp135 = tmp134 (this_arg = tmp132, tmp135, tmp139:tmp138);
179:             obj_decl  130    0    3     //  // REWRITE
203:               retval  130               // return tmp130;
//     case "M":
 35:     is_true_jmp_down  149    0  169     // if (tmp149) goto 204; // REWRITE
//         return {g:1,
204:             obj_decl  253  253  255     // 
205:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
206:           assignment  131    5  254     // tmp131 = 'g': STRING;
207:                 meta    3  131  130     // 
//             c:"m = parseInt(Date.monthNumbers[results[" + currentGroup + "]], 10);\n",
208:           assignment  130    5  254     // tmp130 = 'm = parseInt(Date.monthNumbers[results[': STRING;
209:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
210:           assignment  132    5  254     // tmp132 = ']], 10);
': STRING;
211:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
212:           assignment  134    5  254     // tmp134 = 'c': STRING;
213:                 meta    3  134  133     // 
//             s:"(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"};
214:           assignment  130    5  254     // tmp130 = '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)': STRING;
215:           assignment  131    5  254     // tmp131 = 's': STRING;
216:                 meta    3  131  130     // 
204:             obj_decl  130    0    3     //  // REWRITE
217:               retval  130               // return tmp130;
//     case "n":
 38:     is_true_jmp_down  151    0  180     // if (tmp151) goto 218; // REWRITE
//     case "m":
 41:     is_true_jmp_down  153    0  177     // if (tmp153) goto 218; // REWRITE
//         return {g:1,
218:             obj_decl  253  253  255     // 
219:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
220:           assignment  131    5  254     // tmp131 = 'g': STRING;
221:                 meta    3  131  130     // 
//             c:"m = parseInt(results[" + currentGroup + "], 10) - 1;\n",
222:           assignment  130    5  254     // tmp130 = 'm = parseInt(results[': STRING;
223:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
224:           assignment  132    5  254     // tmp132 = '], 10) - 1;
': STRING;
225:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
226:           assignment  134    5  254     // tmp134 = 'c': STRING;
227:                 meta    3  134  133     // 
//             s:"(\\d{1,2})"};
228:           assignment  130    5  254     // tmp130 = '(\d{1,2})': STRING;
229:           assignment  131    5  254     // tmp131 = 's': STRING;
230:                 meta    3  131  130     // 
218:             obj_decl  130    0    3     //  // REWRITE
231:               retval  130               // return tmp130;
//     case "t":
 44:     is_true_jmp_down  155    0  188     // if (tmp155) goto 232; // REWRITE
//         return {g:0,
232:             obj_decl  253  253  255     // 
233:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
234:           assignment  131    5  254     // tmp131 = 'g': STRING;
235:                 meta    3  131  130     // 
//             c:null,
236:           assignment  130    0    2     // tmp130 = null: SIMPLE;
237:           assignment  131    5  254     // tmp131 = 'c': STRING;
238:                 meta    3  131  130     // 
//             s:"\\d{1,2}"};
239:           assignment  130    5  254     // tmp130 = '\d{1,2}': STRING;
240:           assignment  131    5  254     // tmp131 = 's': STRING;
241:                 meta    3  131  130     // 
232:             obj_decl  130    0    3     //  // REWRITE
242:               retval  130               // return tmp130;
//     case "L":
 47:     is_true_jmp_down  157    0  196     // if (tmp157) goto 243; // REWRITE
//         return {g:0,
243:             obj_decl  253  253  255     // 
244:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
245:           assignment  131    5  254     // tmp131 = 'g': STRING;
246:                 meta    3  131  130     // 
//             c:null,
247:           assignment  130    0    2     // tmp130 = null: SIMPLE;
248:           assignment  131    5  254     // tmp131 = 'c': STRING;
249:                 meta    3  131  130     // 
//             s:"(?:1|0)"};
250:           assignment  130    5  254     // tmp130 = '(?:1|0)': STRING;
251:           assignment  131    5  254     // tmp131 = 's': STRING;
252:                 meta    3  131  130     // 
243:             obj_decl  130    0    3     //  // REWRITE
253:               retval  130               // return tmp130;
//     case "Y":
 50:     is_true_jmp_down  159    0  204     // if (tmp159) goto 254; // REWRITE
//         return {g:1,
254:             obj_decl  253  253  255     // 
255:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
256:           assignment  131    5  254     // tmp131 = 'g': STRING;
257:                 meta    3  131  130     // 
//             c:"y = parseInt(results[" + currentGroup + "], 10);\n",
258:           assignment  130    5  254     // tmp130 = 'y = parseInt(results[': STRING;
259:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
260:           assignment  132    5  254     // tmp132 = '], 10);
': STRING;
261:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
262:           assignment  134    5  254     // tmp134 = 'c': STRING;
263:                 meta    3  134  133     // 
//             s:"(\\d{4})"};
264:           assignment  130    5  254     // tmp130 = '(\d{4})': STRING;
265:           assignment  131    5  254     // tmp131 = 's': STRING;
266:                 meta    3  131  130     // 
254:             obj_decl  130    0    3     //  // REWRITE
267:               retval  130               // return tmp130;
//     case "y":
 53:     is_true_jmp_down  161    0  215     // if (tmp161) goto 268; // REWRITE
//         return {g:1,
268:             obj_decl  253  253  255     // 
269:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
270:           assignment  131    5  254     // tmp131 = 'g': STRING;
271:                 meta    3  131  130     // 
//             c:"var ty = parseInt(results[" + currentGroup + "], 10);\n"
272:           assignment  130    5  254     // tmp130 = 'var ty = parseInt(results[': STRING;
273:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
274:           assignment  132    5  254     // tmp132 = '], 10);
': STRING;
//                 + "y = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n",
275:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
276:           assignment  134    5  254     // tmp134 = 'y = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;
': STRING;
277:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
278:           assignment  136    5  254     // tmp136 = 'c': STRING;
279:                 meta    3  136  135     // 
//             s:"(\\d{1,2})"};
280:           assignment  130    5  254     // tmp130 = '(\d{1,2})': STRING;
281:           assignment  131    5  254     // tmp131 = 's': STRING;
282:                 meta    3  131  130     // 
268:             obj_decl  130    0    3     //  // REWRITE
283:               retval  130               // return tmp130;
//     case "a":
 56:     is_true_jmp_down  163    0  228     // if (tmp163) goto 284; // REWRITE
//         return {g:1,
284:             obj_decl  253  253  255     // 
285:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
286:           assignment  131    5  254     // tmp131 = 'g': STRING;
287:                 meta    3  131  130     // 
//             c:"if (results[" + currentGroup + "] == 'am') {\n"
288:           assignment  130    5  254     // tmp130 = 'if (results[': STRING;
289:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
290:           assignment  132    5  254     // tmp132 = '] == 'am') {
': STRING;
//                 + "if (h == 12) { h = 0; }\n"
291:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
292:           assignment  134    5  254     // tmp134 = 'if (h == 12) { h = 0; }
': STRING;
//                 + "} else { if (h < 12) { h += 12; }}",
293:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
294:           assignment  136    5  254     // tmp136 = '} else { if (h < 12) { h += 12; }}': STRING;
295:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
296:           assignment  138    5  254     // tmp138 = 'c': STRING;
297:                 meta    3  138  137     // 
//             s:"(am|pm)"};
298:           assignment  130    5  254     // tmp130 = '(am|pm)': STRING;
299:           assignment  131    5  254     // tmp131 = 's': STRING;
300:                 meta    3  131  130     // 
284:             obj_decl  130    0    3     //  // REWRITE
301:               retval  130               // return tmp130;
//     case "A":
 59:     is_true_jmp_down  165    0  243     // if (tmp165) goto 302; // REWRITE
//         return {g:1,
302:             obj_decl  253  253  255     // 
303:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
304:           assignment  131    5  254     // tmp131 = 'g': STRING;
305:                 meta    3  131  130     // 
//             c:"if (results[" + currentGroup + "] == 'AM') {\n"
306:           assignment  130    5  254     // tmp130 = 'if (results[': STRING;
307:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
308:           assignment  132    5  254     // tmp132 = '] == 'AM') {
': STRING;
//                 + "if (h == 12) { h = 0; }\n"
309:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
310:           assignment  134    5  254     // tmp134 = 'if (h == 12) { h = 0; }
': STRING;
//                 + "} else { if (h < 12) { h += 12; }}",
311:             addition  135  133  134     // tmp135 = tmp133 + tmp134;
312:           assignment  136    5  254     // tmp136 = '} else { if (h < 12) { h += 12; }}': STRING;
313:             addition  137  135  136     // tmp137 = tmp135 + tmp136;
314:           assignment  138    5  254     // tmp138 = 'c': STRING;
315:                 meta    3  138  137     // 
//             s:"(AM|PM)"};
316:           assignment  130    5  254     // tmp130 = '(AM|PM)': STRING;
317:           assignment  131    5  254     // tmp131 = 's': STRING;
318:                 meta    3  131  130     // 
302:             obj_decl  130    0    3     //  // REWRITE
319:               retval  130               // return tmp130;
//     case "g":
 62:     is_true_jmp_down  167    1    2     // if (tmp167) goto 320; // REWRITE
//     case "G":
 65:     is_true_jmp_down  169    0  255     // if (tmp169) goto 320; // REWRITE
//     case "h":
 68:     is_true_jmp_down  171    0  252     // if (tmp171) goto 320; // REWRITE
//     case "H":
 71:     is_true_jmp_down  173    0  249     // if (tmp173) goto 320; // REWRITE
//         return {g:1,
320:             obj_decl  253  253  255     // 
321:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
322:           assignment  131    5  254     // tmp131 = 'g': STRING;
323:                 meta    3  131  130     // 
//             c:"h = parseInt(results[" + currentGroup + "], 10);\n",
324:           assignment  130    5  254     // tmp130 = 'h = parseInt(results[': STRING;
325:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
326:           assignment  132    5  254     // tmp132 = '], 10);
': STRING;
327:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
328:           assignment  134    5  254     // tmp134 = 'c': STRING;
329:                 meta    3  134  133     // 
//             s:"(\\d{1,2})"};
330:           assignment  130    5  254     // tmp130 = '(\d{1,2})': STRING;
331:           assignment  131    5  254     // tmp131 = 's': STRING;
332:                 meta    3  131  130     // 
320:             obj_decl  130    0    3     //  // REWRITE
333:               retval  130               // return tmp130;
//     case "i":
 74:     is_true_jmp_down  175    1    4     // if (tmp175) goto 334; // REWRITE
//         return {g:1,
334:             obj_decl  253  253  255     // 
335:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
336:           assignment  131    5  254     // tmp131 = 'g': STRING;
337:                 meta    3  131  130     // 
//             c:"i = parseInt(results[" + currentGroup + "], 10);\n",
338:           assignment  130    5  254     // tmp130 = 'i = parseInt(results[': STRING;
339:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
340:           assignment  132    5  254     // tmp132 = '], 10);
': STRING;
341:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
342:           assignment  134    5  254     // tmp134 = 'c': STRING;
343:                 meta    3  134  133     // 
//             s:"(\\d{2})"};
344:           assignment  130    5  254     // tmp130 = '(\d{2})': STRING;
345:           assignment  131    5  254     // tmp131 = 's': STRING;
346:                 meta    3  131  130     // 
334:             obj_decl  130    0    3     //  // REWRITE
347:               retval  130               // return tmp130;
//     case "s":
 77:     is_true_jmp_down  177    1   15     // if (tmp177) goto 348; // REWRITE
//         return {g:1,
348:             obj_decl  253  253  255     // 
349:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
350:           assignment  131    5  254     // tmp131 = 'g': STRING;
351:                 meta    3  131  130     // 
//             c:"s = parseInt(results[" + currentGroup + "], 10);\n",
352:           assignment  130    5  254     // tmp130 = 's = parseInt(results[': STRING;
353:             addition  131  130  254     // tmp131 = tmp130 + currentGroup;
354:           assignment  132    5  254     // tmp132 = '], 10);
': STRING;
355:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
356:           assignment  134    5  254     // tmp134 = 'c': STRING;
357:                 meta    3  134  133     // 
//             s:"(\\d{2})"};
358:           assignment  130    5  254     // tmp130 = '(\d{2})': STRING;
359:           assignment  131    5  254     // tmp131 = 's': STRING;
360:                 meta    3  131  130     // 
348:             obj_decl  130    0    3     //  // REWRITE
361:               retval  130               // return tmp130;
//     case "O":
 80:     is_true_jmp_down  179    1   26     // if (tmp179) goto 362; // REWRITE
//         return {g:0,
362:             obj_decl  253  253  255     // 
363:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
364:           assignment  131    5  254     // tmp131 = 'g': STRING;
365:                 meta    3  131  130     // 
//             c:null,
366:           assignment  130    0    2     // tmp130 = null: SIMPLE;
367:           assignment  131    5  254     // tmp131 = 'c': STRING;
368:                 meta    3  131  130     // 
//             s:"[+-]\\d{4}"};
369:           assignment  130    5  254     // tmp130 = '[+-]\d{4}': STRING;
370:           assignment  131    5  254     // tmp131 = 's': STRING;
371:                 meta    3  131  130     // 
362:             obj_decl  130    0    3     //  // REWRITE
372:               retval  130               // return tmp130;
//     case "T":
 83:     is_true_jmp_down  181    1   34     // if (tmp181) goto 373; // REWRITE
//         return {g:0,
373:             obj_decl  253  253  255     // 
374:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
375:           assignment  131    5  254     // tmp131 = 'g': STRING;
376:                 meta    3  131  130     // 
//             c:null,
377:           assignment  130    0    2     // tmp130 = null: SIMPLE;
378:           assignment  131    5  254     // tmp131 = 'c': STRING;
379:                 meta    3  131  130     // 
//             s:"[A-Z]{3}"};
380:           assignment  130    5  254     // tmp130 = '[A-Z]{3}': STRING;
381:           assignment  131    5  254     // tmp131 = 's': STRING;
382:                 meta    3  131  130     // 
373:             obj_decl  130    0    3     //  // REWRITE
383:               retval  130               // return tmp130;
//     case "Z":
 86:     is_true_jmp_down  183    1   42     // if (tmp183) goto 384; // REWRITE
//         return {g:0,
384:             obj_decl  253  253  255     // 
385:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
386:           assignment  131    5  254     // tmp131 = 'g': STRING;
387:                 meta    3  131  130     // 
//             c:null,
388:           assignment  130    0    2     // tmp130 = null: SIMPLE;
389:           assignment  131    5  254     // tmp131 = 'c': STRING;
390:                 meta    3  131  130     // 
//             s:"[+-]\\d{1,5}"};
391:           assignment  130    5  254     // tmp130 = '[+-]\d{1,5}': STRING;
392:           assignment  131    5  254     // tmp131 = 's': STRING;
393:                 meta    3  131  130     // 
384:             obj_decl  130    0    3     //  // REWRITE
394:               retval  130               // return tmp130;
//     default:
//         return {g:0,
 87:             jmp_down    1   52          // goto 395; // REWRITE
395:             obj_decl  253  253  255     // 
396:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
397:           assignment  131    5  254     // tmp131 = 'g': STRING;
398:                 meta    3  131  130     // 
//             c:null,
399:           assignment  130    0    2     // tmp130 = null: SIMPLE;
400:           assignment  131    5  254     // tmp131 = 'c': STRING;
401:                 meta    3  131  130     // 
//             s:String.escape(character)};
402:           assignment  130    5  254     // tmp130 = 'escape': STRING;
403:          prop_getter  131  254  130     // tmp131 = String[tmp130];
404:           assignment  132    6  254     // tmp132 = String : TYPEOF(String);
405:               call_n  253  131  253     // 
406:                 meta    1    1  132     // 
407:                 meta    2  254  255     // 
405:               call_n  133  131    1     //  // REWRITE
408:           assignment  134    5  254     // tmp134 = 's': STRING;
409:                 meta    3  134  133     // tmp133 = tmp131 (this_arg = tmp132, ICE: Assertion 'lit_ids != NULL' failed at /home/john/git/jerry/jerry-core/vm/pretty-printer.cpp(var_to_str):102.
Error: ERR_FAILED_INTERNAL_ASSERTION
