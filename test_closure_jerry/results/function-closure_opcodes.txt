// function f()
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function f (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
// {
//     function g() { }
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  0:          func_decl_n  254    0          // function g (); // REWRITE
  1:                 meta    7  253  253     // function end: 65022;
  2:                 meta   12  253  255     // [to be rewritten]
  3:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  130    0     // var tmp128 .. tmp130; // REWRITE
  4:                  ret                    // ret;
  1:                 meta    7    0    4     // function end: 5; // REWRITE
// }
  2:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128  130    0     // var tmp128 .. tmp130; // REWRITE
  4:                  ret                    // ret;
  1:                 meta    7    0    9     // function end: 10; // REWRITE
// for (var i = 0; i < 300000; ++i)
//     f();
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  4:             jmp_down  253  253          // goto 65025;
  5:               call_n  253  254  253     // 
  5:               call_n  130  254    0     //  // REWRITE
  6:             pre_incr  131  254          // tmp131 = ++i;
  4:             jmp_down    0    3          // goto 7; // REWRITE
  7:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
  8:           assignment  133    3  254     // tmp133 = 300000: NUMBER;
  9:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 10:       is_true_jmp_up  134    0    5     // if (tmp134) goto 5;
// 
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 11:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] f : STRING
0x8a54cc [  4] g : MAGIC STRING [id=206] 
0x8a54d0 [  4] i : MAGIC STRING [id=207] 
0x8a54d4 [ 12] 300000 : NUMBER
0x8a54e0 [ 32]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
  2:             var_decl    0               // var i;
  3:          func_decl_n    1    0          // function f ();
  4:                 meta    7    0    9     // function end: 13;
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  6:         reg_var_decl  128  130    0     // var tmp128 .. tmp130;
  7:          func_decl_n    2    0          // function g ();
  8:                 meta    7    0    4     // function end: 12;
  9:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 10:         reg_var_decl  128  130    0     // var tmp128 .. tmp130;
 11:                  ret                    // ret;
 12:                  ret                    // ret;
 13:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 14:           assignment    0    6  130     // i = tmp130 : TYPEOF(tmp130);
 15:             jmp_down    0    3          // goto 18;
 16:               call_n  130    1    0     // 
 17:             pre_incr  131    0          // tmp131 = ++i;
 18:           assignment  132    6    0     // tmp132 = i : TYPEOF(i);
 19:           assignment  133    3    3     // tmp133 = 300000: NUMBER;
 20:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 21:       is_true_jmp_up  134    0    5     // if (tmp134) goto 16;
 22:                  ret                    // ret;
