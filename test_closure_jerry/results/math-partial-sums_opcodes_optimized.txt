// for(var a=0,b=1024;16384>=b;b*=2){var c=a,d=b;a2=a3=a4=a5=a6=a7=a8=a9=0;for(var e=-1,f=k3=sk=ck=0,g=1;g<=d;g++)f=g*g,k3=f*g,sk=Math.sin(g),ck=Math.cos(g),e=-e,a2+=Math.pow(g,-.5),a3+=1/(g*(g+1)),a4+=1/(k3*sk*sk),a5+=1/(k3*ck*ck),a6+=1/g,a7+=1/f,a8+=e/g,a9+=e/(2*g-1);a=c+(a6+a7+a8+a9)}if(60.08994194659945!=a)throw"ERROR: bad result: expected 60.08994194659945 but got "+a;
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // a = tmp130 : TYPEOF(tmp130);
  4:           assignment  131    3  254     // tmp131 = 1024: NUMBER;
  5:           assignment  254    6  131     // b = tmp131 : TYPEOF(tmp131);
  6:             jmp_down  253  253          // goto 65027;
  7:           assignment  254    6  254     // c = a : TYPEOF(a);
  8:           assignment  254    6  254     // d = b : TYPEOF(b);
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment  254    6  130     // a9 = tmp130 : TYPEOF(tmp130);
 11:           assignment  254    6  130     // a8 = tmp130 : TYPEOF(tmp130);
 12:           assignment  254    6  130     // a7 = tmp130 : TYPEOF(tmp130);
 13:           assignment  254    6  130     // a6 = tmp130 : TYPEOF(tmp130);
 14:           assignment  254    6  130     // a5 = tmp130 : TYPEOF(tmp130);
 15:           assignment  254    6  130     // a4 = tmp130 : TYPEOF(tmp130);
 16:           assignment  254    6  130     // a3 = tmp130 : TYPEOF(tmp130);
 17:           assignment  254    6  130     // a2 = tmp130 : TYPEOF(tmp130);
 18:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 19:          unary_minus  131  130          // tmp131 = -tmp130;
 20:           assignment  254    6  131     // e = tmp131 : TYPEOF(tmp131);
 21:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 22:           assignment  254    6  132     // ck = tmp132 : TYPEOF(tmp132);
 23:           assignment  254    6  132     // sk = tmp132 : TYPEOF(tmp132);
 24:           assignment  254    6  132     // k3 = tmp132 : TYPEOF(tmp132);
 25:           assignment  254    6  132     // f = tmp132 : TYPEOF(tmp132);
 26:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 27:           assignment  254    6  133     // g = tmp133 : TYPEOF(tmp133);
 28:             jmp_down  253  253          // goto 65049;
 29:           assignment  130    6  254     // tmp130 = g : TYPEOF(g);
 30:       multiplication  131  130  254     // tmp131 = tmp130 * g;
 31:           assignment  254    6  131     // f = tmp131 : TYPEOF(tmp131);
 32:           assignment  132    6  254     // tmp132 = f : TYPEOF(f);
 33:       multiplication  133  132  254     // tmp133 = tmp132 * g;
 34:           assignment  254    6  133     // k3 = tmp133 : TYPEOF(tmp133);
 35:           assignment  134    5  254     // tmp134 = 'sin': STRING;
 36:          prop_getter  135  254  134     // tmp135 = Math[tmp134];
 37:           assignment  136    6  254     // tmp136 = Math : TYPEOF(Math);
 38:               call_n  253  135  253     // 
 39:                 meta    1    1  136     // 
 40:                 meta    2  254  255     // 
 38:               call_n  137  135    1     //  // REWRITE
 41:           assignment  254    6  137     // sk = tmp137 : TYPEOF(tmp137);
 42:           assignment  138    5  254     // tmp138 = 'cos': STRING;
 43:          prop_getter  139  254  138     // tmp139 = Math[tmp138];
 44:           assignment  140    6  254     // tmp140 = Math : TYPEOF(Math);
 45:               call_n  253  139  253     // 
 46:                 meta    1    1  140     // 
 47:                 meta    2  254  255     // 
 45:               call_n  141  139    1     //  // REWRITE
 48:           assignment  254    6  141     // ck = tmp141 : TYPEOF(tmp141);
 49:          unary_minus  142  254          // tmp142 = -e;
 50:           assignment  254    6  142     // e = tmp142 : TYPEOF(tmp142);
 51:           assignment  143    5  254     // tmp143 = 'pow': STRING;
 52:          prop_getter  144  254  143     // tmp144 = Math[tmp143];
 53:           assignment  145    6  254     // tmp145 = Math : TYPEOF(Math);
 54:               call_n  253  144  253     // 
 55:                 meta    1    1  145     // 
 56:                 meta    2  254  255     // 
 57:           assignment  146    3  254     // tmp146 = 0.5: NUMBER;
 58:          unary_minus  147  146          // tmp147 = -tmp146;
 59:                 meta    2  147  255     // 
 54:               call_n  146  144    2     //  // REWRITE
 60:             addition  254  254  146     // a2 = a2 + tmp146;
 61:           assignment  147    6  254     // tmp147 = a2 : TYPEOF(a2);
 62:           assignment  148    1    1     // tmp148 = 1: SMALLINT;
 63:           assignment  149    6  254     // tmp149 = g : TYPEOF(g);
 64:           assignment  150    6  254     // tmp150 = g : TYPEOF(g);
 65:           assignment  151    1    1     // tmp151 = 1: SMALLINT;
 66:             addition  152  150  151     // tmp152 = tmp150 + tmp151;
 67:       multiplication  153  149  152     // tmp153 = tmp149 * tmp152;
 68:             division  154  148  153     // tmp154 = tmp148 / tmp153;
 69:             addition  254  254  154     // a3 = a3 + tmp154;
 70:           assignment  155    6  254     // tmp155 = a3 : TYPEOF(a3);
 71:           assignment  156    1    1     // tmp156 = 1: SMALLINT;
 72:           assignment  157    6  254     // tmp157 = k3 : TYPEOF(k3);
 73:       multiplication  158  157  254     // tmp158 = tmp157 * sk;
 74:       multiplication  159  158  254     // tmp159 = tmp158 * sk;
 75:             division  160  156  159     // tmp160 = tmp156 / tmp159;
 76:             addition  254  254  160     // a4 = a4 + tmp160;
 77:           assignment  161    6  254     // tmp161 = a4 : TYPEOF(a4);
 78:           assignment  162    1    1     // tmp162 = 1: SMALLINT;
 79:           assignment  163    6  254     // tmp163 = k3 : TYPEOF(k3);
 80:       multiplication  164  163  254     // tmp164 = tmp163 * ck;
 81:       multiplication  165  164  254     // tmp165 = tmp164 * ck;
 82:             division  166  162  165     // tmp166 = tmp162 / tmp165;
 83:             addition  254  254  166     // a5 = a5 + tmp166;
 84:           assignment  167    6  254     // tmp167 = a5 : TYPEOF(a5);
 85:           assignment  168    1    1     // tmp168 = 1: SMALLINT;
 86:             division  169  168  254     // tmp169 = tmp168 / g;
 87:             addition  254  254  169     // a6 = a6 + tmp169;
 88:           assignment  170    6  254     // tmp170 = a6 : TYPEOF(a6);
 89:           assignment  171    1    1     // tmp171 = 1: SMALLINT;
 90:             division  172  171  254     // tmp172 = tmp171 / f;
 91:             addition  254  254  172     // a7 = a7 + tmp172;
 92:           assignment  173    6  254     // tmp173 = a7 : TYPEOF(a7);
 93:           assignment  174    6  254     // tmp174 = e : TYPEOF(e);
 94:             division  175  174  254     // tmp175 = tmp174 / g;
 95:             addition  254  254  175     // a8 = a8 + tmp175;
 96:           assignment  176    6  254     // tmp176 = a8 : TYPEOF(a8);
 97:           assignment  177    6  254     // tmp177 = e : TYPEOF(e);
 98:           assignment  178    1    2     // tmp178 = 2: SMALLINT;
 99:       multiplication  179  178  254     // tmp179 = tmp178 * g;
100:           assignment  180    1    1     // tmp180 = 1: SMALLINT;
101:         substraction  181  179  180     // tmp181 = tmp179 - tmp180;
102:             division  182  177  181     // tmp182 = tmp177 / tmp181;
103:             addition  254  254  182     // a9 = a9 + tmp182;
104:           assignment  183    6  254     // tmp183 = a9 : TYPEOF(a9);
105:            post_incr  184  254          // tmp184 = g++;
 28:             jmp_down    0   78          // goto 106; // REWRITE
106:           assignment  185    6  254     // tmp185 = g : TYPEOF(g);
107:   less_or_equal_than  186  185  254     // tmp186 = tmp185 <= d;
108:       is_true_jmp_up  186    0   79     // if (tmp186) goto 29;
109:           assignment  130    6  254     // tmp130 = c : TYPEOF(c);
110:           assignment  131    6  254     // tmp131 = a6 : TYPEOF(a6);
111:             addition  132  131  254     // tmp132 = tmp131 + a7;
112:             addition  133  132  254     // tmp133 = tmp132 + a8;
113:             addition  134  133  254     // tmp134 = tmp133 + a9;
114:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
115:           assignment  254    6  135     // a = tmp135 : TYPEOF(tmp135);
116:           assignment  136    1    2     // tmp136 = 2: SMALLINT;
117:       multiplication  254  254  136     // b = b * tmp136;
  6:             jmp_down    0  112          // goto 118; // REWRITE
118:           assignment  137    3  254     // tmp137 = 16384: NUMBER;
119: greater_or_equal_than  138  137  254     // tmp138 = tmp137 >= b;
120:       is_true_jmp_up  138    0  113     // if (tmp138) goto 7;
121:           assignment  130    3  254     // tmp130 = 60.08994194659945: NUMBER;
122:      not_equal_value  131  130  254     // tmp131 = tmp130 != a;
123:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65144;
124:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected 60.08994194659945 but got ': STRING;
125:             addition  131  130  254     // tmp131 = tmp130 + a;
126:          throw_value  131               // throw tmp131;
// 
123:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 127; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  186    0     // var tmp128 .. tmp186; // REWRITE
127:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] a : STRING
0x8a54cc [  8] b : STRING
0x8a54d4 [ 12] 1024 : NUMBER
0x8a54e0 [ 12] 16384 : NUMBER
0x8a54ec [  8] c : STRING
0x8a54f4 [  8] d : STRING
0x8a54fc [  8] a2 : STRING
0x8a5508 [  8] a3 : STRING
0x8a5510 [  8] a4 : STRING
0x8a5518 [  8] a5 : STRING
0x8a5520 [  8] a6 : STRING
0x8a5528 [  8] a7 : STRING
0x8a5530 [  8] a8 : STRING
0x8a5538 [  8] a9 : STRING
0x8a5544 [  8] e : STRING
0x8a554c [  8] f : STRING
0x8a5554 [  8] k3 : STRING
0x8a555c [  8] sk : STRING
0x8a5564 [  8] ck : STRING
0x8a556c [  4] g : MAGIC STRING [id=206] 
0x8a5570 [  4] Math : MAGIC STRING [id=44] 
0x8a5574 [  4] sin : MAGIC STRING [id=99] 
0x8a5578 [  4] cos : MAGIC STRING [id=90] 
0x8a557c [  4] pow : MAGIC STRING [id=96] 
0x8a5584 [ 12] 0.5 : NUMBER
0x8a5590 [ 12] 60.08994194659945 : NUMBER
0x8a559c [ 60] ERROR: bad result: expected 60.08994194659945 but got  : STRING
0x8a55dc [ 36]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  186    0     // var tmp128 .. tmp186;
  2:             var_decl    0               // var a;
  3:             var_decl    1               // var b;
  4:             var_decl    2               // var c;
  5:             var_decl    3               // var d;
  6:             var_decl    4               // var e;
  7:             var_decl    5               // var f;
  8:             var_decl    6               // var g;
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment    0    6  130     // a = tmp130 : TYPEOF(tmp130);
 11:           assignment  131    3    7     // tmp131 = 1024: NUMBER;
 12:           assignment    1    6  131     // b = tmp131 : TYPEOF(tmp131);
 13:             jmp_down    0  112          // goto 125;
 14:           assignment    2    6    0     // c = a : TYPEOF(a);
 15:           assignment    3    6    1     // d = b : TYPEOF(b);
 16:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 17:           assignment    8    6  130     // a9 = tmp130 : TYPEOF(tmp130);
 18:           assignment    9    6  130     // a8 = tmp130 : TYPEOF(tmp130);
 19:           assignment   10    6  130     // a7 = tmp130 : TYPEOF(tmp130);
 20:           assignment   11    6  130     // a6 = tmp130 : TYPEOF(tmp130);
 21:           assignment   12    6  130     // a5 = tmp130 : TYPEOF(tmp130);
 22:           assignment   13    6  130     // a4 = tmp130 : TYPEOF(tmp130);
 23:           assignment   14    6  130     // a3 = tmp130 : TYPEOF(tmp130);
 24:           assignment   15    6  130     // a2 = tmp130 : TYPEOF(tmp130);
 25:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 26:          unary_minus  131  130          // tmp131 = -tmp130;
 27:           assignment    4    6  131     // e = tmp131 : TYPEOF(tmp131);
 28:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 29:           assignment   16    6  132     // ck = tmp132 : TYPEOF(tmp132);
 30:           assignment   17    6  132     // sk = tmp132 : TYPEOF(tmp132);
 31:           assignment   18    6  132     // k3 = tmp132 : TYPEOF(tmp132);
 32:           assignment    5    6  132     // f = tmp132 : TYPEOF(tmp132);
 33:           assignment  133    1    1     // tmp133 = 1: SMALLINT;
 34:           assignment    6    6  133     // g = tmp133 : TYPEOF(tmp133);
 35:             jmp_down    0   78          // goto 113;
 36:           assignment  130    6    6     // tmp130 = g : TYPEOF(g);
 37:       multiplication  131  130    6     // tmp131 = tmp130 * g;
 38:           assignment    5    6  131     // f = tmp131 : TYPEOF(tmp131);
 39:           assignment  132    6    5     // tmp132 = f : TYPEOF(f);
 40:       multiplication  133  132    6     // tmp133 = tmp132 * g;
 41:           assignment   18    6  133     // k3 = tmp133 : TYPEOF(tmp133);
 42:           assignment  134    5   19     // tmp134 = 'sin': STRING;
 43:          prop_getter  135   20  134     // tmp135 = Math[tmp134];
 44:           assignment  136    6   20     // tmp136 = Math : TYPEOF(Math);
 45:               call_n  137  135    1     // 
 46:                 meta    1    1  136     // 
 47:                 meta    2    6  255     // tmp137 = tmp135 (this_arg = tmp136, g);
 48:           assignment   17    6  137     // sk = tmp137 : TYPEOF(tmp137);
 49:           assignment  138    5   21     // tmp138 = 'cos': STRING;
 50:          prop_getter  139   20  138     // tmp139 = Math[tmp138];
 51:           assignment  140    6   20     // tmp140 = Math : TYPEOF(Math);
 52:               call_n  141  139    1     // 
 53:                 meta    1    1  140     // 
 54:                 meta    2    6  255     // tmp141 = tmp139 (this_arg = tmp140, g);
 55:           assignment   16    6  141     // ck = tmp141 : TYPEOF(tmp141);
 56:          unary_minus  142    4          // tmp142 = -e;
 57:           assignment    4    6  142     // e = tmp142 : TYPEOF(tmp142);
 58:           assignment  143    5   22     // tmp143 = 'pow': STRING;
 59:          prop_getter  144   20  143     // tmp144 = Math[tmp143];
 60:           assignment  145    6   20     // tmp145 = Math : TYPEOF(Math);
 61:               call_n  146  144    2     // 
 62:                 meta    1    1  145     // 
 63:                 meta    2    6  255     // 
 64:           assignment  146    3    0     // tmp146 = 0.5: NUMBER;
 65:          unary_minus  147  146          // tmp147 = -tmp146;
 66:                 meta    2  147  255     // tmp146 = tmp144 (this_arg = tmp145, g, tmp147);
 67:             addition    1    1  146     // a2 = a2 + tmp146;
 68:           assignment  147    6    1     // tmp147 = a2 : TYPEOF(a2);
 69:           assignment  148    1    1     // tmp148 = 1: SMALLINT;
 70:           assignment  149    6    2     // tmp149 = g : TYPEOF(g);
 71:           assignment  150    6    2     // tmp150 = g : TYPEOF(g);
 72:           assignment  151    1    1     // tmp151 = 1: SMALLINT;
 73:             addition  152  150  151     // tmp152 = tmp150 + tmp151;
 74:       multiplication  153  149  152     // tmp153 = tmp149 * tmp152;
 75:             division  154  148  153     // tmp154 = tmp148 / tmp153;
 76:             addition    3    3  154     // a3 = a3 + tmp154;
 77:           assignment  155    6    3     // tmp155 = a3 : TYPEOF(a3);
 78:           assignment  156    1    1     // tmp156 = 1: SMALLINT;
 79:           assignment  157    6    4     // tmp157 = k3 : TYPEOF(k3);
 80:       multiplication  158  157    5     // tmp158 = tmp157 * sk;
 81:       multiplication  159  158    5     // tmp159 = tmp158 * sk;
 82:             division  160  156  159     // tmp160 = tmp156 / tmp159;
 83:             addition    6    6  160     // a4 = a4 + tmp160;
 84:           assignment  161    6    6     // tmp161 = a4 : TYPEOF(a4);
 85:           assignment  162    1    1     // tmp162 = 1: SMALLINT;
 86:           assignment  163    6    4     // tmp163 = k3 : TYPEOF(k3);
 87:       multiplication  164  163    7     // tmp164 = tmp163 * ck;
 88:       multiplication  165  164    7     // tmp165 = tmp164 * ck;
 89:             division  166  162  165     // tmp166 = tmp162 / tmp165;
 90:             addition    8    8  166     // a5 = a5 + tmp166;
 91:           assignment  167    6    8     // tmp167 = a5 : TYPEOF(a5);
 92:           assignment  168    1    1     // tmp168 = 1: SMALLINT;
 93:             division  169  168    2     // tmp169 = tmp168 / g;
 94:             addition    9    9  169     // a6 = a6 + tmp169;
 95:           assignment  170    6    9     // tmp170 = a6 : TYPEOF(a6);
 96:           assignment  171    1    1     // tmp171 = 1: SMALLINT;
 97:             division  172  171   10     // tmp172 = tmp171 / f;
 98:             addition   11   11  172     // a7 = a7 + tmp172;
 99:           assignment  173    6   11     // tmp173 = a7 : TYPEOF(a7);
100:           assignment  174    6   12     // tmp174 = e : TYPEOF(e);
101:             division  175  174    2     // tmp175 = tmp174 / g;
102:             addition   13   13  175     // a8 = a8 + tmp175;
103:           assignment  176    6   13     // tmp176 = a8 : TYPEOF(a8);
104:           assignment  177    6   12     // tmp177 = e : TYPEOF(e);
105:           assignment  178    1    2     // tmp178 = 2: SMALLINT;
106:       multiplication  179  178    2     // tmp179 = tmp178 * g;
107:           assignment  180    1    1     // tmp180 = 1: SMALLINT;
108:         substraction  181  179  180     // tmp181 = tmp179 - tmp180;
109:             division  182  177  181     // tmp182 = tmp177 / tmp181;
110:             addition   14   14  182     // a9 = a9 + tmp182;
111:           assignment  183    6   14     // tmp183 = a9 : TYPEOF(a9);
112:            post_incr  184    2          // tmp184 = g++;
113:           assignment  185    6    2     // tmp185 = g : TYPEOF(g);
114:   less_or_equal_than  186  185   15     // tmp186 = tmp185 <= d;
115:       is_true_jmp_up  186    0   79     // if (tmp186) goto 36;
116:           assignment  130    6   16     // tmp130 = c : TYPEOF(c);
117:           assignment  131    6    9     // tmp131 = a6 : TYPEOF(a6);
118:             addition  132  131   11     // tmp132 = tmp131 + a7;
119:             addition  133  132   13     // tmp133 = tmp132 + a8;
120:             addition  134  133   14     // tmp134 = tmp133 + a9;
121:             addition  135  130  134     // tmp135 = tmp130 + tmp134;
122:           assignment   17    6  135     // a = tmp135 : TYPEOF(tmp135);
123:           assignment  136    1    2     // tmp136 = 2: SMALLINT;
124:       multiplication   18   18  136     // b = b * tmp136;
125:           assignment  137    3   19     // tmp137 = 16384: NUMBER;
126: greater_or_equal_than  138  137   18     // tmp138 = tmp137 >= b;
127:       is_true_jmp_up  138    0  113     // if (tmp138) goto 14;
128:           assignment  130    3    0     // tmp130 = 60.08994194659945: NUMBER;
129:      not_equal_value  131  130    1     // tmp131 = tmp130 != a;
130:    is_false_jmp_down  131    0    4     // if (tmp131 == false) goto 134;
131:           assignment  130    5    2     // tmp130 = 'ERROR: bad result: expected 60.08994194659945 but got ': STRING;
132:             addition  131  130    1     // tmp131 = tmp130 + a;
133:          throw_value  131               // throw tmp131;
134:                  ret                    // ret;
