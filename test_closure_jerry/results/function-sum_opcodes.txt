// function f(x, y, z)
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
// {
//     return x + y + z;
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:           assignment  130    6  254     // tmp130 = x : TYPEOF(x);
  8:             addition  131  130  254     // tmp131 = tmp130 + y;
  9:             addition  132  131  254     // tmp132 = tmp131 + z;
 10:               retval  132               // return tmp132;
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  132    0     // var tmp128 .. tmp132; // REWRITE
 11:                  ret                    // ret;
  4:                 meta    7    0    8     // function end: 12; // REWRITE
// for (var i = 0; i < 2500000; ++i)
//     f(1, 2, 3);
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  4:             jmp_down  253  253          // goto 65025;
  5:               call_n  253  254  253     // 
  6:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
  7:                 meta    2  130  255     // 
  8:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
  9:                 meta    2  130  255     // 
 10:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 11:                 meta    2  130  255     // 
  5:               call_n  130  254    3     //  // REWRITE
 12:             pre_incr  131  254          // tmp131 = ++i;
  4:             jmp_down    0    9          // goto 13; // REWRITE
 13:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 14:           assignment  133    3  254     // tmp133 = 2500000: NUMBER;
 15:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 16:       is_true_jmp_up  134    0   11     // if (tmp134) goto 5;
// 
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134; // REWRITE
 17:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] f : STRING
0x8a54cc [  8] x : STRING
0x8a54d4 [  8] y : STRING
0x8a54dc [  8] z : STRING
0x8a54e4 [  4] i : MAGIC STRING [id=207] 
0x8a54e8 [ 12] 2500000 : NUMBER
0x8a54f4 [ 12]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  134    0     // var tmp128 .. tmp134;
  2:             var_decl    0               // var i;
  3:          func_decl_n    1    3          // 
  4:                 meta    2    2  255     // 
  5:                 meta    2    3  255     // 
  6:                 meta    2    4  255     // function f (x, y, z);
  7:                 meta    7    0    8     // function end: 15;
  8:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  9:         reg_var_decl  128  132    0     // var tmp128 .. tmp132;
 10:           assignment  130    6    2     // tmp130 = x : TYPEOF(x);
 11:             addition  131  130    3     // tmp131 = tmp130 + y;
 12:             addition  132  131    4     // tmp132 = tmp131 + z;
 13:               retval  132               // return tmp132;
 14:                  ret                    // ret;
 15:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 16:           assignment    0    6  130     // i = tmp130 : TYPEOF(tmp130);
 17:             jmp_down    0    9          // goto 26;
 18:               call_n  130    1    3     // 
 19:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 20:                 meta    2  130  255     // 
 21:           assignment  130    1    2     // tmp130 = 2: SMALLINT;
 22:                 meta    2  130  255     // 
 23:           assignment  130    1    3     // tmp130 = 3: SMALLINT;
 24:                 meta    2  130  255     // tmp130 = f (tmp130, tmp130, tmp130);
 25:             pre_incr  131    0          // tmp131 = ++i;
 26:           assignment  132    6    0     // tmp132 = i : TYPEOF(i);
 27:           assignment  133    3    5     // tmp133 = 2500000: NUMBER;
 28:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 29:       is_true_jmp_up  134    0   11     // if (tmp134) goto 18;
 30:                  ret                    // ret;
