// // The Great Computer Language Shootout
// 
// // http://shootout.alioth.debian.org/
// 
// //
// 
// // contributed by Ian Osgood
// 
// function A(i,j) {
  0:                 meta   12  253  255     // [to be rewritten]
  1:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   return 1/((i+j)*(i+j+1)/2+i+1);
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
  7:           assignment  131    6  254     // tmp131 = i : TYPEOF(i);
  8:             addition  132  131  254     // tmp132 = tmp131 + j;
  9:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 10:             addition  134  133  254     // tmp134 = tmp133 + j;
 11:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 12:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 13:       multiplication  137  132  136     // tmp137 = tmp132 * tmp136;
 14:           assignment  138    1    2     // tmp138 = 2: SMALLINT;
 15:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 16:             addition  140  139  254     // tmp140 = tmp139 + i;
 17:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 18:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 19:             division  143  130  142     // tmp143 = tmp130 / tmp142;
 20:               retval  143               // return tmp143;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  143    0     // var tmp128 .. tmp143; // REWRITE
 21:                  ret                    // ret;
  3:                 meta    7    0   19     // function end: 22; // REWRITE
// function Au(u,v) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   for (var i=0; i<u.length; ++i) {
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  253  253          // goto 65029;
//     var t = 0;
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment  254    6  130     // t = tmp130 : TYPEOF(tmp130);
//     for (var j=0; j<u.length; ++j)
//       t += A(i,j) * u[j];
 11:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 12:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
 13:             jmp_down  253  253          // goto 65034;
 14:               call_n  253  254  253     // 
 15:                 meta    2  254  255     // 
 16:                 meta    2  254  255     // 
 14:               call_n  130  254    2     //  // REWRITE
 17:          prop_getter  131  254  254     // tmp131 = u[j];
 18:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 19:             addition  254  254  132     // t = t + tmp132;
 20:           assignment  133    6  254     // tmp133 = t : TYPEOF(t);
 21:             pre_incr  134  254          // tmp134 = ++j;
 13:             jmp_down    0    9          // goto 22; // REWRITE
 22:           assignment  135    6  254     // tmp135 = j : TYPEOF(j);
 23:           assignment  136    5  254     // tmp136 = 'length': STRING;
 24:          prop_getter  137  254  136     // tmp137 = u[tmp136];
 25:            less_than  138  135  137     // tmp138 = tmp135 < tmp137;
 26:       is_true_jmp_up  138    0   12     // if (tmp138) goto 14;
//     v[i] = t;
 27:          prop_getter  130  254  254     // tmp130 = v[i];
 27:          prop_setter  254  254  254     // v[i] = t;
 28:           assignment  131    6  254     // tmp131 = t : TYPEOF(t);
//   }
 29:             pre_incr  132  254          // tmp132 = ++i;
  8:             jmp_down    0   22          // goto 30; // REWRITE
 30:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 31:           assignment  134    5  254     // tmp134 = 'length': STRING;
 32:          prop_getter  135  254  134     // tmp135 = u[tmp134];
 33:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 34:       is_true_jmp_up  136    0   25     // if (tmp136) goto 9;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  141    3     // var tmp128 .. tmp141; // REWRITE
 35:                  ret                    // ret;
  3:                 meta    7    0   33     // function end: 36; // REWRITE
// function Atu(u,v) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  0:          func_decl_n  254    2          //  // REWRITE
  3:                 meta    7  253  253     // function end: 65024;
//   for (var i=0; i<u.length; ++i) {
  4:                 meta   12  253  255     // [to be rewritten]
  5:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  6:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  7:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  253  253          // goto 65029;
//     var t = 0;
  9:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 10:           assignment  254    6  130     // t = tmp130 : TYPEOF(tmp130);
//     for (var j=0; j<u.length; ++j)
//       t += A(j,i) * u[j];
 11:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 12:           assignment  254    6  130     // j = tmp130 : TYPEOF(tmp130);
 13:             jmp_down  253  253          // goto 65034;
 14:               call_n  253  254  253     // 
 15:                 meta    2  254  255     // 
 16:                 meta    2  254  255     // 
 14:               call_n  130  254    2     //  // REWRITE
 17:          prop_getter  131  254  254     // tmp131 = u[j];
 18:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 19:             addition  254  254  132     // t = t + tmp132;
 20:           assignment  133    6  254     // tmp133 = t : TYPEOF(t);
 21:             pre_incr  134  254          // tmp134 = ++j;
 13:             jmp_down    0    9          // goto 22; // REWRITE
 22:           assignment  135    6  254     // tmp135 = j : TYPEOF(j);
 23:           assignment  136    5  254     // tmp136 = 'length': STRING;
 24:          prop_getter  137  254  136     // tmp137 = u[tmp136];
 25:            less_than  138  135  137     // tmp138 = tmp135 < tmp137;
 26:       is_true_jmp_up  138    0   12     // if (tmp138) goto 14;
//     v[i] = t;
 27:          prop_getter  130  254  254     // tmp130 = v[i];
 27:          prop_setter  254  254  254     // v[i] = t;
 28:           assignment  131    6  254     // tmp131 = t : TYPEOF(t);
//   }
 29:             pre_incr  132  254          // tmp132 = ++i;
  8:             jmp_down    0   22          // goto 30; // REWRITE
 30:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 31:           assignment  134    5  254     // tmp134 = 'length': STRING;
 32:          prop_getter  135  254  134     // tmp135 = u[tmp134];
 33:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 34:       is_true_jmp_up  136    0   25     // if (tmp136) goto 9;
// }
  4:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128  141    3     // var tmp128 .. tmp141; // REWRITE
 35:                  ret                    // ret;
  3:                 meta    7    0   33     // function end: 36; // REWRITE
// function AtAu(u,v,w) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  2:                 meta    2  254  255     // 
  3:                 meta    2  254  255     // 
  0:          func_decl_n  254    3          //  // REWRITE
  4:                 meta    7  253  253     // function end: 65025;
//   Au(u,w);
  5:                 meta   12  253  255     // [to be rewritten]
  6:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  7:               call_n  253  254  253     // 
  8:                 meta    2  254  255     // 
  9:                 meta    2  254  255     // 
  7:               call_n  130  254    2     //  // REWRITE
//   Atu(w,v);
 10:               call_n  253  254  253     // 
 11:                 meta    2  254  255     // 
 12:                 meta    2  254  255     // 
 10:               call_n  130  254    2     //  // REWRITE
// }
  5:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  6:         reg_var_decl  128  130    0     // var tmp128 .. tmp130; // REWRITE
 13:                  ret                    // ret;
  4:                 meta    7    0   10     // function end: 14; // REWRITE
// function spectralnorm(n) {
  0:          func_decl_n  254  253          // 
  1:                 meta    2  254  255     // 
  0:          func_decl_n  254    1          //  // REWRITE
  2:                 meta    7  253  253     // function end: 65023;
//   var i, u=[], v=[], w=[], vv=0, vBv=0;
  3:                 meta   12  253  255     // [to be rewritten]
  4:         reg_var_decl  128  253  253     // var tmp128 .. tmp253;
  5:           array_decl  253  253  255     // 
  5:           array_decl  130    0    0     // tmp130 = []; // REWRITE
  6:           assignment  254    6  130     // u = tmp130 : TYPEOF(tmp130);
  7:           array_decl  253  253  255     // 
  7:           array_decl  131    0    0     // tmp131 = []; // REWRITE
  8:           assignment  254    6  131     // v = tmp131 : TYPEOF(tmp131);
  9:           array_decl  253  253  255     // 
  9:           array_decl  132    0    0     // tmp132 = []; // REWRITE
 10:           assignment  254    6  132     // w = tmp132 : TYPEOF(tmp132);
 11:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
 12:           assignment  254    6  133     // vv = tmp133 : TYPEOF(tmp133);
 13:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
 14:           assignment  254    6  134     // vBv = tmp134 : TYPEOF(tmp134);
//   for (i=0; i<n; ++i) {
 15:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 16:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 17:             jmp_down  253  253          // goto 65038;
//     u[i] = 1; v[i] = w[i] = 0;
 18:          prop_getter  130  254  254     // tmp130 = u[i];
 18:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
 19:          prop_setter  254  254  131     // u[i] = tmp131;
 20:          prop_getter  130  254  254     // tmp130 = v[i];
 20:          prop_getter  131  254  254     // tmp131 = w[i];
 20:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
 21:          prop_setter  254  254  132     // w[i] = tmp132;
 22:          prop_setter  254  254  132     // v[i] = tmp132;
//   }
 23:             pre_incr  133  254          // tmp133 = ++i;
 17:             jmp_down    0    7          // goto 24; // REWRITE
 24:           assignment  134    6  254     // tmp134 = i : TYPEOF(i);
 25:            less_than  135  134  254     // tmp135 = tmp134 < n;
 26:       is_true_jmp_up  135    0    8     // if (tmp135) goto 18;
//   for (i=0; i<10; ++i) {
 27:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 28:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 29:             jmp_down  253  253          // goto 65050;
//     AtAu(u,v,w);
 30:               call_n  253  254  253     // 
 31:                 meta    2  254  255     // 
 32:                 meta    2  254  255     // 
 33:                 meta    2  254  255     // 
 30:               call_n  130  254    3     //  // REWRITE
//     AtAu(v,u,w);
 34:               call_n  253  254  253     // 
 35:                 meta    2  254  255     // 
 36:                 meta    2  254  255     // 
 37:                 meta    2  254  255     // 
 34:               call_n  130  254    3     //  // REWRITE
//   }
 38:             pre_incr  131  254          // tmp131 = ++i;
 29:             jmp_down    0   10          // goto 39; // REWRITE
 39:           assignment  132    6  254     // tmp132 = i : TYPEOF(i);
 40:           assignment  133    1   10     // tmp133 = 10: SMALLINT;
 41:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
 42:       is_true_jmp_up  134    0   12     // if (tmp134) goto 30;
//   for (i=0; i<n; ++i) {
 43:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 44:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
 45:             jmp_down  253  253          // goto 65066;
//     vBv += u[i]*v[i];
 46:          prop_getter  130  254  254     // tmp130 = u[i];
 47:          prop_getter  131  254  254     // tmp131 = v[i];
 48:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 49:             addition  254  254  132     // vBv = vBv + tmp132;
 50:           assignment  133    6  254     // tmp133 = vBv : TYPEOF(vBv);
//     vv  += v[i]*v[i];
 51:          prop_getter  130  254  254     // tmp130 = v[i];
 52:          prop_getter  131  254  254     // tmp131 = v[i];
 53:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 54:             addition  254  254  132     // vv = vv + tmp132;
 55:           assignment  133    6  254     // tmp133 = vv : TYPEOF(vv);
//   }
 56:             pre_incr  134  254          // tmp134 = ++i;
 45:             jmp_down    0   12          // goto 57; // REWRITE
 57:           assignment  135    6  254     // tmp135 = i : TYPEOF(i);
 58:            less_than  136  135  254     // tmp136 = tmp135 < n;
 59:       is_true_jmp_up  136    0   13     // if (tmp136) goto 46;
//   return Math.sqrt(vBv/vv);
 60:           assignment  130    5  254     // tmp130 = 'sqrt': STRING;
 61:          prop_getter  131  254  130     // tmp131 = Math[tmp130];
 62:           assignment  132    6  254     // tmp132 = Math : TYPEOF(Math);
 63:               call_n  253  131  253     // 
 64:                 meta    1    1  132     // 
 65:           assignment  133    6  254     // tmp133 = vBv : TYPEOF(vBv);
 66:             division  134  133  254     // tmp134 = tmp133 / vv;
 67:                 meta    2  134  255     // 
 63:               call_n  133  131    1     //  // REWRITE
 68:               retval  133               // return tmp133;
// }
  3:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128  142    6     // var tmp128 .. tmp142; // REWRITE
 69:                  ret                    // ret;
  2:                 meta    7    0   68     // function end: 70; // REWRITE
// var total = 0;
  2:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
  3:           assignment  254    6  130     // total = tmp130 : TYPEOF(tmp130);
// for (var i = 6; i <= 48; i *= 2) {
  4:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
  5:           assignment  254    6  130     // i = tmp130 : TYPEOF(tmp130);
  6:             jmp_down  253  253          // goto 65027;
//     total += spectralnorm(i);
  7:               call_n  253  254  253     // 
  8:                 meta    2  254  255     // 
  7:               call_n  130  254    1     //  // REWRITE
  9:             addition  254  254  130     // total = total + tmp130;
 10:           assignment  131    6  254     // tmp131 = total : TYPEOF(total);
// }
 11:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
 12:       multiplication  254  254  132     // i = i * tmp132;
  6:             jmp_down    0    7          // goto 13; // REWRITE
 13:           assignment  133    6  254     // tmp133 = i : TYPEOF(i);
 14:           assignment  134    1   48     // tmp134 = 48: SMALLINT;
 15:   less_or_equal_than  135  133  134     // tmp135 = tmp133 <= tmp134;
 16:       is_true_jmp_up  135    0    9     // if (tmp135) goto 7;
// var expected = 5.086694231303284;
 17:           assignment  130    3  254     // tmp130 = 5.086694231303284: NUMBER;
 18:           assignment  254    6  130     // expected = tmp130 : TYPEOF(tmp130);
// if (total != expected)
 19:           assignment  130    6  254     // tmp130 = total : TYPEOF(total);
 20:      not_equal_value  131  130  254     // tmp131 = tmp130 != expected;
 21:    is_false_jmp_down  131  253  253     // if (tmp131 == false) goto 65042;
//     throw "ERROR: bad result: expected " + expected + " but got " + total;
 22:           assignment  130    5  254     // tmp130 = 'ERROR: bad result: expected ': STRING;
 23:             addition  131  130  254     // tmp131 = tmp130 + expected;
 24:           assignment  132    5  254     // tmp132 = ' but got ': STRING;
 25:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
 26:             addition  134  133  254     // tmp134 = tmp133 + total;
 27:          throw_value  134               // throw tmp134;
// 
 21:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 28; // REWRITE
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135; // REWRITE
 28:                  ret                    // ret;
LITERALS:
0x8a54c4 [  8] A : STRING
0x8a54cc [  4] i : MAGIC STRING [id=207] 
0x8a54d0 [  8] j : STRING
0x8a54d8 [  8] Au : STRING
0x8a54e0 [  8] u : STRING
0x8a54e8 [  8] v : STRING
0x8a54f0 [  4] length : MAGIC STRING [id=15] 
0x8a54f4 [  8] t : STRING
0x8a54fc [ 12] Atu : STRING
0x8a550c [ 12] AtAu : STRING
0x8a5518 [  8] w : STRING
0x8a5520 [ 20] spectralnorm : STRING
0x8a5534 [  8] n : STRING
0x8a553c [  8] vv : STRING
0x8a5548 [ 12] vBv : STRING
0x8a5554 [  4] Math : MAGIC STRING [id=44] 
0x8a5558 [  4] sqrt : MAGIC STRING [id=100] 
0x8a555c [ 12] total : STRING
0x8a5568 [ 16] expected : STRING
0x8a5578 [ 12] 5.086694231303284 : NUMBER
0x8a5588 [ 36] ERROR: bad result: expected  : STRING
0x8a55ac [ 16]  but got  : STRING
0x8a55bc [  4]  : EMPTY RECORD
  0:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128  135    0     // var tmp128 .. tmp135;
  2:             var_decl    0               // var total;
  3:             var_decl    1               // var i;
  4:             var_decl    2               // var expected;
  5:          func_decl_n    3    2          // 
  6:                 meta    2    1  255     // 
  7:                 meta    2    4  255     // function A (i, j);
  8:                 meta    7    0   19     // function end: 27;
  9:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 10:         reg_var_decl  128  143    0     // var tmp128 .. tmp143;
 11:           assignment  130    1    1     // tmp130 = 1: SMALLINT;
 12:           assignment  131    6    1     // tmp131 = i : TYPEOF(i);
 13:             addition  132  131    4     // tmp132 = tmp131 + j;
 14:           assignment  133    6    1     // tmp133 = i : TYPEOF(i);
 15:             addition  134  133    4     // tmp134 = tmp133 + j;
 16:           assignment  135    1    1     // tmp135 = 1: SMALLINT;
 17:             addition  136  134  135     // tmp136 = tmp134 + tmp135;
 18:       multiplication  137  132  136     // tmp137 = tmp132 * tmp136;
 19:           assignment  138    1    2     // tmp138 = 2: SMALLINT;
 20:             division  139  137  138     // tmp139 = tmp137 / tmp138;
 21:             addition  140  139    1     // tmp140 = tmp139 + i;
 22:           assignment  141    1    1     // tmp141 = 1: SMALLINT;
 23:             addition  142  140  141     // tmp142 = tmp140 + tmp141;
 24:             division  143  130  142     // tmp143 = tmp130 / tmp142;
 25:               retval  143               // return tmp143;
 26:                  ret                    // ret;
 27:          func_decl_n    5    2          // 
 28:                 meta    2    6  255     // 
 29:                 meta    2    7  255     // function Au (u, v);
 30:                 meta    7    0   33     // function end: 63;
 31:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 32:         reg_var_decl  128  141    3     // var tmp128 .. tmp141;
 33:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 34:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
 35:             jmp_down    0   22          // goto 57;
 36:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 37:           assignment  140    6  130     // tmp140 = tmp130 : TYPEOF(tmp130);
 38:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 39:           assignment  141    6  130     // tmp141 = tmp130 : TYPEOF(tmp130);
 40:             jmp_down    0    9          // goto 49;
 41:               call_n  130    3    2     // 
 42:                 meta    2  139  255     // 
 43:                 meta    2  141  255     // tmp130 = A (tmp139, tmp141);
 44:          prop_getter  131    6  141     // tmp131 = u[tmp141];
 45:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 46:             addition  140  140  132     // tmp140 = tmp140 + tmp132;
 47:           assignment  133    6  140     // tmp133 = tmp140 : TYPEOF(tmp140);
 48:             pre_incr  134  141          // tmp134 = ++tmp141;
 49:           assignment  135    6  141     // tmp135 = tmp141 : TYPEOF(tmp141);
 50:           assignment  136    5    8     // tmp136 = 'length': STRING;
 51:          prop_getter  137    6  136     // tmp137 = u[tmp136];
 52:            less_than  138  135  137     // tmp138 = tmp135 < tmp137;
 53:       is_true_jmp_up  138    0   12     // if (tmp138) goto 41;
 54:          prop_setter    7  139  140     // v[tmp139] = tmp140;
 55:           assignment  131    6  140     // tmp131 = tmp140 : TYPEOF(tmp140);
 56:             pre_incr  132  139          // tmp132 = ++tmp139;
 57:           assignment  133    6  139     // tmp133 = tmp139 : TYPEOF(tmp139);
 58:           assignment  134    5    8     // tmp134 = 'length': STRING;
 59:          prop_getter  135    6  134     // tmp135 = u[tmp134];
 60:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 61:       is_true_jmp_up  136    0   25     // if (tmp136) goto 36;
 62:                  ret                    // ret;
 63:          func_decl_n    9    2          // 
 64:                 meta    2    0  255     // 
 65:                 meta    2    1  255     // function Atu (u, v);
 66:                 meta    7    0   33     // function end: 99;
 67:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
 68:         reg_var_decl  128  141    3     // var tmp128 .. tmp141;
 69:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 70:           assignment  139    6  130     // tmp139 = tmp130 : TYPEOF(tmp130);
 71:             jmp_down    0   22          // goto 93;
 72:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 73:           assignment  140    6  130     // tmp140 = tmp130 : TYPEOF(tmp130);
 74:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
 75:           assignment  141    6  130     // tmp141 = tmp130 : TYPEOF(tmp130);
 76:             jmp_down    0    9          // goto 85;
 77:               call_n  130    2    2     // 
 78:                 meta    2  141  255     // 
 79:                 meta    2  139  255     // tmp130 = A (tmp141, tmp139);
 80:          prop_getter  131    0  141     // tmp131 = u[tmp141];
 81:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
 82:             addition  140  140  132     // tmp140 = tmp140 + tmp132;
 83:           assignment  133    6  140     // tmp133 = tmp140 : TYPEOF(tmp140);
 84:             pre_incr  134  141          // tmp134 = ++tmp141;
 85:           assignment  135    6  141     // tmp135 = tmp141 : TYPEOF(tmp141);
 86:           assignment  136    5    3     // tmp136 = 'length': STRING;
 87:          prop_getter  137    0  136     // tmp137 = u[tmp136];
 88:            less_than  138  135  137     // tmp138 = tmp135 < tmp137;
 89:       is_true_jmp_up  138    0   12     // if (tmp138) goto 77;
 90:          prop_setter    1  139  140     // v[tmp139] = tmp140;
 91:           assignment  131    6  140     // tmp131 = tmp140 : TYPEOF(tmp140);
 92:             pre_incr  132  139          // tmp132 = ++tmp139;
 93:           assignment  133    6  139     // tmp133 = tmp139 : TYPEOF(tmp139);
 94:           assignment  134    5    3     // tmp134 = 'length': STRING;
 95:          prop_getter  135    0  134     // tmp135 = u[tmp134];
 96:            less_than  136  133  135     // tmp136 = tmp133 < tmp135;
 97:       is_true_jmp_up  136    0   25     // if (tmp136) goto 72;
 98:                  ret                    // ret;
 99:          func_decl_n    4    3          // 
100:                 meta    2    0  255     // 
101:                 meta    2    1  255     // 
102:                 meta    2    5  255     // function AtAu (u, v, w);
103:                 meta    7    0   10     // function end: 113;
104:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
105:         reg_var_decl  128  130    0     // var tmp128 .. tmp130;
106:               call_n  130    6    2     // 
107:                 meta    2    0  255     // 
108:                 meta    2    5  255     // tmp130 = Au (u, w);
109:               call_n  130    7    2     // 
110:                 meta    2    5  255     // 
111:                 meta    2    1  255     // tmp130 = Atu (w, v);
112:                  ret                    // ret;
113:          func_decl_n    8    1          // 
114:                 meta    2    9  255     // function spectralnorm (n);
115:                 meta    7    0   68     // function end: 183;
116:                 meta   12    6  255     // [no 'arguments'] [no 'eval'] 
117:         reg_var_decl  128  142    6     // var tmp128 .. tmp142;
118:           array_decl  130    0    0     // tmp130 = [];
119:           assignment  138    6  130     // tmp138 = tmp130 : TYPEOF(tmp130);
120:           array_decl  131    0    0     // tmp131 = [];
121:           assignment  139    6  131     // tmp139 = tmp131 : TYPEOF(tmp131);
122:           array_decl  132    0    0     // tmp132 = [];
123:           assignment  140    6  132     // tmp140 = tmp132 : TYPEOF(tmp132);
124:           assignment  133    1    0     // tmp133 = 0: SMALLINT;
125:           assignment  141    6  133     // tmp141 = tmp133 : TYPEOF(tmp133);
126:           assignment  134    1    0     // tmp134 = 0: SMALLINT;
127:           assignment  142    6  134     // tmp142 = tmp134 : TYPEOF(tmp134);
128:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
129:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
130:             jmp_down    0    7          // goto 137;
131:           assignment  131    1    1     // tmp131 = 1: SMALLINT;
132:          prop_setter  138  137  131     // tmp138[tmp137] = tmp131;
133:           assignment  132    1    0     // tmp132 = 0: SMALLINT;
134:          prop_setter  140  137  132     // tmp140[tmp137] = tmp132;
135:          prop_setter  139  137  132     // tmp139[tmp137] = tmp132;
136:             pre_incr  133  137          // tmp133 = ++tmp137;
137:           assignment  134    6  137     // tmp134 = tmp137 : TYPEOF(tmp137);
138:            less_than  135  134    0     // tmp135 = tmp134 < n;
139:       is_true_jmp_up  135    0    8     // if (tmp135) goto 131;
140:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
141:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
142:             jmp_down    0   10          // goto 152;
143:               call_n  130    1    3     // 
144:                 meta    2  138  255     // 
145:                 meta    2  139  255     // 
146:                 meta    2  140  255     // tmp130 = AtAu (tmp138, tmp139, tmp140);
147:               call_n  130    1    3     // 
148:                 meta    2  139  255     // 
149:                 meta    2  138  255     // 
150:                 meta    2  140  255     // tmp130 = AtAu (tmp139, tmp138, tmp140);
151:             pre_incr  131  137          // tmp131 = ++tmp137;
152:           assignment  132    6  137     // tmp132 = tmp137 : TYPEOF(tmp137);
153:           assignment  133    1   10     // tmp133 = 10: SMALLINT;
154:            less_than  134  132  133     // tmp134 = tmp132 < tmp133;
155:       is_true_jmp_up  134    0   12     // if (tmp134) goto 143;
156:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
157:           assignment  137    6  130     // tmp137 = tmp130 : TYPEOF(tmp130);
158:             jmp_down    0   12          // goto 170;
159:          prop_getter  130  138  137     // tmp130 = tmp138[tmp137];
160:          prop_getter  131  139  137     // tmp131 = tmp139[tmp137];
161:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
162:             addition  142  142  132     // tmp142 = tmp142 + tmp132;
163:           assignment  133    6  142     // tmp133 = tmp142 : TYPEOF(tmp142);
164:          prop_getter  130  139  137     // tmp130 = tmp139[tmp137];
165:          prop_getter  131  139  137     // tmp131 = tmp139[tmp137];
166:       multiplication  132  130  131     // tmp132 = tmp130 * tmp131;
167:             addition  141  141  132     // tmp141 = tmp141 + tmp132;
168:           assignment  133    6  141     // tmp133 = tmp141 : TYPEOF(tmp141);
169:             pre_incr  134  137          // tmp134 = ++tmp137;
170:           assignment  135    6  137     // tmp135 = tmp137 : TYPEOF(tmp137);
171:            less_than  136  135    0     // tmp136 = tmp135 < n;
172:       is_true_jmp_up  136    0   13     // if (tmp136) goto 159;
173:           assignment  130    5    2     // tmp130 = 'sqrt': STRING;
174:          prop_getter  131    3  130     // tmp131 = Math[tmp130];
175:           assignment  132    6    3     // tmp132 = Math : TYPEOF(Math);
176:               call_n  133  131    1     // 
177:                 meta    1    1  132     // 
178:           assignment  133    6  142     // tmp133 = tmp142 : TYPEOF(tmp142);
179:             division  134  133  141     // tmp134 = tmp133 / tmp141;
180:                 meta    2  134  255     // tmp133 = tmp131 (this_arg = tmp132, tmp134);
181:               retval  133               // return tmp133;
182:                  ret                    // ret;
183:           assignment  130    1    0     // tmp130 = 0: SMALLINT;
184:           assignment    4    6  130     // total = tmp130 : TYPEOF(tmp130);
185:           assignment  130    1    6     // tmp130 = 6: SMALLINT;
186:           assignment    5    6  130     // i = tmp130 : TYPEOF(tmp130);
187:             jmp_down    0    7          // goto 194;
188:               call_n  130    6    1     // 
189:                 meta    2    5  255     // tmp130 = spectralnorm (i);
190:             addition    4    4  130     // total = total + tmp130;
191:           assignment  131    6    4     // tmp131 = total : TYPEOF(total);
192:           assignment  132    1    2     // tmp132 = 2: SMALLINT;
193:       multiplication    0    0  132     // i = i * tmp132;
194:           assignment  133    6    0     // tmp133 = i : TYPEOF(i);
195:           assignment  134    1   48     // tmp134 = 48: SMALLINT;
196:   less_or_equal_than  135  133  134     // tmp135 = tmp133 <= tmp134;
197:       is_true_jmp_up  135    0    9     // if (tmp135) goto 188;
198:           assignment  130    3    1     // tmp130 = 5.086694231303284: NUMBER;
199:           assignment    2    6  130     // expected = tmp130 : TYPEOF(tmp130);
200:           assignment  130    6    3     // tmp130 = total : TYPEOF(total);
201:      not_equal_value  131  130    2     // tmp131 = tmp130 != expected;
202:    is_false_jmp_down  131    0    7     // if (tmp131 == false) goto 209;
203:           assignment  130    5    4     // tmp130 = 'ERROR: bad result: expected ': STRING;
204:             addition  131  130    2     // tmp131 = tmp130 + expected;
205:           assignment  132    5    5     // tmp132 = ' but got ': STRING;
206:             addition  133  131  132     // tmp133 = tmp131 + tmp132;
207:             addition  134  133    3     // tmp134 = tmp133 + total;
208:          throw_value  134               // throw tmp134;
209:                  ret                    // ret;
