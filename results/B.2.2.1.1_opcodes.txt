// // Copyright (C) 2015 the V8 project authors. All rights reserved.
// 
// // This code is governed by the BSD license found in the LICENSE file.
// 
// /*---
// 
// var descriptor = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');
  0:                 meta   12  255          // [to be rewritten]
// assert.sameValue(
//   descriptor.get.name, 'get __proto__',
//   'The value of `descriptor.get.name` is `"get __proto__"`'
// );
// verifyNotEnumerable(descriptor.get, 'name');
// verifyNotWritable(descriptor.get, 'name');
// verifyConfigurable(descriptor.get, 'name');
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
  2:             var_decl                    // var descriptor;
// assert.sameValue(
//   descriptor.get.name, 'get __proto__',
//   'The value of `descriptor.get.name` is `"get __proto__"`'
// );
// verifyNotEnumerable(descriptor.get, 'name');
// verifyNotWritable(descriptor.get, 'name');
// verifyConfigurable(descriptor.get, 'name');
// 
  3:           assignment  130    5          // tmp130 = 'getOwnPropertyDescriptor': STRING;
  4:          prop_getter  131  254          // tmp131 = Object[tmp130];
  5:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  6:               call_n  255  131          // 
  7:                 meta    1    1          // 
  8:           assignment  133    5          // tmp133 = 'prototype': STRING;
  9:          prop_getter  134  254          // tmp134 = Object[tmp133];
 10:                 meta    2  134          // 
 11:           assignment  133    5          // tmp133 = '__proto__': STRING;
 12:                 meta    2  133          // 
  6:               call_n  133  131          //  // REWRITE
 13:           assignment  254    6          // descriptor = tmp133 : TYPEOF(tmp133);
// assert.sameValue(
 14:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 15:          prop_getter  131  254          // tmp131 = assert[tmp130];
 16:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 17:               call_n  255  131          // 
 18:                 meta    1    1          // 
//   descriptor.get.name, 'get __proto__',
 19:           assignment  133    5          // tmp133 = 'get': STRING;
 20:          prop_getter  134  254          // tmp134 = descriptor[tmp133];
 21:           assignment  135    5          // tmp135 = 'name': STRING;
 22:          prop_getter  136  134          // tmp136 = tmp134[tmp135];
 23:                 meta    2  136          // 
 24:           assignment  133    5          // tmp133 = 'get __proto__': STRING;
 25:                 meta    2  133          // 
//   'The value of `descriptor.get.name` is `"get __proto__"`'
 26:           assignment  133    5          // tmp133 = 'The value of `descriptor.get.name` is `"get __proto__"`': STRING;
// );
 27:                 meta    2  133          // 
 17:               call_n  133  131          //  // REWRITE
// verifyNotEnumerable(descriptor.get, 'name');
 28:               call_n  255  254          // 
 29:           assignment  130    5          // tmp130 = 'get': STRING;
 30:          prop_getter  131  254          // tmp131 = descriptor[tmp130];
 31:                 meta    2  131          // 
 32:           assignment  130    5          // tmp130 = 'name': STRING;
 33:                 meta    2  130          // 
 28:               call_n  130  254          //  // REWRITE
// verifyNotWritable(descriptor.get, 'name');
 34:               call_n  255  254          // 
 35:           assignment  130    5          // tmp130 = 'get': STRING;
 36:          prop_getter  131  254          // tmp131 = descriptor[tmp130];
 37:                 meta    2  131          // 
 38:           assignment  130    5          // tmp130 = 'name': STRING;
 39:                 meta    2  130          // 
 34:               call_n  130  254          //  // REWRITE
// verifyConfigurable(descriptor.get, 'name');
 40:               call_n  255  254          // 
 41:           assignment  130    5          // tmp130 = 'get': STRING;
 42:          prop_getter  131  254          // tmp131 = descriptor[tmp130];
 43:                 meta    2  131          // 
 44:           assignment  130    5          // tmp130 = 'name': STRING;
 45:                 meta    2  130          // 
 40:               call_n  130  254          //  // REWRITE
// 
  1:         reg_var_decl  128               // var tmp128 .. tmp136; // REWRITE
 46:                  ret                    // ret;
LITERALS:
0x84ec54 [ 16] descriptor : STRING
0x84ec64 [  4] Object : MAGIC STRING [id=27] 
0x84ec68 [  4] getOwnPropertyDescriptor : MAGIC STRING [id=57] 
0x84ec6c [  4] prototype : MAGIC STRING [id=2] 
0x84ec70 [ 16] __proto__ : STRING
0x84ec94 [ 12] assert : STRING
0x84eca0 [ 16] sameValue : STRING
0x84ecb0 [  4] get : MAGIC STRING [id=73] 
0x84ecb4 [  4] name : MAGIC STRING [id=197] 
0x84ecb8 [ 20] get __proto__ : STRING
0x84ece0 [ 64] The value of `descriptor.get.name` is `"get __proto__"` : STRING
0x84ed34 [ 28] verifyNotEnumerable : STRING
0x84ed64 [ 24] verifyNotWritable : STRING
0x84ed7c [ 24] verifyConfigurable : STRING
0x84eda8 [ 24]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp136;
  2:             var_decl                    // var descriptor;
  3:           assignment  130    5          // tmp130 = 'getOwnPropertyDescriptor': STRING;
  4:          prop_getter  131    2          // tmp131 = Object[tmp130];
  5:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  6:               call_n  133  131          // 
  7:                 meta    1    1          // 
  8:           assignment  133    5          // tmp133 = 'prototype': STRING;
  9:          prop_getter  134    2          // tmp134 = Object[tmp133];
 10:                 meta    2  134          // 
 11:           assignment  133    5          // tmp133 = '__proto__': STRING;
 12:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp134, tmp133);
 13:           assignment    0    6          // descriptor = tmp133 : TYPEOF(tmp133);
 14:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 15:          prop_getter  131    6          // tmp131 = assert[tmp130];
 16:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 17:               call_n  133  131          // 
 18:                 meta    1    1          // 
 19:           assignment  133    5          // tmp133 = 'get': STRING;
 20:          prop_getter  134    0          // tmp134 = descriptor[tmp133];
 21:           assignment  135    5          // tmp135 = 'name': STRING;
 22:          prop_getter  136  134          // tmp136 = tmp134[tmp135];
 23:                 meta    2  136          // 
 24:           assignment  133    5          // tmp133 = 'get __proto__': STRING;
 25:                 meta    2  133          // 
 26:           assignment  133    5          // tmp133 = 'The value of `descriptor.get.name` is `"get __proto__"`': STRING;
 27:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp136, tmp133, tmp133);
 28:               call_n  130   11          // 
 29:           assignment  130    5          // tmp130 = 'get': STRING;
 30:          prop_getter  131    0          // tmp131 = descriptor[tmp130];
 31:                 meta    2  131          // 
 32:           assignment  130    5          // tmp130 = 'name': STRING;
 33:                 meta    2  130          // tmp130 = verifyNotEnumerable (tmp131, tmp130);
 34:               call_n  130   12          // 
 35:           assignment  130    5          // tmp130 = 'get': STRING;
 36:          prop_getter  131    0          // tmp131 = descriptor[tmp130];
 37:                 meta    2  131          // 
 38:           assignment  130    5          // tmp130 = 'name': STRING;
 39:                 meta    2  130          // tmp130 = verifyNotWritable (tmp131, tmp130);
 40:               call_n  130   13          // 
 41:           assignment  130    5          // tmp130 = 'get': STRING;
 42:          prop_getter  131    0          // tmp131 = descriptor[tmp130];
 43:                 meta    2  131          // 
 44:           assignment  130    5          // tmp130 = 'name': STRING;
 45:                 meta    2  130          // tmp130 = verifyConfigurable (tmp131, tmp130);
 46:                  ret                    // ret;
