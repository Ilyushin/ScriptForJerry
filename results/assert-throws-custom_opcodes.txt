// // Copyright (C) 2015 the V8 project authors. All rights reserved.
// 
// // This code is governed by the BSD license found in the LICENSE file.
// 
// /*---
// 
// function MyError() {}
  0:                 meta   12  255          // [to be rewritten]
// assert.throws(MyError, function() {
//   throw new MyError();
// });
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
// assert.throws(MyError, function() {
//   throw new MyError();
// });
// 
  0:          func_decl_n  254               // 
  0:          func_decl_n  254               // function MyError (); // REWRITE
  1:                 meta    7  255          // function end: 65536;
  2:                 meta   12  255          // [to be rewritten]
  2:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128               // var tmp128 .. tmp255;
  3:         reg_var_decl  128               // var tmp128 .. tmp130; // REWRITE
  4:                  ret                    // ret;
  1:                 meta    7    0          // function end: 5; // REWRITE
// assert.throws(MyError, function() {
  2:           assignment  130    5          // tmp130 = 'throws': STRING;
  3:          prop_getter  131  254          // tmp131 = assert[tmp130];
  4:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
  5:               call_n  255  131          // 
  6:                 meta    1    1          // 
  7:                 meta    2  254          // 
  8:          func_expr_n  255  255          // 
  8:          func_expr_n  133  255          // tmp133 = function (); // REWRITE
  9:                 meta    7  255          // function end: 65544;
//   throw new MyError();
 10:                 meta   12  255          // [to be rewritten]
// });
 10:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
 11:         reg_var_decl  128               // var tmp128 .. tmp255;
// });
 12:          construct_n  255  254          // 
 12:          construct_n  130  254          // tmp130 = new MyError; // REWRITE
 13:          throw_value                    // throw tmp130;
// });
 11:         reg_var_decl  128               // var tmp128 .. tmp130; // REWRITE
 14:                  ret                    // ret;
  9:                 meta    7    0          // function end: 15; // REWRITE
 15:                 meta    2  133          // 
  5:               call_n  133  131          //  // REWRITE
// 
  1:         reg_var_decl  128               // var tmp128 .. tmp133; // REWRITE
 16:                  ret                    // ret;
LITERALS:
0x84ec54 [ 16] MyError : STRING
0x84ec64 [ 12] assert : STRING
0x84ec70 [ 12] throws : STRING
0x84ec7c [  4]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp133;
  2:          func_decl_n    0               // function MyError ();
  3:                 meta    7    0          // function end: 7;
  4:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  5:         reg_var_decl  128               // var tmp128 .. tmp130;
  6:                  ret                    // ret;
  7:           assignment  130    5          // tmp130 = 'throws': STRING;
  8:          prop_getter  131    2          // tmp131 = assert[tmp130];
  9:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 10:               call_n  133  131          // 
 11:                 meta    1    1          // 
 12:                 meta    2    0          // 
 13:          func_expr_n  133  255          // tmp133 = function ();
 14:                 meta    7    0          // function end: 20;
 15:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
 16:         reg_var_decl  128               // var tmp128 .. tmp130;
 17:          construct_n  130    0          // tmp130 = new MyError;
 18:          throw_value                    // throw tmp130;
 19:                  ret                    // ret;
 20:                 meta    2  133          // tmp130 = new MyError (tmp133);
 21:                  ret                    // ret;
