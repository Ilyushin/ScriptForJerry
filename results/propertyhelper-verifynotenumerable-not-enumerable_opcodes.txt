// // Copyright (C) 2015 the V8 project authors. All rights reserved.
// 
// // This code is governed by the BSD license found in the LICENSE file.
// 
// /*---
// 
// var obj = {};
  0:                 meta   12  255          // [to be rewritten]
// Object.defineProperty(obj, 'a', {
//   enumerable: false
// });
// verifyNotEnumerable(obj, 'a');
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
  2:             var_decl                    // var obj;
// Object.defineProperty(obj, 'a', {
//   enumerable: false
// });
// verifyNotEnumerable(obj, 'a');
// 
  3:             obj_decl  255               // 
  3:             obj_decl  130               // tmp130 = {}; // REWRITE
  4:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
// Object.defineProperty(obj, 'a', {
  5:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  6:          prop_getter  131  254          // tmp131 = Object[tmp130];
  7:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  8:               call_n  255  131          // 
  9:                 meta    1    1          // 
 10:                 meta    2  254          // 
 11:           assignment  133    5          // tmp133 = 'a': STRING;
 12:                 meta    2  133          // 
 13:             obj_decl  255               // 
//   enumerable: false
 14:           assignment  133    0          // tmp133 = false: SIMPLE;
// });
 15:           assignment  134    5          // tmp134 = 'enumerable': STRING;
 16:                 meta    3  134          // 
 13:             obj_decl  133               //  // REWRITE
 17:                 meta    2  133          // tmp133 = {tmp134:tmp133, tmp133};
  8:               call_n  133  131          //  // REWRITE
// verifyNotEnumerable(obj, 'a');
 18:               call_n  255  254          // 
 19:                 meta    2  254          // 
 20:           assignment  130    5          // tmp130 = 'a': STRING;
 21:                 meta    2  130          // 
 18:               call_n  130  254          //  // REWRITE
// 
  1:         reg_var_decl  128               // var tmp128 .. tmp134; // REWRITE
 22:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] obj : STRING
0x84ec60 [  4] Object : MAGIC STRING [id=27] 
0x84ec64 [  4] defineProperty : MAGIC STRING [id=60] 
0x84ec68 [  8] a : STRING
0x84ec70 [  4] enumerable : MAGIC STRING [id=70] 
0x84ec74 [ 28] verifyNotEnumerable : STRING
0x84eca4 [ 28]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp134;
  2:             var_decl                    // var obj;
  3:             obj_decl  130               // tmp130 = {};
  4:           assignment    0    6          // obj = tmp130 : TYPEOF(tmp130);
  5:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  6:          prop_getter  131    2          // tmp131 = Object[tmp130];
  7:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  8:               call_n  133  131          // 
  9:                 meta    1    1          // 
 10:                 meta    2    0          // 
 11:           assignment  133    5          // tmp133 = 'a': STRING;
 12:                 meta    2  133          // 
 13:             obj_decl  133               // 
 14:           assignment  133    0          // tmp133 = false: SIMPLE;
 15:           assignment  134    5          // tmp134 = 'enumerable': STRING;
 16:                 meta    3  134          // tmp133 = {tmp134:tmp133};
 17:                 meta    2  133          // 
 18:               call_n  130    5          // 
 19:                 meta    2    0          // 
 20:           assignment  130    5          // tmp130 = 'a': STRING;
 21:                 meta    2  130          // tmp130 = verifyNotEnumerable (obj, tmp130);
 22:                  ret                    // ret;
