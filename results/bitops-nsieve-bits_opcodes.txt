// // The Great Computer Language Shootout
// 
// //  http://shootout.alioth.debian.org
// 
// //
// 
// //  Contributed by Ian Osgood
// 
// function pad(n,width) {
  0:                 meta   12  255          // [to be rewritten]
//   var s = n.toString();
//   while (s.length < width) s = ' ' + s;
//   return s;
// }
// function primes(isPrime, n) {
//   var i, count = 0, m = 10000<<n, size = m+31>>5;
//   for (i=0; i<size; i++) isPrime[i] = 0xffffffff;
//   for (i=2; i<m; i++)
//     if (isPrime[i>>5] & 1<<(i&31)) {
//       for (var j=i+i; j<m; j+=i)
//         isPrime[j>>5] &= ~(1<<(j&31));
//       count++;
//     }
// }
// function sieve() {
//     for (var i = 4; i <= 4; i++) {
//         var isPrime = new Array((10000<<i)+31>>5);
//         primes(isPrime, i);
//     }
//     return isPrime;
// }
// var result = sieve();
// var sum = 0;
// for (var i = 0; i < result.length; ++i)
//     sum += result[i];
// var expected = -1286749544853;
// if (sum != expected)
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
//   var s = n.toString();
//   while (s.length < width) s = ' ' + s;
//   return s;
// }
// function primes(isPrime, n) {
//   var i, count = 0, m = 10000<<n, size = m+31>>5;
//   for (i=0; i<size; i++) isPrime[i] = 0xffffffff;
//   for (i=2; i<m; i++)
//     if (isPrime[i>>5] & 1<<(i&31)) {
//       for (var j=i+i; j<m; j+=i)
//         isPrime[j>>5] &= ~(1<<(j&31));
//       count++;
//     }
// }
// function sieve() {
//     for (var i = 4; i <= 4; i++) {
//         var isPrime = new Array((10000<<i)+31>>5);
//         primes(isPrime, i);
//     }
//     return isPrime;
// }
// var result = sieve();
  2:             var_decl                    // var result;
// var sum = 0;
  3:             var_decl                    // var sum;
// for (var i = 0; i < result.length; ++i)
  4:             var_decl                    // var i;
//     sum += result[i];
// var expected = -1286749544853;
  5:             var_decl                    // var expected;
// if (sum != expected)
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
// 
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  3:                 meta    7  255          // function end: 65538;
//   var s = n.toString();
  4:                 meta   12  255          // [to be rewritten]
//   while (s.length < width) s = ' ' + s;
//   return s;
// }
  4:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp255;
  6:             var_decl                    // var s;
//   while (s.length < width) s = ' ' + s;
//   return s;
// }
  7:           assignment  130    5          // tmp130 = 'toString': STRING;
  8:          prop_getter  131  254          // tmp131 = n[tmp130];
  9:           assignment  132    6          // tmp132 = n : TYPEOF(n);
 10:               call_n  255  131          // 
 11:                 meta    1    1          // 
 10:               call_n  133  131          //  // REWRITE
 12:           assignment  254    6          // s = tmp133 : TYPEOF(tmp133);
//   while (s.length < width) s = ' ' + s;
 13:             jmp_down  255               // goto 65548;
 14:           assignment  130    5          // tmp130 = ' ': STRING;
 15:             addition  131  130          // tmp131 = tmp130 + s;
 16:           assignment  254    6          // s = tmp131 : TYPEOF(tmp131);
 13:             jmp_down    0               // goto 17; // REWRITE
 17:           assignment  132    5          // tmp132 = 'length': STRING;
 18:          prop_getter  133  254          // tmp133 = s[tmp132];
 19:            less_than  134  133          // tmp134 = tmp133 < width;
 20:       is_true_jmp_up  134    0          // if (tmp134) goto 14;
//   return s;
 21:               retval                    // return s;
// }
  5:         reg_var_decl  128               // var tmp128 .. tmp134; // REWRITE
 22:                  ret                    // ret;
  3:                 meta    7    0          // function end: 23; // REWRITE
// function primes(isPrime, n) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  3:                 meta    7  255          // function end: 65538;
//   var i, count = 0, m = 10000<<n, size = m+31>>5;
  4:                 meta   12  255          // [to be rewritten]
//   for (i=0; i<size; i++) isPrime[i] = 0xffffffff;
//   for (i=2; i<m; i++)
//     if (isPrime[i>>5] & 1<<(i&31)) {
//       for (var j=i+i; j<m; j+=i)
//         isPrime[j>>5] &= ~(1<<(j&31));
//       count++;
//     }
// }
  4:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp255;
  6:             var_decl                    // var i;
  7:             var_decl                    // var count;
  8:             var_decl                    // var m;
  9:             var_decl                    // var size;
//   for (i=0; i<size; i++) isPrime[i] = 0xffffffff;
//   for (i=2; i<m; i++)
//     if (isPrime[i>>5] & 1<<(i&31)) {
//       for (var j=i+i; j<m; j+=i)
 10:             var_decl                    // var j;
//         isPrime[j>>5] &= ~(1<<(j&31));
//       count++;
//     }
// }
 11:           assignment  130    1          // tmp130 = 0: SMALLINT;
 12:           assignment  254    6          // count = tmp130 : TYPEOF(tmp130);
 13:           assignment  131    3          // tmp131 = 10000: NUMBER;
 14:         b_shift_left  132  131          // tmp132 = tmp131 << n;
 15:           assignment  254    6          // m = tmp132 : TYPEOF(tmp132);
 16:           assignment  133    6          // tmp133 = m : TYPEOF(m);
 17:           assignment  134    1          // tmp134 = 31: SMALLINT;
 18:             addition  135  133          // tmp135 = tmp133 + tmp134;
 19:           assignment  136    1          // tmp136 = 5: SMALLINT;
 20:        b_shift_right  137  135          // tmp137 = tmp135 >> tmp136;
 21:           assignment  254    6          // size = tmp137 : TYPEOF(tmp137);
//   for (i=0; i<size; i++) isPrime[i] = 0xffffffff;
 22:           assignment  130    1          // tmp130 = 0: SMALLINT;
 23:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 24:             jmp_down  255               // goto 65559;
 25:          prop_getter  130  254          // tmp130 = isPrime[i];
 25:           assignment  131    3          // tmp131 = 4294967295: NUMBER;
 26:          prop_setter  254  254          // isPrime[i] = tmp131;
 27:            post_incr  132               // tmp132 = i++;
 24:             jmp_down    0               // goto 28; // REWRITE
 28:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 29:            less_than  134  133          // tmp134 = tmp133 < size;
 30:       is_true_jmp_up  134    0          // if (tmp134) goto 25;
//   for (i=2; i<m; i++)
//     if (isPrime[i>>5] & 1<<(i&31)) {
 31:           assignment  130    1          // tmp130 = 2: SMALLINT;
 32:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 33:             jmp_down  255               // goto 65568;
 34:           assignment  130    6          // tmp130 = i : TYPEOF(i);
 35:           assignment  131    1          // tmp131 = 5: SMALLINT;
 36:        b_shift_right  132  130          // tmp132 = tmp130 >> tmp131;
 37:          prop_getter  133  254          // tmp133 = isPrime[tmp132];
 38:           assignment  134    1          // tmp134 = 1: SMALLINT;
 39:           assignment  135    6          // tmp135 = i : TYPEOF(i);
 40:           assignment  136    1          // tmp136 = 31: SMALLINT;
 41:                b_and  137  135          // tmp137 = tmp135 & tmp136;
 42:         b_shift_left  138  134          // tmp138 = tmp134 << tmp137;
 43:                b_and  139  133          // tmp139 = tmp133 & tmp138;
 44:    is_false_jmp_down  139  255          // if (tmp139 == false) goto 65579;
//       for (var j=i+i; j<m; j+=i)
//         isPrime[j>>5] &= ~(1<<(j&31));
 45:           assignment  130    6          // tmp130 = i : TYPEOF(i);
 46:             addition  131  130          // tmp131 = tmp130 + i;
 47:           assignment  254    6          // j = tmp131 : TYPEOF(tmp131);
 48:             jmp_down  255               // goto 65583;
 49:           assignment  130    6          // tmp130 = j : TYPEOF(j);
 50:           assignment  131    1          // tmp131 = 5: SMALLINT;
 51:        b_shift_right  132  130          // tmp132 = tmp130 >> tmp131;
 52:          prop_getter  133  254          // tmp133 = isPrime[tmp132];
 52:           assignment  134    1          // tmp134 = 1: SMALLINT;
 53:           assignment  135    6          // tmp135 = j : TYPEOF(j);
 54:           assignment  136    1          // tmp136 = 31: SMALLINT;
 55:                b_and  137  135          // tmp137 = tmp135 & tmp136;
 56:         b_shift_left  138  134          // tmp138 = tmp134 << tmp137;
 57:                b_not  139               // tmp139 = ~ tmp138;
 58:          prop_getter  140  254          // tmp140 = isPrime[tmp132];
 59:                b_and  140  140          // tmp140 = tmp140 & tmp139;
 60:          prop_setter  254  132          // isPrime[tmp132] = tmp140;
 61:             addition  254  254          // j = j + i;
 48:             jmp_down    0               // goto 62; // REWRITE
 62:           assignment  141    6          // tmp141 = j : TYPEOF(j);
 63:            less_than  142  141          // tmp142 = tmp141 < m;
 64:       is_true_jmp_up  142    0          // if (tmp142) goto 49;
//       count++;
 65:            post_incr  130               // tmp130 = count++;
//     }
// }
 44:    is_false_jmp_down  139    0          // if (tmp139 == false) goto 66; // REWRITE
 66:            post_incr  131               // tmp131 = i++;
 33:             jmp_down    0               // goto 67; // REWRITE
 67:           assignment  132    6          // tmp132 = i : TYPEOF(i);
 68:            less_than  133  132          // tmp133 = tmp132 < m;
 69:       is_true_jmp_up  133    0          // if (tmp133) goto 34;
// function sieve() {
  0:          func_decl_n  254               // 
  0:          func_decl_n  254               // function sieve (); // REWRITE
  1:                 meta    7  255          // function end: 65536;
//     for (var i = 4; i <= 4; i++) {
  2:                 meta   12  255          // [to be rewritten]
//         var isPrime = new Array((10000<<i)+31>>5);
//         primes(isPrime, i);
//     }
//     return isPrime;
// }
  2:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128               // var tmp128 .. tmp255;
  4:             var_decl                    // var i;
//         var isPrime = new Array((10000<<i)+31>>5);
  5:             var_decl                    // var isPrime;
//         primes(isPrime, i);
//     }
//     return isPrime;
// }
  6:           assignment  130    1          // tmp130 = 4: SMALLINT;
  7:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
  8:             jmp_down  255               // goto 65543;
//         var isPrime = new Array((10000<<i)+31>>5);
  9:          construct_n  255  254          // 
 10:           assignment  130    3          // tmp130 = 10000: NUMBER;
 11:         b_shift_left  131  130          // tmp131 = tmp130 << i;
 12:           assignment  132    1          // tmp132 = 31: SMALLINT;
 13:             addition  133  131          // tmp133 = tmp131 + tmp132;
 14:           assignment  134    1          // tmp134 = 5: SMALLINT;
 15:        b_shift_right  135  133          // tmp135 = tmp133 >> tmp134;
 16:                 meta    2  135          // 
  9:          construct_n  130  254          //  // REWRITE
 17:           assignment  254    6          // isPrime = tmp130 : TYPEOF(tmp130);
//         primes(isPrime, i);
 18:               call_n  255  254          // 
 19:                 meta    2  254          // 
 20:                 meta    2  254          // 
 18:               call_n  130  254          //  // REWRITE
//     }
 21:            post_incr  131               // tmp131 = i++;
  8:             jmp_down    0               // goto 22; // REWRITE
 22:           assignment  132    6          // tmp132 = i : TYPEOF(i);
 23:           assignment  133    1          // tmp133 = 4: SMALLINT;
 24:   less_or_equal_than  134  132          // tmp134 = tmp132 <= tmp133;
 25:       is_true_jmp_up  134    0          // if (tmp134) goto 9;
//     return isPrime;
 26:               retval                    // return isPrime;
// }
  3:         reg_var_decl  128               // var tmp128 .. tmp135; // REWRITE
 27:                  ret                    // ret;
  1:                 meta    7    0          // function end: 28; // REWRITE
// var result = sieve();
 70:               call_n  255  254          // 
 70:               call_n  130  254          //  // REWRITE
 71:           assignment  254    6          // result = tmp130 : TYPEOF(tmp130);
// var sum = 0;
 72:           assignment  130    1          // tmp130 = 0: SMALLINT;
 73:           assignment  254    6          // sum = tmp130 : TYPEOF(tmp130);
// for (var i = 0; i < result.length; ++i)
//     sum += result[i];
 74:           assignment  130    1          // tmp130 = 0: SMALLINT;
 75:           assignment  254    6          // i = tmp130 : TYPEOF(tmp130);
 76:             jmp_down  255               // goto 65611;
 77:          prop_getter  130  254          // tmp130 = result[i];
 78:             addition  254  254          // sum = sum + tmp130;
 79:           assignment  131    6          // tmp131 = sum : TYPEOF(sum);
 80:             pre_incr  132               // tmp132 = ++i;
 76:             jmp_down    0               // goto 81; // REWRITE
 81:           assignment  133    6          // tmp133 = i : TYPEOF(i);
 82:           assignment  134    5          // tmp134 = 'length': STRING;
 83:          prop_getter  135  254          // tmp135 = result[tmp134];
 84:            less_than  136  133          // tmp136 = tmp133 < tmp135;
 85:       is_true_jmp_up  136    0          // if (tmp136) goto 77;
// var expected = -1286749544853;
 86:           assignment  130    3          // tmp130 = 1286749544853: NUMBER;
 87:          unary_minus  131               // tmp131 = -tmp130;
 88:           assignment  254    6          // expected = tmp131 : TYPEOF(tmp131);
// if (sum != expected)
 89:           assignment  130    6          // tmp130 = sum : TYPEOF(sum);
 90:      not_equal_value  131  130          // tmp131 = tmp130 != expected;
 91:    is_false_jmp_down  131  255          // if (tmp131 == false) goto 65626;
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
 92:           assignment  130    5          // tmp130 = 'ERROR: bad result: expected ': STRING;
 93:             addition  131  130          // tmp131 = tmp130 + expected;
 94:           assignment  132    5          // tmp132 = ' but got ': STRING;
 95:             addition  133  131          // tmp133 = tmp131 + tmp132;
 96:             addition  134  133          // tmp134 = tmp133 + sum;
 97:          throw_value                    // throw tmp134;
// 
 91:    is_false_jmp_down  131    0          // if (tmp131 == false) goto 98; // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp142; // REWRITE

^
ERROR: Ln 43, Col 1: Expected '}' token
