// // Copyright (C) 2015 the V8 project authors. All rights reserved.
// 
// // This code is governed by the BSD license found in the LICENSE file.
// 
// /*---
// 
// var threw = false;
  0:                 meta   12  255          // [to be rewritten]
// var obj = {};
// Object.defineProperty(obj, 'a', {
//   writable: false
// });
// try {
//   verifyWritable(obj, 'a');
// } catch(err) {
//   threw = true;
//   if (err.constructor !== Test262Error) {
//     $ERROR(
//       'Expected a Test262Error, but a "' + err.constructor.name +
//       '" was thrown.'
//     );
//   }
// }
// if (threw === false) {
//   $ERROR('Expected a Test262Error, but no error was thrown.');
// }
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
  2:             var_decl                    // var threw;
// var obj = {};
  3:             var_decl                    // var obj;
// Object.defineProperty(obj, 'a', {
//   writable: false
// });
// try {
//   verifyWritable(obj, 'a');
// } catch(err) {
//   threw = true;
//   if (err.constructor !== Test262Error) {
//     $ERROR(
//       'Expected a Test262Error, but a "' + err.constructor.name +
//       '" was thrown.'
//     );
//   }
// }
// if (threw === false) {
//   $ERROR('Expected a Test262Error, but no error was thrown.');
// }
// 
  4:           assignment  130    0          // tmp130 = false: SIMPLE;
  5:           assignment  254    6          // threw = tmp130 : TYPEOF(tmp130);
// var obj = {};
  6:             obj_decl  255               // 
  6:             obj_decl  130               // tmp130 = {}; // REWRITE
  7:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
// Object.defineProperty(obj, 'a', {
  8:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  9:          prop_getter  131  254          // tmp131 = Object[tmp130];
 10:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 11:               call_n  255  131          // 
 12:                 meta    1    1          // 
 13:                 meta    2  254          // 
 14:           assignment  133    5          // tmp133 = 'a': STRING;
 15:                 meta    2  133          // 
 16:             obj_decl  255               // 
//   writable: false
 17:           assignment  133    0          // tmp133 = false: SIMPLE;
// });
 18:           assignment  134    5          // tmp134 = 'writable': STRING;
 19:                 meta    3  134          // 
 16:             obj_decl  133               //  // REWRITE
 20:                 meta    2  133          // tmp133 = {tmp134:tmp133, tmp133};
 11:               call_n  133  131          //  // REWRITE
// try {
 21:            try_block  255               // try (end: 65556);
//   verifyWritable(obj, 'a');
 22:               call_n  255  254          // 
 23:                 meta    2  254          // 
 24:           assignment  130    5          // tmp130 = 'a': STRING;
 25:                 meta    2  130          // 
 22:               call_n  130  254          //  // REWRITE
// } catch(err) {
 21:            try_block    0               // try (end: 26); // REWRITE
 26:                 meta    8  255          // catch end: 65561;
 27:                 meta    9  254          // catch (err);
//   threw = true;
 28:           assignment  130    0          // tmp130 = true: SIMPLE;
 29:           assignment  254    6          // threw = tmp130 : TYPEOF(tmp130);
//   if (err.constructor !== Test262Error) {
 30:           assignment  130    5          // tmp130 = 'constructor': STRING;
 31:          prop_getter  131  254          // tmp131 = err[tmp130];
 32: not_equal_value_type  132  131          // tmp132 = tmp131 !== Test262Error;
 33:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65568;
//     $ERROR(
 34:               call_n  255  254          // 
//       'Expected a Test262Error, but a "' + err.constructor.name +
 35:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but a "': STRING;
 36:           assignment  131    5          // tmp131 = 'constructor': STRING;
 37:          prop_getter  132  254          // tmp132 = err[tmp131];
 38:           assignment  133    5          // tmp133 = 'name': STRING;
 39:          prop_getter  134  132          // tmp134 = tmp132[tmp133];
 40:             addition  135  130          // tmp135 = tmp130 + tmp134;
//       '" was thrown.'
 41:           assignment  136    5          // tmp136 = '" was thrown.': STRING;
//     );
 42:             addition  137  135          // tmp137 = tmp135 + tmp136;
 43:                 meta    2  137          // 
 34:               call_n  130  254          //  // REWRITE
//   }
// }
 33:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 44; // REWRITE
 26:                 meta    8    0          // catch end: 44; // REWRITE
// if (threw === false) {
 44:                 meta   11  255          // end try
 45:           assignment  130    6          // tmp130 = threw : TYPEOF(threw);
 46:           assignment  131    0          // tmp131 = false: SIMPLE;
 47:     equal_value_type  132  130          // tmp132 = tmp130 === tmp131;
 48:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65583;
//   $ERROR('Expected a Test262Error, but no error was thrown.');
 49:               call_n  255  254          // 
 50:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but no error was thrown.': STRING;
 51:                 meta    2  130          // 
 49:               call_n  130  254          //  // REWRITE
// }
// 
 48:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 52; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp137; // REWRITE
 52:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] threw : STRING
0x84ec60 [ 12] obj : STRING
0x84ec6c [  4] Object : MAGIC STRING [id=27] 
0x84ec70 [  4] defineProperty : MAGIC STRING [id=60] 
0x84ec74 [  8] a : STRING
0x84ec7c [  4] writable : MAGIC STRING [id=69] 
0x84ec94 [ 20] verifyWritable : STRING
0x84eca8 [ 12] err : STRING
0x84ecb4 [  4] constructor : MAGIC STRING [id=3] 
0x84ecb8 [ 20] Test262Error : STRING
0x84ece0 [ 12] $ERROR : STRING
0x84ecec [ 40] Expected a Test262Error, but a " : STRING
0x84ed28 [  4] name : MAGIC STRING [id=197] 
0x84ed2c [ 20] " was thrown. : STRING
0x84ed54 [ 56] Expected a Test262Error, but no error was thrown. : STRING
0x84eda0 [ 32]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp137;
  2:             var_decl                    // var threw;
  3:             var_decl                    // var obj;
  4:           assignment  130    0          // tmp130 = false: SIMPLE;
  5:           assignment    0    6          // threw = tmp130 : TYPEOF(tmp130);
  6:             obj_decl  130               // tmp130 = {};
  7:           assignment    1    6          // obj = tmp130 : TYPEOF(tmp130);
  8:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  9:          prop_getter  131    3          // tmp131 = Object[tmp130];
 10:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 11:               call_n  133  131          // 
 12:                 meta    1    1          // 
 13:                 meta    2    1          // 
 14:           assignment  133    5          // tmp133 = 'a': STRING;
 15:                 meta    2  133          // 
 16:             obj_decl  133               // 
 17:           assignment  133    0          // tmp133 = false: SIMPLE;
 18:           assignment  134    5          // tmp134 = 'writable': STRING;
 19:                 meta    3  134          // tmp133 = {tmp134:tmp133};
 20:                 meta    2  133          // 
 21:            try_block    0               // try (end: 26);
 22:               call_n  130    6          // 
 23:                 meta    2    1          // 
 24:           assignment  130    5          // tmp130 = 'a': STRING;
 25:                 meta    2  130          // tmp130 = verifyWritable (obj, tmp130);
 26:                 meta    8    0          // catch end: 44;
 27:                 meta    9    7          // catch (err);
 28:           assignment  130    0          // tmp130 = true: SIMPLE;
 29:           assignment    0    6          // threw = tmp130 : TYPEOF(tmp130);
 30:           assignment  130    5          // tmp130 = 'constructor': STRING;
 31:          prop_getter  131    7          // tmp131 = err[tmp130];
 32: not_equal_value_type  132  131          // tmp132 = tmp131 !== Test262Error;
 33:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 44;
 34:               call_n  130   10          // 
 35:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but a "': STRING;
 36:           assignment  131    5          // tmp131 = 'constructor': STRING;
 37:          prop_getter  132    7          // tmp132 = err[tmp131];
 38:           assignment  133    5          // tmp133 = 'name': STRING;
 39:          prop_getter  134  132          // tmp134 = tmp132[tmp133];
 40:             addition  135  130          // tmp135 = tmp130 + tmp134;
 41:           assignment  136    5          // tmp136 = '" was thrown.': STRING;
 42:             addition  137  135          // tmp137 = tmp135 + tmp136;
 43:                 meta    2  137          // tmp130 = $ERROR (tmp137);
 44:                 meta   11  255          // end try
 45:           assignment  130    6          // tmp130 = threw : TYPEOF(threw);
 46:           assignment  131    0          // tmp131 = false: SIMPLE;
 47:     equal_value_type  132  130          // tmp132 = tmp130 === tmp131;
 48:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 52;
 49:               call_n  130   10          // 
 50:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but no error was thrown.': STRING;
 51:                 meta    2  130          // tmp130 = $ERROR (tmp130);
 52:                  ret                    // ret;
