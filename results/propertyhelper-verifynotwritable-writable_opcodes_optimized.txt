// var threw=false;var obj={};Object.defineProperty(obj,"a",{writable:true,value:1});try{verifyNotWritable(obj,"a")}catch(err){threw=true;if(err.constructor!==Test262Error)$ERROR('Expected a Test262Error, but a "'+err.constructor.name+'" was thrown.')}if(threw===false)$ERROR("Expected a Test262Error, but no error was thrown.");
  0:                 meta   12  255          // [to be rewritten]
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
// var threw=false;var obj={};Object.defineProperty(obj,"a",{writable:true,value:1});try{verifyNotWritable(obj,"a")}catch(err){threw=true;if(err.constructor!==Test262Error)$ERROR('Expected a Test262Error, but a "'+err.constructor.name+'" was thrown.')}if(threw===false)$ERROR("Expected a Test262Error, but no error was thrown.");
  2:             var_decl                    // var threw;
  3:             var_decl                    // var obj;
// 
// var threw=false;var obj={};Object.defineProperty(obj,"a",{writable:true,value:1});try{verifyNotWritable(obj,"a")}catch(err){threw=true;if(err.constructor!==Test262Error)$ERROR('Expected a Test262Error, but a "'+err.constructor.name+'" was thrown.')}if(threw===false)$ERROR("Expected a Test262Error, but no error was thrown.");
  4:           assignment  130    0          // tmp130 = false: SIMPLE;
  5:           assignment  254    6          // threw = tmp130 : TYPEOF(tmp130);
  6:             obj_decl  255               // 
  6:             obj_decl  130               // tmp130 = {}; // REWRITE
  7:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
  8:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  9:          prop_getter  131  254          // tmp131 = Object[tmp130];
 10:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 11:               call_n  255  131          // 
 12:                 meta    1    1          // 
 13:                 meta    2  254          // 
 14:           assignment  133    5          // tmp133 = 'a': STRING;
 15:                 meta    2  133          // 
 16:             obj_decl  255               // 
 17:           assignment  133    0          // tmp133 = true: SIMPLE;
 18:           assignment  134    5          // tmp134 = 'writable': STRING;
 19:                 meta    3  134          // 
 20:           assignment  133    1          // tmp133 = 1: SMALLINT;
 21:           assignment  134    5          // tmp134 = 'value': STRING;
 22:                 meta    3  134          // 
 16:             obj_decl  133               //  // REWRITE
 23:                 meta    2  133          // 
 11:               call_n  133  131          //  // REWRITE
 24:            try_block  255               // try (end: 65559);
 25:               call_n  255  254          // 
 26:                 meta    2  254          // 
 27:           assignment  130    5          // tmp130 = 'a': STRING;
 28:                 meta    2  130          // 
 25:               call_n  130  254          //  // REWRITE
 24:            try_block    0               // try (end: 29); // REWRITE
 29:                 meta    8  255          // catch end: 65564;
 30:                 meta    9  254          // catch (err);
 31:           assignment  130    0          // tmp130 = true: SIMPLE;
 32:           assignment  254    6          // threw = tmp130 : TYPEOF(tmp130);
 33:           assignment  130    5          // tmp130 = 'constructor': STRING;
 34:          prop_getter  131  254          // tmp131 = err[tmp130];
 35: not_equal_value_type  132  131          // tmp132 = tmp131 !== Test262Error;
 36:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65571;
 37:               call_n  255  254          // 
 38:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but a "': STRING;
 39:           assignment  131    5          // tmp131 = 'constructor': STRING;
 40:          prop_getter  132  254          // tmp132 = err[tmp131];
 41:           assignment  133    5          // tmp133 = 'name': STRING;
 42:          prop_getter  134  132          // tmp134 = tmp132[tmp133];
 43:             addition  135  130          // tmp135 = tmp130 + tmp134;
 44:           assignment  136    5          // tmp136 = '" was thrown.': STRING;
 45:             addition  137  135          // tmp137 = tmp135 + tmp136;
 46:                 meta    2  137          // 
 37:               call_n  130  254          //  // REWRITE
 36:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 47; // REWRITE
 29:                 meta    8    0          // catch end: 47; // REWRITE
 47:                 meta   11  255          // end try
 48:           assignment  130    6          // tmp130 = threw : TYPEOF(threw);
 49:           assignment  131    0          // tmp131 = false: SIMPLE;
 50:     equal_value_type  132  130          // tmp132 = tmp130 === tmp131;
 51:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65586;
 52:               call_n  255  254          // 
 53:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but no error was thrown.': STRING;
 54:                 meta    2  130          // 
 52:               call_n  130  254          //  // REWRITE
// 
 51:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 55; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp137; // REWRITE
 55:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] threw : STRING
0x84ec60 [ 12] obj : STRING
0x84ec6c [  4] Object : MAGIC STRING [id=27] 
0x84ec70 [  4] defineProperty : MAGIC STRING [id=60] 
0x84ec74 [  8] a : STRING
0x84ec7c [  4] writable : MAGIC STRING [id=69] 
0x84ec94 [  4] value : MAGIC STRING [id=72] 
0x84ec98 [ 24] verifyNotWritable : STRING
0x84ecb0 [ 12] err : STRING
0x84ecbc [  4] constructor : MAGIC STRING [id=3] 
0x84ecd4 [ 20] Test262Error : STRING
0x84ece8 [ 12] $ERROR : STRING
0x84ecf4 [ 40] Expected a Test262Error, but a " : STRING
0x84ed30 [  4] name : MAGIC STRING [id=197] 
0x84ed34 [ 20] " was thrown. : STRING
0x84ed5c [ 56] Expected a Test262Error, but no error was thrown. : STRING
0x84eda8 [ 24]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp137;
  2:             var_decl                    // var threw;
  3:             var_decl                    // var obj;
  4:           assignment  130    0          // tmp130 = false: SIMPLE;
  5:           assignment    0    6          // threw = tmp130 : TYPEOF(tmp130);
  6:             obj_decl  130               // tmp130 = {};
  7:           assignment    1    6          // obj = tmp130 : TYPEOF(tmp130);
  8:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  9:          prop_getter  131    3          // tmp131 = Object[tmp130];
 10:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 11:               call_n  133  131          // 
 12:                 meta    1    1          // 
 13:                 meta    2    1          // 
 14:           assignment  133    5          // tmp133 = 'a': STRING;
 15:                 meta    2  133          // 
 16:             obj_decl  133               // 
 17:           assignment  133    0          // tmp133 = true: SIMPLE;
 18:           assignment  134    5          // tmp134 = 'writable': STRING;
 19:                 meta    3  134          // 
 20:           assignment  133    1          // tmp133 = 1: SMALLINT;
 21:           assignment  134    5          // tmp134 = 'value': STRING;
 22:                 meta    3  134          // tmp133 = {tmp134:tmp133, tmp134:tmp133};
 23:                 meta    2  133          // 
 24:            try_block    0               // try (end: 29);
 25:               call_n  130    7          // 
 26:                 meta    2    1          // 
 27:           assignment  130    5          // tmp130 = 'a': STRING;
 28:                 meta    2  130          // tmp130 = verifyNotWritable (obj, tmp130);
 29:                 meta    8    0          // catch end: 47;
 30:                 meta    9    8          // catch (err);
 31:           assignment  130    0          // tmp130 = true: SIMPLE;
 32:           assignment    0    6          // threw = tmp130 : TYPEOF(tmp130);
 33:           assignment  130    5          // tmp130 = 'constructor': STRING;
 34:          prop_getter  131    8          // tmp131 = err[tmp130];
 35: not_equal_value_type  132  131          // tmp132 = tmp131 !== Test262Error;
 36:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 47;
 37:               call_n  130   11          // 
 38:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but a "': STRING;
 39:           assignment  131    5          // tmp131 = 'constructor': STRING;
 40:          prop_getter  132    8          // tmp132 = err[tmp131];
 41:           assignment  133    5          // tmp133 = 'name': STRING;
 42:          prop_getter  134  132          // tmp134 = tmp132[tmp133];
 43:             addition  135  130          // tmp135 = tmp130 + tmp134;
 44:           assignment  136    5          // tmp136 = '" was thrown.': STRING;
 45:             addition  137  135          // tmp137 = tmp135 + tmp136;
 46:                 meta    2  137          // tmp130 = $ERROR (tmp137);
 47:                 meta   11  255          // end try
 48:           assignment  130    6          // tmp130 = threw : TYPEOF(threw);
 49:           assignment  131    0          // tmp131 = false: SIMPLE;
 50:     equal_value_type  132  130          // tmp132 = tmp130 === tmp131;
 51:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 55;
 52:               call_n  130   11          // 
 53:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but no error was thrown.': STRING;
 54:                 meta    2  130          // tmp130 = $ERROR (tmp130);
 55:                  ret                    // ret;
