// function testcase(){var desc=Object.getOwnPropertyDescriptor(String.prototype,"substr");if(desc.value===String.prototype.substr&&desc.writable===true&&desc.enumerable===false&&desc.configurable===true)return true}runTestCase(testcase);
  0:                 meta   12  255          // [to be rewritten]
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
// function testcase(){var desc=Object.getOwnPropertyDescriptor(String.prototype,"substr");if(desc.value===String.prototype.substr&&desc.writable===true&&desc.enumerable===false&&desc.configurable===true)return true}runTestCase(testcase);
// 
// function testcase(){var desc=Object.getOwnPropertyDescriptor(String.prototype,"substr");if(desc.value===String.prototype.substr&&desc.writable===true&&desc.enumerable===false&&desc.configurable===true)return true}runTestCase(testcase);
  0:          func_decl_n  254               // 
  0:          func_decl_n  254               // function testcase (); // REWRITE
  1:                 meta    7  255          // function end: 65536;
  2:                 meta   12  255          // [to be rewritten]
  2:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  3:         reg_var_decl  128               // var tmp128 .. tmp255;
  4:             var_decl                    // var desc;
  5:           assignment  130    5          // tmp130 = 'getOwnPropertyDescriptor': STRING;
  6:          prop_getter  131  254          // tmp131 = Object[tmp130];
  7:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  8:               call_n  255  131          // 
  9:                 meta    1    1          // 
 10:           assignment  133    5          // tmp133 = 'prototype': STRING;
 11:          prop_getter  134  254          // tmp134 = String[tmp133];
 12:                 meta    2  134          // 
 13:           assignment  133    5          // tmp133 = 'substr': STRING;
 14:                 meta    2  133          // 
  8:               call_n  133  131          //  // REWRITE
 15:           assignment  254    6          // desc = tmp133 : TYPEOF(tmp133);
 16:           assignment  130    5          // tmp130 = 'value': STRING;
 17:          prop_getter  131  254          // tmp131 = desc[tmp130];
 18:           assignment  132    5          // tmp132 = 'prototype': STRING;
 19:          prop_getter  133  254          // tmp133 = String[tmp132];
 20:           assignment  134    5          // tmp134 = 'substr': STRING;
 21:          prop_getter  135  133          // tmp135 = tmp133[tmp134];
 22:     equal_value_type  136  131          // tmp136 = tmp131 === tmp135;
 23:           assignment  137    6          // tmp137 = tmp136 : TYPEOF(tmp136);
 24:    is_false_jmp_down  137  255          // if (tmp137 == false) goto 65559;
 25:           assignment  138    5          // tmp138 = 'writable': STRING;
 26:          prop_getter  139  254          // tmp139 = desc[tmp138];
 27:           assignment  140    0          // tmp140 = true: SIMPLE;
 28:     equal_value_type  141  139          // tmp141 = tmp139 === tmp140;
 29:           assignment  137    6          // tmp137 = tmp141 : TYPEOF(tmp141);
 30:    is_false_jmp_down  137  255          // if (tmp137 == false) goto 65565;
 31:           assignment  142    5          // tmp142 = 'enumerable': STRING;
 32:          prop_getter  143  254          // tmp143 = desc[tmp142];
 33:           assignment  144    0          // tmp144 = false: SIMPLE;
 34:     equal_value_type  145  143          // tmp145 = tmp143 === tmp144;
 35:           assignment  137    6          // tmp137 = tmp145 : TYPEOF(tmp145);
 36:    is_false_jmp_down  137  255          // if (tmp137 == false) goto 65571;
 37:           assignment  146    5          // tmp146 = 'configurable': STRING;
 38:          prop_getter  147  254          // tmp147 = desc[tmp146];
 39:           assignment  148    0          // tmp148 = true: SIMPLE;
 40:     equal_value_type  149  147          // tmp149 = tmp147 === tmp148;
 41:           assignment  137    6          // tmp137 = tmp149 : TYPEOF(tmp149);
 24:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 42; // REWRITE
 30:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 42; // REWRITE
 36:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 42; // REWRITE
 42:    is_false_jmp_down  137  255          // if (tmp137 == false) goto 65577;
 43:           assignment  130    0          // tmp130 = true: SIMPLE;
 44:               retval                    // return tmp130;
 42:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 45; // REWRITE
  3:         reg_var_decl  128               // var tmp128 .. tmp149; // REWRITE
 45:                  ret                    // ret;
  1:                 meta    7    0          // function end: 46; // REWRITE
  2:               call_n  255  254          // 
  3:                 meta    2  254          // 
  2:               call_n  130  254          //  // REWRITE
// 
  1:         reg_var_decl  128               // var tmp128 .. tmp130; // REWRITE
  4:                  ret                    // ret;
LITERALS:
0x84ec54 [ 16] testcase : STRING
0x84ec64 [ 12] desc : STRING
0x84ec70 [  4] Object : MAGIC STRING [id=27] 
0x84ec74 [  4] getOwnPropertyDescriptor : MAGIC STRING [id=57] 
0x84ec78 [  4] String : MAGIC STRING [id=31] 
0x84ec7c [  4] prototype : MAGIC STRING [id=2] 
0x84ec94 [ 12] substr : STRING
0x84eca0 [  4] value : MAGIC STRING [id=72] 
0x84eca4 [  4] writable : MAGIC STRING [id=69] 
0x84eca8 [  4] enumerable : MAGIC STRING [id=70] 
0x84ecac [  4] configurable : MAGIC STRING [id=71] 
0x84ecb0 [ 20] runTestCase : STRING
0x84ecd8 [ 40]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp130;
  2:          func_decl_n    0               // function testcase ();
  3:                 meta    7    0          // function end: 48;
  4:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  5:         reg_var_decl  128               // var tmp128 .. tmp149;
  6:             var_decl                    // var desc;
  7:           assignment  130    5          // tmp130 = 'getOwnPropertyDescriptor': STRING;
  8:          prop_getter  131    3          // tmp131 = Object[tmp130];
  9:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 10:               call_n  133  131          // 
 11:                 meta    1    1          // 
 12:           assignment  133    5          // tmp133 = 'prototype': STRING;
 13:          prop_getter  134    5          // tmp134 = String[tmp133];
 14:                 meta    2  134          // 
 15:           assignment  133    5          // tmp133 = 'substr': STRING;
 16:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp134, tmp133);
 17:           assignment    1    6          // desc = tmp133 : TYPEOF(tmp133);
 18:           assignment  130    5          // tmp130 = 'value': STRING;
 19:          prop_getter  131    1          // tmp131 = desc[tmp130];
 20:           assignment  132    5          // tmp132 = 'prototype': STRING;
 21:          prop_getter  133    5          // tmp133 = String[tmp132];
 22:           assignment  134    5          // tmp134 = 'substr': STRING;
 23:          prop_getter  135  133          // tmp135 = tmp133[tmp134];
 24:     equal_value_type  136  131          // tmp136 = tmp131 === tmp135;
 25:           assignment  137    6          // tmp137 = tmp136 : TYPEOF(tmp136);
 26:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 44;
 27:           assignment  138    5          // tmp138 = 'writable': STRING;
 28:          prop_getter  139    1          // tmp139 = desc[tmp138];
 29:           assignment  140    0          // tmp140 = true: SIMPLE;
 30:     equal_value_type  141  139          // tmp141 = tmp139 === tmp140;
 31:           assignment  137    6          // tmp137 = tmp141 : TYPEOF(tmp141);
 32:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 44;
 33:           assignment  142    5          // tmp142 = 'enumerable': STRING;
 34:          prop_getter  143    1          // tmp143 = desc[tmp142];
 35:           assignment  144    0          // tmp144 = false: SIMPLE;
 36:     equal_value_type  145  143          // tmp145 = tmp143 === tmp144;
 37:           assignment  137    6          // tmp137 = tmp145 : TYPEOF(tmp145);
 38:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 44;
 39:           assignment  146    5          // tmp146 = 'configurable': STRING;
 40:          prop_getter  147    1          // tmp147 = desc[tmp146];
 41:           assignment  148    0          // tmp148 = true: SIMPLE;
 42:     equal_value_type  149  147          // tmp149 = tmp147 === tmp148;
 43:           assignment  137    6          // tmp137 = tmp149 : TYPEOF(tmp149);
 44:    is_false_jmp_down  137    0          // if (tmp137 == false) goto 47;
 45:           assignment  130    0          // tmp130 = true: SIMPLE;
 46:               retval                    // return tmp130;
 47:                  ret                    // ret;
 48:               call_n  130   11          // 
 49:                 meta    2    0          // tmp130 = runTestCase (testcase);
 50:                  ret                    // ret;
