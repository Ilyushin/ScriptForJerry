// // Copyright (c) 2004 by Arthur Langereis (arthur_ext at domain xfinitegames, tld com
// 
// var result = 0;
  0:                 meta   12  255          // [to be rewritten]
// // 1 op = 6 ANDs, 3 SHRs, 3 SHLs, 4 assigns, 2 ADDs
// 
// // O(1)
// 
// function fast3bitlookup(b) {
// var c, bi3b = 0xE994; // 0b1110 1001 1001 0100; // 3 2 2 1  2 1 1 0
// 
// c  = 3 & (bi3b >> ((b << 1) & 14));
// c += 3 & (bi3b >> ((b >> 2) & 14));
// c += 3 & (bi3b >> ((b >> 5) & 6));
// return c;
// /*
// 
// }
// function TimeFunc(func) {
// var x, y, t;
// var sum = 0;
// for(var x=0; x<500; x++)
// for(var y=0; y<256; y++) sum += func(y);
// return sum;
// }
// sum = TimeFunc(fast3bitlookup);
// var expected = 512000;
// if (sum != expected)
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
  2:             var_decl                    // var result;
// // 1 op = 6 ANDs, 3 SHRs, 3 SHLs, 4 assigns, 2 ADDs
// 
// // O(1)
// 
// function fast3bitlookup(b) {
// var c, bi3b = 0xE994; // 0b1110 1001 1001 0100; // 3 2 2 1  2 1 1 0
// 
// c  = 3 & (bi3b >> ((b << 1) & 14));
// c += 3 & (bi3b >> ((b >> 2) & 14));
// c += 3 & (bi3b >> ((b >> 5) & 6));
// return c;
// /*
// 
// }
// function TimeFunc(func) {
// var x, y, t;
// var sum = 0;
// for(var x=0; x<500; x++)
// for(var y=0; y<256; y++) sum += func(y);
// return sum;
// }
// sum = TimeFunc(fast3bitlookup);
// var expected = 512000;
  3:             var_decl                    // var expected;
// if (sum != expected)
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
// 
  4:           assignment  130    1          // tmp130 = 0: SMALLINT;
  5:           assignment  254    6          // result = tmp130 : TYPEOF(tmp130);
// // 1 op = 6 ANDs, 3 SHRs, 3 SHLs, 4 assigns, 2 ADDs
// 
// // O(1)
// 
// function fast3bitlookup(b) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  2:                 meta    7  255          // function end: 65537;
// var c, bi3b = 0xE994; // 0b1110 1001 1001 0100; // 3 2 2 1  2 1 1 0
  3:                 meta   12  255          // [to be rewritten]
// 
// c  = 3 & (bi3b >> ((b << 1) & 14));
// c += 3 & (bi3b >> ((b >> 2) & 14));
// c += 3 & (bi3b >> ((b >> 5) & 6));
// return c;
// /*
// 
// }
  3:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128               // var tmp128 .. tmp255;
  5:             var_decl                    // var c;
  6:             var_decl                    // var bi3b;
// 
// c  = 3 & (bi3b >> ((b << 1) & 14));
// c += 3 & (bi3b >> ((b >> 2) & 14));
// c += 3 & (bi3b >> ((b >> 5) & 6));
// return c;
// /*
// 
// }
  7:           assignment  130    3          // tmp130 = 59796: NUMBER;
  8:           assignment  254    6          // bi3b = tmp130 : TYPEOF(tmp130);
// 
// c  = 3 & (bi3b >> ((b << 1) & 14));
  9:           assignment  130    1          // tmp130 = 3: SMALLINT;
 10:           assignment  131    6          // tmp131 = bi3b : TYPEOF(bi3b);
 11:           assignment  132    6          // tmp132 = b : TYPEOF(b);
 12:           assignment  133    1          // tmp133 = 1: SMALLINT;
 13:         b_shift_left  134  132          // tmp134 = tmp132 << tmp133;
 14:           assignment  135    1          // tmp135 = 14: SMALLINT;
 15:                b_and  136  134          // tmp136 = tmp134 & tmp135;
 16:        b_shift_right  137  131          // tmp137 = tmp131 >> tmp136;
 17:                b_and  138  130          // tmp138 = tmp130 & tmp137;
 18:           assignment  254    6          // c = tmp138 : TYPEOF(tmp138);
// c += 3 & (bi3b >> ((b >> 2) & 14));
 19:           assignment  130    1          // tmp130 = 3: SMALLINT;
 20:           assignment  131    6          // tmp131 = bi3b : TYPEOF(bi3b);
 21:           assignment  132    6          // tmp132 = b : TYPEOF(b);
 22:           assignment  133    1          // tmp133 = 2: SMALLINT;
 23:        b_shift_right  134  132          // tmp134 = tmp132 >> tmp133;
 24:           assignment  135    1          // tmp135 = 14: SMALLINT;
 25:                b_and  136  134          // tmp136 = tmp134 & tmp135;
 26:        b_shift_right  137  131          // tmp137 = tmp131 >> tmp136;
 27:                b_and  138  130          // tmp138 = tmp130 & tmp137;
 28:             addition  254  254          // c = c + tmp138;
 29:           assignment  139    6          // tmp139 = c : TYPEOF(c);
// c += 3 & (bi3b >> ((b >> 5) & 6));
 30:           assignment  130    1          // tmp130 = 3: SMALLINT;
 31:           assignment  131    6          // tmp131 = bi3b : TYPEOF(bi3b);
 32:           assignment  132    6          // tmp132 = b : TYPEOF(b);
 33:           assignment  133    1          // tmp133 = 5: SMALLINT;
 34:        b_shift_right  134  132          // tmp134 = tmp132 >> tmp133;
 35:           assignment  135    1          // tmp135 = 6: SMALLINT;
 36:                b_and  136  134          // tmp136 = tmp134 & tmp135;
 37:        b_shift_right  137  131          // tmp137 = tmp131 >> tmp136;
 38:                b_and  138  130          // tmp138 = tmp130 & tmp137;
 39:             addition  254  254          // c = c + tmp138;
 40:           assignment  139    6          // tmp139 = c : TYPEOF(c);
// return c;
 41:               retval                    // return c;
// /*
// 
// }
  4:         reg_var_decl  128               // var tmp128 .. tmp139; // REWRITE
 42:                  ret                    // ret;
  2:                 meta    7    0          // function end: 43; // REWRITE
// function TimeFunc(func) {
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  2:                 meta    7  255          // function end: 65537;
// var x, y, t;
  3:                 meta   12  255          // [to be rewritten]
// var sum = 0;
// for(var x=0; x<500; x++)
// for(var y=0; y<256; y++) sum += func(y);
// return sum;
// }
  3:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  4:         reg_var_decl  128               // var tmp128 .. tmp255;
  5:             var_decl                    // var x;
  6:             var_decl                    // var y;
  7:             var_decl                    // var t;
// var sum = 0;
  8:             var_decl                    // var sum;
// for(var x=0; x<500; x++)
// for(var y=0; y<256; y++) sum += func(y);
// return sum;
// }
// var sum = 0;
  9:           assignment  130    1          // tmp130 = 0: SMALLINT;
 10:           assignment  254    6          // sum = tmp130 : TYPEOF(tmp130);
// for(var x=0; x<500; x++)
// for(var y=0; y<256; y++) sum += func(y);
 11:           assignment  130    1          // tmp130 = 0: SMALLINT;
 12:           assignment  254    6          // x = tmp130 : TYPEOF(tmp130);
 13:             jmp_down  255               // goto 65548;
 14:           assignment  130    1          // tmp130 = 0: SMALLINT;
 15:           assignment  254    6          // y = tmp130 : TYPEOF(tmp130);
 16:             jmp_down  255               // goto 65551;
 17:               call_n  255  254          // 
 18:                 meta    2  254          // 
 17:               call_n  130  254          //  // REWRITE
 19:             addition  254  254          // sum = sum + tmp130;
 20:           assignment  131    6          // tmp131 = sum : TYPEOF(sum);
 21:            post_incr  132               // tmp132 = y++;
 16:             jmp_down    0               // goto 22; // REWRITE
 22:           assignment  133    6          // tmp133 = y : TYPEOF(y);
 23:           assignment  134    3          // tmp134 = 256: NUMBER;
 24:            less_than  135  133          // tmp135 = tmp133 < tmp134;
 25:       is_true_jmp_up  135    0          // if (tmp135) goto 17;
 26:            post_incr  136               // tmp136 = x++;
 13:             jmp_down    0               // goto 27; // REWRITE
 27:           assignment  137    6          // tmp137 = x : TYPEOF(x);
 28:           assignment  138    3          // tmp138 = 500: NUMBER;
 29:            less_than  139  137          // tmp139 = tmp137 < tmp138;
 30:       is_true_jmp_up  139    0          // if (tmp139) goto 14;
// return sum;
 31:               retval                    // return sum;
// }
  4:         reg_var_decl  128               // var tmp128 .. tmp139; // REWRITE
 32:                  ret                    // ret;
  2:                 meta    7    0          // function end: 33; // REWRITE
// sum = TimeFunc(fast3bitlookup);
  6:               call_n  255  254          // 
  7:                 meta    2  254          // 
  6:               call_n  130  254          //  // REWRITE
  8:           assignment  254    6          // sum = tmp130 : TYPEOF(tmp130);
// var expected = 512000;
  9:           assignment  130    3          // tmp130 = 512000: NUMBER;
 10:           assignment  254    6          // expected = tmp130 : TYPEOF(tmp130);
// if (sum != expected)
 11:           assignment  130    6          // tmp130 = sum : TYPEOF(sum);
 12:      not_equal_value  131  130          // tmp131 = tmp130 != expected;
 13:    is_false_jmp_down  131  255          // if (tmp131 == false) goto 65548;
//     throw "ERROR: bad result: expected " + expected + " but got " + sum;
 14:           assignment  130    5          // tmp130 = 'ERROR: bad result: expected ': STRING;
 15:             addition  131  130          // tmp131 = tmp130 + expected;
 16:           assignment  132    5          // tmp132 = ' but got ': STRING;
 17:             addition  133  131          // tmp133 = tmp131 + tmp132;
 18:             addition  134  133          // tmp134 = tmp133 + sum;
 19:          throw_value                    // throw tmp134;
// 
 13:    is_false_jmp_down  131    0          // if (tmp131 == false) goto 20; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp134; // REWRITE
 20:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] result : STRING
0x84ec60 [ 20] fast3bitlookup : STRING
0x84ec74 [  8] b : STRING
0x84ec7c [  8] c : STRING
0x84ec98 [ 12] bi3b : STRING
0x84eca4 [ 12] 59796 : NUMBER
0x84ecb0 [ 16] TimeFunc : STRING
0x84ecd4 [ 12] func : STRING
0x84ece0 [  8] x : STRING
0x84ece8 [  8] y : STRING
0x84ecf0 [  8] t : STRING
0x84ecf8 [ 12] sum : STRING
0x84ed18 [ 12] 500 : NUMBER
0x84ed24 [ 12] 256 : NUMBER
0x84ed30 [ 16] expected : STRING
0x84ed54 [ 12] 512000 : NUMBER
0x84ed60 [ 36] ERROR: bad result: expected  : STRING
0x84ed98 [ 16]  but got  : STRING
0x84eda8 [ 24]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp134;
  2:             var_decl                    // var result;
  3:             var_decl                    // var expected;
  4:          func_decl_n    2               // 
  5:                 meta    2    3          // function fast3bitlookup (b);
  6:                 meta    7    0          // function end: 47;
  7:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  8:         reg_var_decl  128               // var tmp128 .. tmp139;
  9:             var_decl                    // var c;
 10:             var_decl                    // var bi3b;
 11:           assignment  130    3          // tmp130 = 59796: NUMBER;
 12:           assignment    5    6          // bi3b = tmp130 : TYPEOF(tmp130);
 13:           assignment  130    1          // tmp130 = 3: SMALLINT;
 14:           assignment  131    6          // tmp131 = bi3b : TYPEOF(bi3b);
 15:           assignment  132    6          // tmp132 = b : TYPEOF(b);
 16:           assignment  133    1          // tmp133 = 1: SMALLINT;
 17:         b_shift_left  134  132          // tmp134 = tmp132 << tmp133;
 18:           assignment  135    1          // tmp135 = 14: SMALLINT;
 19:                b_and  136  134          // tmp136 = tmp134 & tmp135;
 20:        b_shift_right  137  131          // tmp137 = tmp131 >> tmp136;
 21:                b_and  138  130          // tmp138 = tmp130 & tmp137;
 22:           assignment    4    6          // c = tmp138 : TYPEOF(tmp138);
 23:           assignment  130    1          // tmp130 = 3: SMALLINT;
 24:           assignment  131    6          // tmp131 = bi3b : TYPEOF(bi3b);
 25:           assignment  132    6          // tmp132 = b : TYPEOF(b);
 26:           assignment  133    1          // tmp133 = 2: SMALLINT;
 27:        b_shift_right  134  132          // tmp134 = tmp132 >> tmp133;
 28:           assignment  135    1          // tmp135 = 14: SMALLINT;
 29:                b_and  136  134          // tmp136 = tmp134 & tmp135;
 30:        b_shift_right  137  131          // tmp137 = tmp131 >> tmp136;
 31:                b_and  138  130          // tmp138 = tmp130 & tmp137;
 32:             addition    4    4          // c = c + tmp138;
 33:           assignment  139    6          // tmp139 = c : TYPEOF(c);
 34:           assignment  130    1          // tmp130 = 3: SMALLINT;
 35:           assignment  131    6          // tmp131 = bi3b : TYPEOF(bi3b);
 36:           assignment  132    6          // tmp132 = b : TYPEOF(b);
 37:           assignment  133    1          // tmp133 = 5: SMALLINT;
 38:        b_shift_right  134  132          // tmp134 = tmp132 >> tmp133;
 39:           assignment  135    1          // tmp135 = 6: SMALLINT;
 40:                b_and  136  134          // tmp136 = tmp134 & tmp135;
 41:        b_shift_right  137  131          // tmp137 = tmp131 >> tmp136;
 42:                b_and  138  130          // tmp138 = tmp130 & tmp137;
 43:             addition    4    4          // c = c + tmp138;
 44:           assignment  139    6          // tmp139 = c : TYPEOF(c);
 45:               retval                    // return c;
 46:                  ret                    // ret;
 47:          func_decl_n    7               // 
 48:                 meta    2    8          // function TimeFunc (func);
 49:                 meta    7    0          // function end: 80;
 50:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
 51:         reg_var_decl  128               // var tmp128 .. tmp139;
 52:             var_decl                    // var x;
 53:             var_decl                    // var y;
 54:             var_decl                    // var t;
 55:             var_decl                    // var sum;
 56:           assignment  130    1          // tmp130 = 0: SMALLINT;
 57:           assignment   12    6          // sum = tmp130 : TYPEOF(tmp130);
 58:           assignment  130    1          // tmp130 = 0: SMALLINT;
 59:           assignment    9    6          // x = tmp130 : TYPEOF(tmp130);
 60:             jmp_down    0               // goto 74;
 61:           assignment  130    1          // tmp130 = 0: SMALLINT;
 62:           assignment   10    6          // y = tmp130 : TYPEOF(tmp130);
 63:             jmp_down    0               // goto 69;
 64:               call_n  130    0          // 
 65:                 meta    2    1          // tmp130 = func (y);
 66:             addition    2    2          // sum = sum + tmp130;
 67:           assignment  131    6          // tmp131 = sum : TYPEOF(sum);
 68:            post_incr  132               // tmp132 = y++;
 69:           assignment  133    6          // tmp133 = y : TYPEOF(y);
 70:           assignment  134    3          // tmp134 = 256: NUMBER;
 71:            less_than  135  133          // tmp135 = tmp133 < tmp134;
 72:       is_true_jmp_up  135    0          // if (tmp135) goto 64;
 73:            post_incr  136               // tmp136 = x++;
 74:           assignment  137    6          // tmp137 = x : TYPEOF(x);
 75:           assignment  138    3          // tmp138 = 500: NUMBER;
 76:            less_than  139  137          // tmp139 = tmp137 < tmp138;
 77:       is_true_jmp_up  139    0          // if (tmp139) goto 61;
 78:               retval                    // return sum;
 79:                  ret                    // ret;
 80:           assignment  130    1          // tmp130 = 0: SMALLINT;
 81:           assignment    6    6          // result = tmp130 : TYPEOF(tmp130);
 82:               call_n  130    7          // 
 83:                 meta    2    8          // tmp130 = TimeFunc (fast3bitlookup);
 84:           assignment    2    6          // sum = tmp130 : TYPEOF(tmp130);
 85:           assignment  130    3          // tmp130 = 512000: NUMBER;
 86:           assignment   10    6          // expected = tmp130 : TYPEOF(tmp130);
 87:           assignment  130    6          // tmp130 = sum : TYPEOF(sum);
 88:      not_equal_value  131  130          // tmp131 = tmp130 != expected;
 89:    is_false_jmp_down  131    0          // if (tmp131 == false) goto 96;
 90:           assignment  130    5          // tmp130 = 'ERROR: bad result: expected ': STRING;
 91:             addition  131  130          // tmp131 = tmp130 + expected;
 92:           assignment  132    5          // tmp132 = ' but got ': STRING;
 93:             addition  133  131          // tmp133 = tmp131 + tmp132;
 94:             addition  134  133          // tmp134 = tmp133 + sum;
 95:          throw_value                    // throw tmp134;
 96:                  ret                    // ret;
