// var a=1,b=2,o={x:1,y:2},a=18;function f(c,d){return c+2}f(2);f(3,5);
  0:                 meta   12  255          // [to be rewritten]
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
// var a=1,b=2,o={x:1,y:2},a=18;function f(c,d){return c+2}f(2);f(3,5);
  2:             var_decl                    // var a;
  3:             var_decl                    // var b;
  4:             var_decl                    // var o;
// 
// var a=1,b=2,o={x:1,y:2},a=18;function f(c,d){return c+2}f(2);f(3,5);
  5:           assignment  130    1          // tmp130 = 1: SMALLINT;
  6:           assignment  254    6          // a = tmp130 : TYPEOF(tmp130);
  7:           assignment  131    1          // tmp131 = 2: SMALLINT;
  8:           assignment  254    6          // b = tmp131 : TYPEOF(tmp131);
  9:             obj_decl  255               // 
 10:           assignment  132    1          // tmp132 = 1: SMALLINT;
 11:           assignment  133    5          // tmp133 = 'x': STRING;
 12:                 meta    3  133          // 
 13:           assignment  132    1          // tmp132 = 2: SMALLINT;
 14:           assignment  133    5          // tmp133 = 'y': STRING;
 15:                 meta    3  133          // 
  9:             obj_decl  132               //  // REWRITE
 16:           assignment  254    6          // o = tmp132 : TYPEOF(tmp132);
 17:           assignment  133    1          // tmp133 = 18: SMALLINT;
 18:           assignment  254    6          // a = tmp133 : TYPEOF(tmp133);
  0:          func_decl_n  254               // 
  1:                 meta    2  254          // 
  2:                 meta    2  254          // 
  0:          func_decl_n  254               //  // REWRITE
  3:                 meta    7  255          // function end: 65538;
  4:                 meta   12  255          // [to be rewritten]
  4:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  5:         reg_var_decl  128               // var tmp128 .. tmp255;
  6:           assignment  130    6          // tmp130 = c : TYPEOF(c);
  7:           assignment  131    1          // tmp131 = 2: SMALLINT;
  8:             addition  132  130          // tmp132 = tmp130 + tmp131;
  9:               retval                    // return tmp132;
  5:         reg_var_decl  128               // var tmp128 .. tmp132; // REWRITE
 10:                  ret                    // ret;
  3:                 meta    7    0          // function end: 11; // REWRITE
 19:               call_n  255  254          // 
 20:           assignment  130    1          // tmp130 = 2: SMALLINT;
 21:                 meta    2  130          // 
 19:               call_n  130  254          //  // REWRITE
 22:               call_n  255  254          // 
 23:           assignment  130    1          // tmp130 = 3: SMALLINT;
 24:                 meta    2  130          // 
 25:           assignment  130    1          // tmp130 = 5: SMALLINT;
 26:                 meta    2  130          // 
 22:               call_n  130  254          //  // REWRITE
// 
  1:         reg_var_decl  128               // var tmp128 .. tmp133; // REWRITE
 27:                  ret                    // ret;
LITERALS:
0x84ec54 [  8] a : STRING
0x84ec5c [  8] b : STRING
0x84ec64 [  8] o : STRING
0x84ec6c [  8] x : STRING
0x84ec74 [  8] y : STRING
0x84ec7c [  8] f : STRING
0x84ec98 [  8] c : STRING
0x84eca0 [  8] d : STRING
0x84eca8 [ 24]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp133;
  2:             var_decl                    // var a;
  3:             var_decl                    // var b;
  4:             var_decl                    // var o;
  5:          func_decl_n    3               // 
  6:                 meta    2    4          // 
  7:                 meta    2    5          // function f (c, d);
  8:                 meta    7    0          // function end: 16;
  9:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
 10:         reg_var_decl  128               // var tmp128 .. tmp132;
 11:           assignment  130    6          // tmp130 = c : TYPEOF(c);
 12:           assignment  131    1          // tmp131 = 2: SMALLINT;
 13:             addition  132  130          // tmp132 = tmp130 + tmp131;
 14:               retval                    // return tmp132;
 15:                  ret                    // ret;
 16:           assignment  130    1          // tmp130 = 1: SMALLINT;
 17:           assignment    0    6          // a = tmp130 : TYPEOF(tmp130);
 18:           assignment  131    1          // tmp131 = 2: SMALLINT;
 19:           assignment    1    6          // b = tmp131 : TYPEOF(tmp131);
 20:             obj_decl  132               // 
 21:           assignment  132    1          // tmp132 = 1: SMALLINT;
 22:           assignment  133    5          // tmp133 = 'x': STRING;
 23:                 meta    3  133          // 
 24:           assignment  132    1          // tmp132 = 2: SMALLINT;
 25:           assignment  133    5          // tmp133 = 'y': STRING;
 26:                 meta    3  133          // tmp132 = {tmp133:tmp132, tmp133:tmp132};
 27:           assignment    2    6          // o = tmp132 : TYPEOF(tmp132);
 28:           assignment  133    1          // tmp133 = 18: SMALLINT;
 29:           assignment    0    6          // a = tmp133 : TYPEOF(tmp133);
 30:               call_n  130    3          // 
 31:           assignment  130    1          // tmp130 = 2: SMALLINT;
 32:                 meta    2  130          // tmp130 = f (tmp130);
 33:               call_n  130    3          // 
 34:           assignment  130    1          // tmp130 = 3: SMALLINT;
 35:                 meta    2  130          // 
 36:           assignment  130    1          // tmp130 = 5: SMALLINT;
 37:                 meta    2  130          // tmp130 = f (tmp130, tmp130);
 38:                  ret                    // ret;
