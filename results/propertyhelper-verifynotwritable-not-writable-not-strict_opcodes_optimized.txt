// var obj={};Object.defineProperty(obj,"a",{writable:false,value:123});verifyNotWritable(obj,"a");if(obj.a!==123)$ERROR("`verifyNotWritable` should be non-destructive.");
  0:                 meta   12  255          // [to be rewritten]
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
// var obj={};Object.defineProperty(obj,"a",{writable:false,value:123});verifyNotWritable(obj,"a");if(obj.a!==123)$ERROR("`verifyNotWritable` should be non-destructive.");
  2:             var_decl                    // var obj;
// 
// var obj={};Object.defineProperty(obj,"a",{writable:false,value:123});verifyNotWritable(obj,"a");if(obj.a!==123)$ERROR("`verifyNotWritable` should be non-destructive.");
  3:             obj_decl  255               // 
  3:             obj_decl  130               // tmp130 = {}; // REWRITE
  4:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
  5:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  6:          prop_getter  131  254          // tmp131 = Object[tmp130];
  7:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  8:               call_n  255  131          // 
  9:                 meta    1    1          // 
 10:                 meta    2  254          // 
 11:           assignment  133    5          // tmp133 = 'a': STRING;
 12:                 meta    2  133          // 
 13:             obj_decl  255               // 
 14:           assignment  133    0          // tmp133 = false: SIMPLE;
 15:           assignment  134    5          // tmp134 = 'writable': STRING;
 16:                 meta    3  134          // 
 17:           assignment  133    1          // tmp133 = 123: SMALLINT;
 18:           assignment  134    5          // tmp134 = 'value': STRING;
 19:                 meta    3  134          // 
 13:             obj_decl  133               //  // REWRITE
 20:                 meta    2  133          // 
  8:               call_n  133  131          //  // REWRITE
 21:               call_n  255  254          // 
 22:                 meta    2  254          // 
 23:           assignment  130    5          // tmp130 = 'a': STRING;
 24:                 meta    2  130          // 
 21:               call_n  130  254          //  // REWRITE
 25:           assignment  130    5          // tmp130 = 'a': STRING;
 26:          prop_getter  131  254          // tmp131 = obj[tmp130];
 27:           assignment  132    1          // tmp132 = 123: SMALLINT;
 28: not_equal_value_type  133  131          // tmp133 = tmp131 !== tmp132;
 29:    is_false_jmp_down  133  255          // if (tmp133 == false) goto 65564;
 30:               call_n  255  254          // 
 31:           assignment  130    5          // tmp130 = '`verifyNotWritable` should be non-destructive.': STRING;
 32:                 meta    2  130          // 
 30:               call_n  130  254          //  // REWRITE
// 
 29:    is_false_jmp_down  133    0          // if (tmp133 == false) goto 33; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp134; // REWRITE
 33:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] obj : STRING
0x84ec60 [  4] Object : MAGIC STRING [id=27] 
0x84ec64 [  4] defineProperty : MAGIC STRING [id=60] 
0x84ec68 [  8] a : STRING
0x84ec70 [  4] writable : MAGIC STRING [id=69] 
0x84ec74 [  4] value : MAGIC STRING [id=72] 
0x84ec78 [ 24] verifyNotWritable : STRING
0x84eca4 [ 12] $ERROR : STRING
0x84ecb0 [ 52] `verifyNotWritable` should be non-destructive. : STRING
0x84ecf8 [  8]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp134;
  2:             var_decl                    // var obj;
  3:             obj_decl  130               // tmp130 = {};
  4:           assignment    0    6          // obj = tmp130 : TYPEOF(tmp130);
  5:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  6:          prop_getter  131    2          // tmp131 = Object[tmp130];
  7:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
  8:               call_n  133  131          // 
  9:                 meta    1    1          // 
 10:                 meta    2    0          // 
 11:           assignment  133    5          // tmp133 = 'a': STRING;
 12:                 meta    2  133          // 
 13:             obj_decl  133               // 
 14:           assignment  133    0          // tmp133 = false: SIMPLE;
 15:           assignment  134    5          // tmp134 = 'writable': STRING;
 16:                 meta    3  134          // 
 17:           assignment  133    1          // tmp133 = 123: SMALLINT;
 18:           assignment  134    5          // tmp134 = 'value': STRING;
 19:                 meta    3  134          // tmp133 = {tmp134:tmp133, tmp134:tmp133};
 20:                 meta    2  133          // 
 21:               call_n  130    6          // 
 22:                 meta    2    0          // 
 23:           assignment  130    5          // tmp130 = 'a': STRING;
 24:                 meta    2  130          // tmp130 = verifyNotWritable (obj, tmp130);
 25:           assignment  130    5          // tmp130 = 'a': STRING;
 26:          prop_getter  131    0          // tmp131 = obj[tmp130];
 27:           assignment  132    1          // tmp132 = 123: SMALLINT;
 28: not_equal_value_type  133  131          // tmp133 = tmp131 !== tmp132;
 29:    is_false_jmp_down  133    0          // if (tmp133 == false) goto 33;
 30:               call_n  130    7          // 
 31:           assignment  130    5          // tmp130 = '`verifyNotWritable` should be non-destructive.': STRING;
 32:                 meta    2  130          // tmp130 = $ERROR (tmp130);
 33:                  ret                    // ret;
