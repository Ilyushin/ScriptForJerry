// // Copyright (C) 2015 the V8 project authors. All rights reserved.
// 
// // This code is governed by the BSD license found in the LICENSE file.
// 
// /*---
// 
// var obj = {};
  0:                 meta   12  255          // [to be rewritten]
// var first = [0, 1, '', 's', null, undefined, obj];
// var second = [0, 1, '', 's', undefined, null, obj];
// if (compareArray(first, second) !== false) {
//   $ERROR('Arrays containing the same elements in different order are not equivalent.');
// }
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
  2:             var_decl                    // var obj;
// var first = [0, 1, '', 's', null, undefined, obj];
  3:             var_decl                    // var first;
// var second = [0, 1, '', 's', undefined, null, obj];
  4:             var_decl                    // var second;
// if (compareArray(first, second) !== false) {
//   $ERROR('Arrays containing the same elements in different order are not equivalent.');
// }
// 
  5:             obj_decl  255               // 
  5:             obj_decl  130               // tmp130 = {}; // REWRITE
  6:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
// var first = [0, 1, '', 's', null, undefined, obj];
  7:           array_decl  255               // 
  8:           assignment  130    1          // tmp130 = 0: SMALLINT;
  9:                 meta    2  130          // 
 10:           assignment  130    1          // tmp130 = 1: SMALLINT;
 11:                 meta    2  130          // 
 12:           assignment  130    5          // tmp130 = '': STRING;
 13:                 meta    2  130          // 
 14:           assignment  130    5          // tmp130 = 's': STRING;
 15:                 meta    2  130          // 
 16:           assignment  130    0          // tmp130 = null: SIMPLE;
 17:                 meta    2  130          // 
 18:                 meta    2  254          // 
 19:                 meta    2  254          // 
  7:           array_decl  130               //  // REWRITE
 20:           assignment  254    6          // first = tmp130 : TYPEOF(tmp130);
// var second = [0, 1, '', 's', undefined, null, obj];
 21:           array_decl  255               // 
 22:           assignment  130    1          // tmp130 = 0: SMALLINT;
 23:                 meta    2  130          // 
 24:           assignment  130    1          // tmp130 = 1: SMALLINT;
 25:                 meta    2  130          // 
 26:           assignment  130    5          // tmp130 = '': STRING;
 27:                 meta    2  130          // 
 28:           assignment  130    5          // tmp130 = 's': STRING;
 29:                 meta    2  130          // 
 30:                 meta    2  254          // 
 31:           assignment  130    0          // tmp130 = null: SIMPLE;
 32:                 meta    2  130          // 
 33:                 meta    2  254          // 
 21:           array_decl  130               //  // REWRITE
 34:           assignment  254    6          // second = tmp130 : TYPEOF(tmp130);
// if (compareArray(first, second) !== false) {
 35:               call_n  255  254          // 
 36:                 meta    2  254          // 
 37:                 meta    2  254          // 
 35:               call_n  130  254          //  // REWRITE
 38:           assignment  131    0          // tmp131 = false: SIMPLE;
 39: not_equal_value_type  132  130          // tmp132 = tmp130 !== tmp131;
 40:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65575;
//   $ERROR('Arrays containing the same elements in different order are not equivalent.');
 41:               call_n  255  254          // 
 42:           assignment  130    5          // tmp130 = 'Arrays containing the same elements in different order are not e': STRING;
 43:                 meta    2  130          // 
 41:               call_n  130  254          //  // REWRITE
// }
// 
 40:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 44; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp132; // REWRITE
 44:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] obj : STRING
0x84ec60 [ 12] first : STRING
0x84ec6c [  4]  : MAGIC STRING [id=218] 
0x84ec70 [  8] s : STRING
0x84ec78 [  4] undefined : MAGIC STRING [id=6] 
0x84ec7c [ 12] second : STRING
0x84ec9c [ 20] compareArray : STRING
0x84ecb0 [ 12] $ERROR : STRING
0x84ecbc [ 80] Arrays containing the same elements in different order are not equivalent. : STRING
0x84ed34 [ 12]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp132;
  2:             var_decl                    // var obj;
  3:             var_decl                    // var first;
  4:             var_decl                    // var second;
  5:             obj_decl  130               // tmp130 = {};
  6:           assignment    0    6          // obj = tmp130 : TYPEOF(tmp130);
  7:           array_decl  130               // 
  8:           assignment  130    1          // tmp130 = 0: SMALLINT;
  9:                 meta    2  130          // 
 10:           assignment  130    1          // tmp130 = 1: SMALLINT;
 11:                 meta    2  130          // 
 12:           assignment  130    5          // tmp130 = '': STRING;
 13:                 meta    2  130          // 
 14:           assignment  130    5          // tmp130 = 's': STRING;
 15:                 meta    2  130          // 
 16:           assignment  130    0          // tmp130 = null: SIMPLE;
 17:                 meta    2  130          // 
 18:                 meta    2    5          // 
 19:                 meta    2    0          // tmp130 = [tmp130, tmp130, tmp130, tmp130, tmp130, undefined, obj];
 20:           assignment    1    6          // first = tmp130 : TYPEOF(tmp130);
 21:           array_decl  130               // 
 22:           assignment  130    1          // tmp130 = 0: SMALLINT;
 23:                 meta    2  130          // 
 24:           assignment  130    1          // tmp130 = 1: SMALLINT;
 25:                 meta    2  130          // 
 26:           assignment  130    5          // tmp130 = '': STRING;
 27:                 meta    2  130          // 
 28:           assignment  130    5          // tmp130 = 's': STRING;
 29:                 meta    2  130          // 
 30:                 meta    2    5          // 
 31:           assignment  130    0          // tmp130 = null: SIMPLE;
 32:                 meta    2  130          // 
 33:                 meta    2    0          // tmp130 = [tmp130, tmp130, tmp130, tmp130, undefined, tmp130, obj];
 34:           assignment    2    6          // second = tmp130 : TYPEOF(tmp130);
 35:               call_n  130    6          // 
 36:                 meta    2    1          // 
 37:                 meta    2    2          // tmp130 = compareArray (first, second);
 38:           assignment  131    0          // tmp131 = false: SIMPLE;
 39: not_equal_value_type  132  130          // tmp132 = tmp130 !== tmp131;
 40:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 44;
 41:               call_n  130    7          // 
 42:           assignment  130    5          // tmp130 = 'Arrays containing the same elements in different order are not e': STRING;
 43:                 meta    2  130          // tmp130 = $ERROR (tmp130);
 44:                  ret                    // ret;
