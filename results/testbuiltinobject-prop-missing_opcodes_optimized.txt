// var threw=false;var obj={};Object.defineProperty(obj,"a",{writable:true,enumerable:false,configurable:true});Object.defineProperty(obj,"c",{writable:true,enumerable:false,configurable:true});try{testBuiltInObject(obj,false,false,["a","b","c"])}catch(err){threw=true;if(err.constructor!==Test262Error)$ERROR('Expected a Test262Error, but a "'+err.constructor.name+'" was thrown.')}if(threw===false)$ERROR("Expected a Test262Error, but no error was thrown.");
  0:                 meta   12  255          // [to be rewritten]
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
// var threw=false;var obj={};Object.defineProperty(obj,"a",{writable:true,enumerable:false,configurable:true});Object.defineProperty(obj,"c",{writable:true,enumerable:false,configurable:true});try{testBuiltInObject(obj,false,false,["a","b","c"])}catch(err){threw=true;if(err.constructor!==Test262Error)$ERROR('Expected a Test262Error, but a "'+err.constructor.name+'" was thrown.')}if(threw===false)$ERROR("Expected a Test262Error, but no error was thrown.");
  2:             var_decl                    // var threw;
  3:             var_decl                    // var obj;
// 
// var threw=false;var obj={};Object.defineProperty(obj,"a",{writable:true,enumerable:false,configurable:true});Object.defineProperty(obj,"c",{writable:true,enumerable:false,configurable:true});try{testBuiltInObject(obj,false,false,["a","b","c"])}catch(err){threw=true;if(err.constructor!==Test262Error)$ERROR('Expected a Test262Error, but a "'+err.constructor.name+'" was thrown.')}if(threw===false)$ERROR("Expected a Test262Error, but no error was thrown.");
  4:           assignment  130    0          // tmp130 = false: SIMPLE;
  5:           assignment  254    6          // threw = tmp130 : TYPEOF(tmp130);
  6:             obj_decl  255               // 
  6:             obj_decl  130               // tmp130 = {}; // REWRITE
  7:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
  8:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  9:          prop_getter  131  254          // tmp131 = Object[tmp130];
 10:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 11:               call_n  255  131          // 
 12:                 meta    1    1          // 
 13:                 meta    2  254          // 
 14:           assignment  133    5          // tmp133 = 'a': STRING;
 15:                 meta    2  133          // 
 16:             obj_decl  255               // 
 17:           assignment  133    0          // tmp133 = true: SIMPLE;
 18:           assignment  134    5          // tmp134 = 'writable': STRING;
 19:                 meta    3  134          // 
 20:           assignment  133    0          // tmp133 = false: SIMPLE;
 21:           assignment  134    5          // tmp134 = 'enumerable': STRING;
 22:                 meta    3  134          // 
 23:           assignment  133    0          // tmp133 = true: SIMPLE;
 24:           assignment  134    5          // tmp134 = 'configurable': STRING;
 25:                 meta    3  134          // 
 16:             obj_decl  133               //  // REWRITE
 26:                 meta    2  133          // 
 11:               call_n  133  131          //  // REWRITE
 27:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
 28:          prop_getter  131  254          // tmp131 = Object[tmp130];
 29:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 30:               call_n  255  131          // 
 31:                 meta    1    1          // 
 32:                 meta    2  254          // 
 33:           assignment  133    5          // tmp133 = 'c': STRING;
 34:                 meta    2  133          // 
 35:             obj_decl  255               // 
 36:           assignment  133    0          // tmp133 = true: SIMPLE;
 37:           assignment  134    5          // tmp134 = 'writable': STRING;
 38:                 meta    3  134          // 
 39:           assignment  133    0          // tmp133 = false: SIMPLE;
 40:           assignment  134    5          // tmp134 = 'enumerable': STRING;
 41:                 meta    3  134          // 
 42:           assignment  133    0          // tmp133 = true: SIMPLE;
 43:           assignment  134    5          // tmp134 = 'configurable': STRING;
 44:                 meta    3  134          // 
 35:             obj_decl  133               //  // REWRITE
 45:                 meta    2  133          // 
 30:               call_n  133  131          //  // REWRITE
 46:            try_block  255               // try (end: 65581);
 47:               call_n  255  254          // 
 48:                 meta    2  254          // 
 49:           assignment  130    0          // tmp130 = false: SIMPLE;
 50:                 meta    2  130          // 
 51:           assignment  130    0          // tmp130 = false: SIMPLE;
 52:                 meta    2  130          // 
 53:           array_decl  255               // 
 54:           assignment  130    5          // tmp130 = 'a': STRING;
 55:                 meta    2  130          // 
 56:           assignment  130    5          // tmp130 = 'b': STRING;
 57:                 meta    2  130          // 
 58:           assignment  130    5          // tmp130 = 'c': STRING;
 59:                 meta    2  130          // 
 53:           array_decl  130               //  // REWRITE
 60:                 meta    2  130          // 
 47:               call_n  130  254          //  // REWRITE
 46:            try_block    0               // try (end: 61); // REWRITE
 61:                 meta    8  255          // catch end: 65596;
 62:                 meta    9  254          // catch (err);
 63:           assignment  130    0          // tmp130 = true: SIMPLE;
 64:           assignment  254    6          // threw = tmp130 : TYPEOF(tmp130);
 65:           assignment  130    5          // tmp130 = 'constructor': STRING;
 66:          prop_getter  131  254          // tmp131 = err[tmp130];
 67: not_equal_value_type  132  131          // tmp132 = tmp131 !== Test262Error;
 68:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65603;
 69:               call_n  255  254          // 
 70:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but a "': STRING;
 71:           assignment  131    5          // tmp131 = 'constructor': STRING;
 72:          prop_getter  132  254          // tmp132 = err[tmp131];
 73:           assignment  133    5          // tmp133 = 'name': STRING;
 74:          prop_getter  134  132          // tmp134 = tmp132[tmp133];
 75:             addition  135  130          // tmp135 = tmp130 + tmp134;
 76:           assignment  136    5          // tmp136 = '" was thrown.': STRING;
 77:             addition  137  135          // tmp137 = tmp135 + tmp136;
 78:                 meta    2  137          // 
 69:               call_n  130  254          //  // REWRITE
 68:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 79; // REWRITE
 61:                 meta    8    0          // catch end: 79; // REWRITE
 79:                 meta   11  255          // end try
 80:           assignment  130    6          // tmp130 = threw : TYPEOF(threw);
 81:           assignment  131    0          // tmp131 = false: SIMPLE;
 82:     equal_value_type  132  130          // tmp132 = tmp130 === tmp131;
 83:    is_false_jmp_down  132  255          // if (tmp132 == false) goto 65618;
 84:               call_n  255  254          // 
 85:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but no error was thrown.': STRING;
 86:                 meta    2  130          // 
 84:               call_n  130  254          //  // REWRITE
// 
 83:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 87; // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp137; // REWRITE
 87:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] threw : STRING
0x84ec60 [ 12] obj : STRING
0x84ec6c [  4] Object : MAGIC STRING [id=27] 
0x84ec70 [  4] defineProperty : MAGIC STRING [id=60] 
0x84ec74 [  8] a : STRING
0x84ec7c [  4] writable : MAGIC STRING [id=69] 
0x84ec94 [  4] enumerable : MAGIC STRING [id=70] 
0x84ec98 [  4] configurable : MAGIC STRING [id=71] 
0x84ec9c [  8] c : STRING
0x84eca4 [ 24] testBuiltInObject : STRING
0x84ecbc [  8] b : STRING
0x84ecd8 [ 12] err : STRING
0x84ece4 [  4] constructor : MAGIC STRING [id=3] 
0x84ece8 [ 20] Test262Error : STRING
0x84ecfc [ 12] $ERROR : STRING
0x84ed1c [ 40] Expected a Test262Error, but a " : STRING
0x84ed58 [  4] name : MAGIC STRING [id=197] 
0x84ed5c [ 20] " was thrown. : STRING
0x84ed70 [ 56] Expected a Test262Error, but no error was thrown. : STRING
0x84edbc [  4]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp137;
  2:             var_decl                    // var threw;
  3:             var_decl                    // var obj;
  4:           assignment  130    0          // tmp130 = false: SIMPLE;
  5:           assignment    0    6          // threw = tmp130 : TYPEOF(tmp130);
  6:             obj_decl  130               // tmp130 = {};
  7:           assignment    1    6          // obj = tmp130 : TYPEOF(tmp130);
  8:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
  9:          prop_getter  131    3          // tmp131 = Object[tmp130];
 10:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 11:               call_n  133  131          // 
 12:                 meta    1    1          // 
 13:                 meta    2    1          // 
 14:           assignment  133    5          // tmp133 = 'a': STRING;
 15:                 meta    2  133          // 
 16:             obj_decl  133               // 
 17:           assignment  133    0          // tmp133 = true: SIMPLE;
 18:           assignment  134    5          // tmp134 = 'writable': STRING;
 19:                 meta    3  134          // 
 20:           assignment  133    0          // tmp133 = false: SIMPLE;
 21:           assignment  134    5          // tmp134 = 'enumerable': STRING;
 22:                 meta    3  134          // 
 23:           assignment  133    0          // tmp133 = true: SIMPLE;
 24:           assignment  134    5          // tmp134 = 'configurable': STRING;
 25:                 meta    3  134          // tmp133 = {tmp134:tmp133, tmp134:tmp133, tmp134:tmp133};
 26:                 meta    2  133          // 
 27:           assignment  130    5          // tmp130 = 'defineProperty': STRING;
 28:          prop_getter  131    3          // tmp131 = Object[tmp130];
 29:           assignment  132    6          // tmp132 = Object : TYPEOF(Object);
 30:               call_n  133  131          // 
 31:                 meta    1    1          // 
 32:                 meta    2    1          // 
 33:           assignment  133    5          // tmp133 = 'c': STRING;
 34:                 meta    2  133          // 
 35:             obj_decl  133               // 
 36:           assignment  133    0          // tmp133 = true: SIMPLE;
 37:           assignment  134    5          // tmp134 = 'writable': STRING;
 38:                 meta    3  134          // 
 39:           assignment  133    0          // tmp133 = false: SIMPLE;
 40:           assignment  134    5          // tmp134 = 'enumerable': STRING;
 41:                 meta    3  134          // 
 42:           assignment  133    0          // tmp133 = true: SIMPLE;
 43:           assignment  134    5          // tmp134 = 'configurable': STRING;
 44:                 meta    3  134          // tmp133 = {tmp134:tmp133, tmp134:tmp133, tmp134:tmp133};
 45:                 meta    2  133          // 
 46:            try_block    0               // try (end: 61);
 47:               call_n  130    9          // 
 48:                 meta    2    1          // 
 49:           assignment  130    0          // tmp130 = false: SIMPLE;
 50:                 meta    2  130          // 
 51:           assignment  130    0          // tmp130 = false: SIMPLE;
 52:                 meta    2  130          // 
 53:           array_decl  130               // 
 54:           assignment  130    5          // tmp130 = 'a': STRING;
 55:                 meta    2  130          // 
 56:           assignment  130    5          // tmp130 = 'b': STRING;
 57:                 meta    2  130          // 
 58:           assignment  130    5          // tmp130 = 'c': STRING;
 59:                 meta    2  130          // tmp130 = [tmp130, tmp130, tmp130];
 60:                 meta    2  130          // 
 61:                 meta    8    0          // catch end: 79;
 62:                 meta    9   11          // catch (err);
 63:           assignment  130    0          // tmp130 = true: SIMPLE;
 64:           assignment    0    6          // threw = tmp130 : TYPEOF(tmp130);
 65:           assignment  130    5          // tmp130 = 'constructor': STRING;
 66:          prop_getter  131    2          // tmp131 = err[tmp130];
 67: not_equal_value_type  132  131          // tmp132 = tmp131 !== Test262Error;
 68:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 79;
 69:               call_n  130    4          // 
 70:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but a "': STRING;
 71:           assignment  131    5          // tmp131 = 'constructor': STRING;
 72:          prop_getter  132    2          // tmp132 = err[tmp131];
 73:           assignment  133    5          // tmp133 = 'name': STRING;
 74:          prop_getter  134  132          // tmp134 = tmp132[tmp133];
 75:             addition  135  130          // tmp135 = tmp130 + tmp134;
 76:           assignment  136    5          // tmp136 = '" was thrown.': STRING;
 77:             addition  137  135          // tmp137 = tmp135 + tmp136;
 78:                 meta    2  137          // tmp130 = $ERROR (tmp137);
 79:                 meta   11  255          // end try
 80:           assignment  130    6          // tmp130 = threw : TYPEOF(threw);
 81:           assignment  131    0          // tmp131 = false: SIMPLE;
 82:     equal_value_type  132  130          // tmp132 = tmp130 === tmp131;
 83:    is_false_jmp_down  132    0          // if (tmp132 == false) goto 87;
 84:               call_n  130    4          // 
 85:           assignment  130    5          // tmp130 = 'Expected a Test262Error, but no error was thrown.': STRING;
 86:                 meta    2  130          // tmp130 = $ERROR (tmp130);
 87:                  ret                    // ret;
