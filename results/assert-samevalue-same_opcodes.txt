// // Copyright (C) 2015 the V8 project authors. All rights reserved.
// 
// // This code is governed by the BSD license found in the LICENSE file.
// 
// /*---
// 
// var obj;
  0:                 meta   12  255          // [to be rewritten]
// assert.sameValue(undefined, undefined);
// assert.sameValue(null, null);
// assert.sameValue(0, 0);
// assert.sameValue(1, 1);
// assert.sameValue('', '');
// assert.sameValue('s', 's');
// obj = {};
// assert.sameValue(obj, obj);
// 
  0:                 meta   12    6          // [no 'arguments'] [no 'eval']  // REWRITE
  1:         reg_var_decl  128               // var tmp128 .. tmp255;
  2:             var_decl                    // var obj;
// assert.sameValue(undefined, undefined);
// assert.sameValue(null, null);
// assert.sameValue(0, 0);
// assert.sameValue(1, 1);
// assert.sameValue('', '');
// assert.sameValue('s', 's');
// obj = {};
// assert.sameValue(obj, obj);
// 
// assert.sameValue(undefined, undefined);
  3:           assignment  130    5          // tmp130 = 'sameValue': STRING;
  4:          prop_getter  131  254          // tmp131 = assert[tmp130];
  5:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
  6:               call_n  255  131          // 
  7:                 meta    1    1          // 
  8:                 meta    2  254          // 
  9:                 meta    2  254          // 
  6:               call_n  133  131          //  // REWRITE
// assert.sameValue(null, null);
 10:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 11:          prop_getter  131  254          // tmp131 = assert[tmp130];
 12:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 13:               call_n  255  131          // 
 14:                 meta    1    1          // 
 15:           assignment  133    0          // tmp133 = null: SIMPLE;
 16:                 meta    2  133          // 
 17:           assignment  133    0          // tmp133 = null: SIMPLE;
 18:                 meta    2  133          // 
 13:               call_n  133  131          //  // REWRITE
// assert.sameValue(0, 0);
 19:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 20:          prop_getter  131  254          // tmp131 = assert[tmp130];
 21:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 22:               call_n  255  131          // 
 23:                 meta    1    1          // 
 24:           assignment  133    1          // tmp133 = 0: SMALLINT;
 25:                 meta    2  133          // 
 26:           assignment  133    1          // tmp133 = 0: SMALLINT;
 27:                 meta    2  133          // 
 22:               call_n  133  131          //  // REWRITE
// assert.sameValue(1, 1);
 28:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 29:          prop_getter  131  254          // tmp131 = assert[tmp130];
 30:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 31:               call_n  255  131          // 
 32:                 meta    1    1          // 
 33:           assignment  133    1          // tmp133 = 1: SMALLINT;
 34:                 meta    2  133          // 
 35:           assignment  133    1          // tmp133 = 1: SMALLINT;
 36:                 meta    2  133          // 
 31:               call_n  133  131          //  // REWRITE
// assert.sameValue('', '');
 37:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 38:          prop_getter  131  254          // tmp131 = assert[tmp130];
 39:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 40:               call_n  255  131          // 
 41:                 meta    1    1          // 
 42:           assignment  133    5          // tmp133 = '': STRING;
 43:                 meta    2  133          // 
 44:           assignment  133    5          // tmp133 = '': STRING;
 45:                 meta    2  133          // 
 40:               call_n  133  131          //  // REWRITE
// assert.sameValue('s', 's');
 46:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 47:          prop_getter  131  254          // tmp131 = assert[tmp130];
 48:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 49:               call_n  255  131          // 
 50:                 meta    1    1          // 
 51:           assignment  133    5          // tmp133 = 's': STRING;
 52:                 meta    2  133          // 
 53:           assignment  133    5          // tmp133 = 's': STRING;
 54:                 meta    2  133          // 
 49:               call_n  133  131          //  // REWRITE
// obj = {};
 55:             obj_decl  255               // 
 55:             obj_decl  130               // tmp130 = {}; // REWRITE
 56:           assignment  254    6          // obj = tmp130 : TYPEOF(tmp130);
// assert.sameValue(obj, obj);
 57:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 58:          prop_getter  131  254          // tmp131 = assert[tmp130];
 59:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 60:               call_n  255  131          // 
 61:                 meta    1    1          // 
 62:                 meta    2  254          // 
 63:                 meta    2  254          // 
 60:               call_n  133  131          //  // REWRITE
// 
  1:         reg_var_decl  128               // var tmp128 .. tmp133; // REWRITE
 64:                  ret                    // ret;
LITERALS:
0x84ec54 [ 12] obj : STRING
0x84ec60 [ 12] assert : STRING
0x84ec6c [ 16] sameValue : STRING
0x84ec7c [  4] undefined : MAGIC STRING [id=6] 
0x84ec94 [  4]  : MAGIC STRING [id=218] 
0x84ec98 [  8] s : STRING
0x84eca0 [ 32]  : EMPTY RECORD
  0:                 meta   12    6          // [no 'arguments'] [no 'eval'] 
  1:         reg_var_decl  128               // var tmp128 .. tmp133;
  2:             var_decl                    // var obj;
  3:           assignment  130    5          // tmp130 = 'sameValue': STRING;
  4:          prop_getter  131    2          // tmp131 = assert[tmp130];
  5:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
  6:               call_n  133  131          // 
  7:                 meta    1    1          // 
  8:                 meta    2    3          // 
  9:                 meta    2    3          // tmp133 = tmp131 (this_arg = tmp132, undefined, undefined);
 10:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 11:          prop_getter  131    2          // tmp131 = assert[tmp130];
 12:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 13:               call_n  133  131          // 
 14:                 meta    1    1          // 
 15:           assignment  133    0          // tmp133 = null: SIMPLE;
 16:                 meta    2  133          // 
 17:           assignment  133    0          // tmp133 = null: SIMPLE;
 18:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp133, tmp133);
 19:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 20:          prop_getter  131    2          // tmp131 = assert[tmp130];
 21:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 22:               call_n  133  131          // 
 23:                 meta    1    1          // 
 24:           assignment  133    1          // tmp133 = 0: SMALLINT;
 25:                 meta    2  133          // 
 26:           assignment  133    1          // tmp133 = 0: SMALLINT;
 27:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp133, tmp133);
 28:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 29:          prop_getter  131    2          // tmp131 = assert[tmp130];
 30:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 31:               call_n  133  131          // 
 32:                 meta    1    1          // 
 33:           assignment  133    1          // tmp133 = 1: SMALLINT;
 34:                 meta    2  133          // 
 35:           assignment  133    1          // tmp133 = 1: SMALLINT;
 36:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp133, tmp133);
 37:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 38:          prop_getter  131    2          // tmp131 = assert[tmp130];
 39:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 40:               call_n  133  131          // 
 41:                 meta    1    1          // 
 42:           assignment  133    5          // tmp133 = '': STRING;
 43:                 meta    2  133          // 
 44:           assignment  133    5          // tmp133 = '': STRING;
 45:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp133, tmp133);
 46:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 47:          prop_getter  131    2          // tmp131 = assert[tmp130];
 48:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 49:               call_n  133  131          // 
 50:                 meta    1    1          // 
 51:           assignment  133    5          // tmp133 = 's': STRING;
 52:                 meta    2  133          // 
 53:           assignment  133    5          // tmp133 = 's': STRING;
 54:                 meta    2  133          // tmp133 = tmp131 (this_arg = tmp132, tmp133, tmp133);
 55:             obj_decl  130               // tmp130 = {};
 56:           assignment    0    6          // obj = tmp130 : TYPEOF(tmp130);
 57:           assignment  130    5          // tmp130 = 'sameValue': STRING;
 58:          prop_getter  131    2          // tmp131 = assert[tmp130];
 59:           assignment  132    6          // tmp132 = assert : TYPEOF(assert);
 60:               call_n  133  131          // 
 61:                 meta    1    1          // 
 62:                 meta    2    0          // 
 63:                 meta    2    0          // tmp133 = tmp131 (this_arg = tmp132, obj, obj);
 64:                  ret                    // ret;
